
PowerMeter_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  0800bc10  0800bc10  0001bc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce64  0800ce64  00020698  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce6c  0800ce6c  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce70  0800ce70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  0800ce74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000698  0800d50c  00020698  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  0800d50c  000211d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022221  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408d  00000000  00000000  000428e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00046978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  000482a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258eb  00000000  00000000  00049a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf59  00000000  00000000  0006f313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de7af  00000000  00000000  0008c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016aa1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bfc  00000000  00000000  0016aa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000698 	.word	0x20000698
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bbf8 	.word	0x0800bbf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000069c 	.word	0x2000069c
 80001dc:	0800bbf8 	.word	0x0800bbf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b9 	b.w	8000fec <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96e 	b.w	8000fec <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ADS131A0xReset>:



/*****begin low level functions*************************************************/
// Perform hardware reset of ADC
void ADS131A0xReset(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADS131A0x_RST_GPIO_Port, ADS131A0x_RST_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <ADS131A0xReset+0x2c>)
 8000ffc:	f003 fb18 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001000:	2014      	movs	r0, #20
 8001002:	f002 fca7 	bl	8003954 <HAL_Delay>
	HAL_GPIO_WritePin(ADS131A0x_RST_GPIO_Port, ADS131A0x_RST_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <ADS131A0xReset+0x2c>)
 800100e:	f003 fb0f 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001012:	2014      	movs	r0, #20
 8001014:	f002 fc9e 	bl	8003954 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	48000400 	.word	0x48000400

08001020 <ADS131A0xSetCS>:
// manage CS pin
void ADS131A0xSetCS(uint8_t state)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	if (0 == state) {
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d107      	bne.n	8001040 <ADS131A0xSetCS+0x20>
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f003 faf9 	bl	8004630 <HAL_GPIO_WritePin>
	else if (1 == state) {
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_SET);
	}
	else
		assert(0);		//Aborts program
}
 800103e:	e009      	b.n	8001054 <ADS131A0xSetCS+0x34>
	else if (1 == state) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d106      	bne.n	8001054 <ADS131A0xSetCS+0x34>
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f003 faee 	bl	8004630 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ADS131A0xXferWord>:

// receive 32 bit, simultaneously send data
void ADS131A0xXferWord(uint8_t* txData, uint8_t* rxData) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af02      	add	r7, sp, #8
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	ADS131A0xSetCS(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ffda 	bl	8001020 <ADS131A0xSetCS>

	while(ADS131A0x_SPI_PORT.State == HAL_SPI_STATE_BUSY);
 800106c:	bf00      	nop
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <ADS131A0xXferWord+0x3c>)
 8001070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d0f9      	beq.n	800106e <ADS131A0xXferWord+0x12>
	HAL_SPI_TransmitReceive(&ADS131A0x_SPI_PORT, txData, rxData, ADS131A0x_WORD_SIZE, 100);
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2304      	movs	r3, #4
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <ADS131A0xXferWord+0x3c>)
 8001086:	f005 fbbc 	bl	8006802 <HAL_SPI_TransmitReceive>

	ADS131A0xSetCS(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ffc8 	bl	8001020 <ADS131A0xSetCS>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000f20 	.word	0x20000f20

0800109c <ADS131A0xSendCmd>:
uint32_t ADS131A0xSendCmd(uint16_t cmd) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]

	uint8_t txData[ADS131A0x_WORD_SIZE] = {0};
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
	uint8_t zeros[ADS131A0x_WORD_SIZE] = {0};
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
	static uint8_t rxData[ADS131A0x_WORD_SIZE];
	uint16_t res = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	82fb      	strh	r3, [r7, #22]
	//split 16bit cmd in 8bit array
	txData[1] = (cmd & 0xff);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	747b      	strb	r3, [r7, #17]
	txData[0] = (cmd >> 8);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	743b      	strb	r3, [r7, #16]
	//Send the command
	ADS131A0xXferWord(txData, rxData);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	490a      	ldr	r1, [pc, #40]	; (80010f0 <ADS131A0xSendCmd+0x54>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffc7 	bl	800105c <ADS131A0xXferWord>
	//The response of the previous cmd is in the next response
	//So send another empty cmd to get the response
	ADS131A0xXferWord(zeros, rxData);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4907      	ldr	r1, [pc, #28]	; (80010f0 <ADS131A0xSendCmd+0x54>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffc1 	bl	800105c <ADS131A0xXferWord>
	//Collapse response


	return rxData[1] + (rxData[0] << 8);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <ADS131A0xSendCmd+0x54>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <ADS131A0xSendCmd+0x54>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	4413      	add	r3, r2

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200006b4 	.word	0x200006b4

080010f4 <ADS131A0xCalibrate>:



void ADS131A0xCalibrate(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f002 fc2b 	bl	8003954 <HAL_Delay>
	CH1_OffsetCal = ch.Ch1Avg;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <ADS131A0xCalibrate+0x4c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <ADS131A0xCalibrate+0x50>)
 8001104:	6013      	str	r3, [r2, #0]
	CH2_OffsetCal = ch.Ch2Avg;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <ADS131A0xCalibrate+0x4c>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <ADS131A0xCalibrate+0x54>)
 800110c:	6013      	str	r3, [r2, #0]
	CH3_OffsetCal = ch.Ch3Avg;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <ADS131A0xCalibrate+0x4c>)
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <ADS131A0xCalibrate+0x58>)
 8001114:	6013      	str	r3, [r2, #0]
	CH4_OffsetCal = ch.Ch4Avg;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <ADS131A0xCalibrate+0x4c>)
 8001118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111a:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <ADS131A0xCalibrate+0x5c>)
 800111c:	6013      	str	r3, [r2, #0]

	measf.Q_CH1 = 0.0;
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <ADS131A0xCalibrate+0x60>)
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	measf.Q_CH2 = 0.0;
 800112c:	4909      	ldr	r1, [pc, #36]	; (8001154 <ADS131A0xCalibrate+0x60>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000d88 	.word	0x20000d88
 8001144:	20000820 	.word	0x20000820
 8001148:	20000824 	.word	0x20000824
 800114c:	2000086c 	.word	0x2000086c
 8001150:	20000808 	.word	0x20000808
 8001154:	20000828 	.word	0x20000828

08001158 <ADS131A0xReadRegister>:
/*****begin higher level functions***********************************************/



// read one register and return the result
uint16_t ADS131A0xReadRegister(uint8_t RegAddress) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]

	static uint16_t value = 0;

	uint16_t word = ADS131A0x_CMD_RREG | (RegAddress << 8);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21b      	sxth	r3, r3
 8001168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800116c:	b21b      	sxth	r3, r3
 800116e:	81fb      	strh	r3, [r7, #14]

	value = ADS131A0xSendCmd(word);
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff92 	bl	800109c <ADS131A0xSendCmd>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <ADS131A0xReadRegister+0x34>)
 800117e:	801a      	strh	r2, [r3, #0]

	//uint8_t ucBuf[128] = {};
	//snprintf((char*)ucBuf, sizeof(ucBuf), "RREG %lu Addr: %x, Word: %x, Value: %x ;\r\n", osKernelSysTick(), RegAddress, word, value);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return value;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <ADS131A0xReadRegister+0x34>)
 8001182:	881b      	ldrh	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200006b8 	.word	0x200006b8

08001190 <ADS131A0xWriteRegister>:
//write single register function
uint16_t ADS131A0xWriteRegister(uint8_t addr, uint8_t data) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]

	uint16_t word = ADS131A0x_CMD_WREG | (addr<<8) | data;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	81fb      	strh	r3, [r7, #14]

	uint16_t value = ADS131A0xSendCmd(word);
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff6f 	bl	800109c <ADS131A0xSendCmd>
 80011be:	4603      	mov	r3, r0
 80011c0:	81bb      	strh	r3, [r7, #12]

	//uint8_t ucBuf[128] = {};
	//snprintf((char*)ucBuf, sizeof(ucBuf), "WREG %lu Addr: %x,Value: %x, ret_val: %x;\r\n", osKernelSysTick(), addr, data, value);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return value;
 80011c2:	89bb      	ldrh	r3, [r7, #12]

}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ADS131A0xInit>:
// write a number of consecutive registers from a given array pointer
void ADS131A0xWriteMultiRegister(uint8_t addr, int NumRegs, uint8_t* pdata) {
	//TODO: implement function
}

void ADS131A0xInit(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0



	ch.Ch1Avg = 0;
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <ADS131A0xInit+0x140>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
	ch.Ch2Avg = 0;
 80011d8:	4b4c      	ldr	r3, [pc, #304]	; (800130c <ADS131A0xInit+0x140>)
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
	ch.Ch3Avg = 0;
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <ADS131A0xInit+0x140>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
	ch.Ch4Avg = 0;
 80011e4:	4b49      	ldr	r3, [pc, #292]	; (800130c <ADS131A0xInit+0x140>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c

	ch.Ch1Sum = 0;
 80011ea:	4948      	ldr	r1, [pc, #288]	; (800130c <ADS131A0xInit+0x140>)
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ch.Ch2Sum = 0;
 80011f8:	4944      	ldr	r1, [pc, #272]	; (800130c <ADS131A0xInit+0x140>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ch.Ch3Sum = 0;
 8001206:	4941      	ldr	r1, [pc, #260]	; (800130c <ADS131A0xInit+0x140>)
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ch.Ch4Sum = 0;
 8001214:	493d      	ldr	r1, [pc, #244]	; (800130c <ADS131A0xInit+0x140>)
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	measf.Q_CH1 = 0.0;
 8001222:	493b      	ldr	r1, [pc, #236]	; (8001310 <ADS131A0xInit+0x144>)
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	measf.Q_CH2 = 0.0;
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <ADS131A0xInit+0x144>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	measf.EnergyCH1 = 0.0;
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <ADS131A0xInit+0x144>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c1 2308 	strd	r2, r3, [r1, #32]
	measf.EnergyCH1 = 0.0;
 800124c:	4930      	ldr	r1, [pc, #192]	; (8001310 <ADS131A0xInit+0x144>)
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c1 2308 	strd	r2, r3, [r1, #32]


	CH1_OffsetCal = 0;
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <ADS131A0xInit+0x148>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
	CH2_OffsetCal = 0;
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <ADS131A0xInit+0x14c>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	CH3_OffsetCal = 0;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <ADS131A0xInit+0x150>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
	CH4_OffsetCal = 0;
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <ADS131A0xInit+0x154>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

	uint16_t res_unlocked;

	ADS131A0xReset();
 8001272:	f7ff febd 	bl	8000ff0 <ADS131A0xReset>
//	uint16_t status = ADS131A0xSendCmd(0x0000);
//	HAL_Delay(10);
//	ADS131A0xSetCS(1);
do{

	ADS131A0xSetCS(0);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fed2 	bl	8001020 <ADS131A0xSetCS>
	HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f002 fb69 	bl	8003954 <HAL_Delay>
	status = ADS131A0xSendCmd(0x0000);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ff0a 	bl	800109c <ADS131A0xSendCmd>
 8001288:	4603      	mov	r3, r0
 800128a:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f002 fb61 	bl	8003954 <HAL_Delay>
	ADS131A0xSetCS(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fec4 	bl	8001020 <ADS131A0xSetCS>
HAL_Delay(50);
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f002 fb5b 	bl	8003954 <HAL_Delay>
}
while(status != 0xff04);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	f64f 7204 	movw	r2, #65284	; 0xff04
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d1e6      	bne.n	8001276 <ADS131A0xInit+0xaa>
	//device ready
	if(status == 0xff04) {
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f64f 7204 	movw	r2, #65284	; 0xff04
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d127      	bne.n	8001302 <ADS131A0xInit+0x136>
		//Unlock device
		res_unlocked = ADS131A0xSendCmd(ADS131A0x_CMD_UNLOCK);
 80012b2:	f240 6055 	movw	r0, #1621	; 0x655
 80012b6:	f7ff fef1 	bl	800109c <ADS131A0xSendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]

		if(res_unlocked == ADS131A0x_CMD_UNLOCK) {
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	f240 6255 	movw	r2, #1621	; 0x655
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d11c      	bne.n	8001302 <ADS131A0xInit+0x136>
			//Read/write regs and check results
			ADS131A0xReadRegister(ADS131A0x_REG_A_SYS_CFG);
 80012c8:	200b      	movs	r0, #11
 80012ca:	f7ff ff45 	bl	8001158 <ADS131A0xReadRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_A_SYS_CFG, 0x60);
 80012ce:	2160      	movs	r1, #96	; 0x60
 80012d0:	200b      	movs	r0, #11
 80012d2:	f7ff ff5d 	bl	8001190 <ADS131A0xWriteRegister>

			ADS131A0xReadRegister(ADS131A0x_REG_A_SYS_CFG);
 80012d6:	200b      	movs	r0, #11
 80012d8:	f7ff ff3e 	bl	8001158 <ADS131A0xReadRegister>

	//		ADS131A0xWriteRegister(ADS131A0x_REG_CLK1, 0x00);

	//		ADS131A0xWriteRegister(ADS131A0x_REG_CLK2, 0x25);

			ADS131A0xWriteRegister(ADS131A0x_REG_CLK1, 0x02);
 80012dc:	2102      	movs	r1, #2
 80012de:	200d      	movs	r0, #13
 80012e0:	f7ff ff56 	bl	8001190 <ADS131A0xWriteRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_CLK2, 0x25);
 80012e4:	2125      	movs	r1, #37	; 0x25
 80012e6:	200e      	movs	r0, #14
 80012e8:	f7ff ff52 	bl	8001190 <ADS131A0xWriteRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_ADC_ENA, 0x0F);
 80012ec:	210f      	movs	r1, #15
 80012ee:	200f      	movs	r0, #15
 80012f0:	f7ff ff4e 	bl	8001190 <ADS131A0xWriteRegister>

			ADS131A0xSendCmd(ADS131A0x_CMD_WAKEUP);
 80012f4:	2033      	movs	r0, #51	; 0x33
 80012f6:	f7ff fed1 	bl	800109c <ADS131A0xSendCmd>

			ADS131A0xSendCmd(ADS131A0x_CMD_LOCK);
 80012fa:	f240 5055 	movw	r0, #1365	; 0x555
 80012fe:	f7ff fecd 	bl	800109c <ADS131A0xSendCmd>
	else {
		//TODO: report error
	}


}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000d88 	.word	0x20000d88
 8001310:	20000828 	.word	0x20000828
 8001314:	20000820 	.word	0x20000820
 8001318:	20000824 	.word	0x20000824
 800131c:	2000086c 	.word	0x2000086c
 8001320:	20000808 	.word	0x20000808

08001324 <ADS131A0xGetChannels>:
t_ADS131A0xData ADS131A0xGetChannels(void){
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001328:	b087      	sub	sp, #28
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
	static uint8_t cnt;
	long val;

	ch.Status = ADS131A0x_DataBuf[0] << 8 | ADS131A0x_DataBuf[1];
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b50      	ldr	r3, [pc, #320]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b4e      	ldr	r3, [pc, #312]	; (800147c <ADS131A0xGetChannels+0x158>)
 8001344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
//	ch.Ch1 = ((ADS131A0x_DataBuf[4] << 16) | (ADS131A0x_DataBuf[5] << 8) | (ADS131A0x_DataBuf[6]));
//	ch.Ch2 = ((ADS131A0x_DataBuf[8] << 16) | (ADS131A0x_DataBuf[9] << 8) | (ADS131A0x_DataBuf[10]));
//	ch.Ch3 = ((ADS131A0x_DataBuf[12] << 16) | (ADS131A0x_DataBuf[13] << 8) | (ADS131A0x_DataBuf[14]));
//	ch.Ch4 = ((ADS131A0x_DataBuf[16] << 16) | (ADS131A0x_DataBuf[17] << 8) | (ADS131A0x_DataBuf[18]));

	if (ADS131A0x_DataBuf[4] & 0x80)
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	da17      	bge.n	8001382 <ADS131A0xGetChannels+0x5e>
	{
	val = 0xff;
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[4];
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800135c:	7912      	ldrb	r2, [r2, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[5];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4a44      	ldr	r2, [pc, #272]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001368:	7952      	ldrb	r2, [r2, #5]
 800136a:	4313      	orrs	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[6];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001374:	7992      	ldrb	r2, [r2, #6]
 8001376:	4313      	orrs	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
	ch.Ch1 = val;
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <ADS131A0xGetChannels+0x158>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e00b      	b.n	800139a <ADS131A0xGetChannels+0x76>
	}
	else
	{
		ch.Ch1 = ((ADS131A0x_DataBuf[4] << 16) | (ADS131A0x_DataBuf[5] << 8) | (ADS131A0x_DataBuf[6]));
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4313      	orrs	r3, r2
 8001390:	4a39      	ldr	r2, [pc, #228]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001392:	7992      	ldrb	r2, [r2, #6]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a39      	ldr	r2, [pc, #228]	; (800147c <ADS131A0xGetChannels+0x158>)
 8001398:	6013      	str	r3, [r2, #0]
	}
	if (ADS131A0x_DataBuf[8] & 0x80)
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800139c:	7a1b      	ldrb	r3, [r3, #8]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da17      	bge.n	80013d4 <ADS131A0xGetChannels+0xb0>
	{
	val = 0xff;
 80013a4:	23ff      	movs	r3, #255	; 0xff
 80013a6:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[8];
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	4a32      	ldr	r2, [pc, #200]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013ae:	7a12      	ldrb	r2, [r2, #8]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[9];
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013ba:	7a52      	ldrb	r2, [r2, #9]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[10];
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013c6:	7a92      	ldrb	r2, [r2, #10]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
	ch.Ch2 = val;
 80013cc:	4a2b      	ldr	r2, [pc, #172]	; (800147c <ADS131A0xGetChannels+0x158>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	6053      	str	r3, [r2, #4]
 80013d2:	e00b      	b.n	80013ec <ADS131A0xGetChannels+0xc8>
	}
	else
	{
		ch.Ch2 = ((ADS131A0x_DataBuf[8] << 16) | (ADS131A0x_DataBuf[9] << 8) | (ADS131A0x_DataBuf[10]));
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013d6:	7a1b      	ldrb	r3, [r3, #8]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013dc:	7a5b      	ldrb	r3, [r3, #9]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013e4:	7a92      	ldrb	r2, [r2, #10]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <ADS131A0xGetChannels+0x158>)
 80013ea:	6053      	str	r3, [r2, #4]
	}
	if (ADS131A0x_DataBuf[12] & 0x80)
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <ADS131A0xGetChannels+0x154>)
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da17      	bge.n	8001426 <ADS131A0xGetChannels+0x102>
	{
	val = 0xff;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[12];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001400:	7b12      	ldrb	r2, [r2, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[13];
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800140c:	7b52      	ldrb	r2, [r2, #13]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[14];
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001418:	7b92      	ldrb	r2, [r2, #14]
 800141a:	4313      	orrs	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
	ch.Ch3 = val;
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <ADS131A0xGetChannels+0x158>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6093      	str	r3, [r2, #8]
 8001424:	e00b      	b.n	800143e <ADS131A0xGetChannels+0x11a>
	}
	else
	{
		ch.Ch3 = ((ADS131A0x_DataBuf[12] << 16) | (ADS131A0x_DataBuf[13] << 8) | (ADS131A0x_DataBuf[14]));
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	041a      	lsls	r2, r3, #16
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800142e:	7b5b      	ldrb	r3, [r3, #13]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	4313      	orrs	r3, r2
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001436:	7b92      	ldrb	r2, [r2, #14]
 8001438:	4313      	orrs	r3, r2
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <ADS131A0xGetChannels+0x158>)
 800143c:	6093      	str	r3, [r2, #8]
	}
	if (ADS131A0x_DataBuf[16] & 0x80)
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001440:	7c1b      	ldrb	r3, [r3, #16]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	da1b      	bge.n	8001480 <ADS131A0xGetChannels+0x15c>
	{
	val = 0xff;
 8001448:	23ff      	movs	r3, #255	; 0xff
 800144a:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[16];
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <ADS131A0xGetChannels+0x154>)
 8001452:	7c12      	ldrb	r2, [r2, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[17];
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800145e:	7c52      	ldrb	r2, [r2, #17]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
	val = (val << 8) | ADS131A0x_DataBuf[18];
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <ADS131A0xGetChannels+0x154>)
 800146a:	7c92      	ldrb	r2, [r2, #18]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
	ch.Ch4 = val;
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <ADS131A0xGetChannels+0x158>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	60d3      	str	r3, [r2, #12]
 8001476:	e00f      	b.n	8001498 <ADS131A0xGetChannels+0x174>
 8001478:	20000d74 	.word	0x20000d74
 800147c:	20000d88 	.word	0x20000d88
	}
	else
	{
		ch.Ch4 = ((ADS131A0x_DataBuf[16] << 16) | (ADS131A0x_DataBuf[17] << 8) | (ADS131A0x_DataBuf[18]));
 8001480:	4b9a      	ldr	r3, [pc, #616]	; (80016ec <ADS131A0xGetChannels+0x3c8>)
 8001482:	7c1b      	ldrb	r3, [r3, #16]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	4b99      	ldr	r3, [pc, #612]	; (80016ec <ADS131A0xGetChannels+0x3c8>)
 8001488:	7c5b      	ldrb	r3, [r3, #17]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4313      	orrs	r3, r2
 800148e:	4a97      	ldr	r2, [pc, #604]	; (80016ec <ADS131A0xGetChannels+0x3c8>)
 8001490:	7c92      	ldrb	r2, [r2, #18]
 8001492:	4313      	orrs	r3, r2
 8001494:	4a96      	ldr	r2, [pc, #600]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001496:	60d3      	str	r3, [r2, #12]
	}


	meas.CH1_Current[cnt] = ch.Ch1;
 8001498:	4b96      	ldr	r3, [pc, #600]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4995      	ldr	r1, [pc, #596]	; (80016f8 <ADS131A0xGetChannels+0x3d4>)
 80014a4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	meas.CH2_Current[cnt] = ch.Ch3;
 80014ac:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	4990      	ldr	r1, [pc, #576]	; (80016f8 <ADS131A0xGetChannels+0x3d4>)
 80014b8:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	meas.CH2_Voltage[cnt] = ch.Ch2;
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	498b      	ldr	r1, [pc, #556]	; (80016f8 <ADS131A0xGetChannels+0x3d4>)
 80014cc:	f100 0350 	add.w	r3, r0, #80	; 0x50
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	meas.CH1_Voltage[cnt] = ch.Ch4;
 80014d4:	4b87      	ldr	r3, [pc, #540]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a86      	ldr	r2, [pc, #536]	; (80016f8 <ADS131A0xGetChannels+0x3d4>)
 80014e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	ch.Ch1Sum = ch.Ch1Sum + ch.Ch1;
 80014e4:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014f4:	1886      	adds	r6, r0, r2
 80014f6:	603e      	str	r6, [r7, #0]
 80014f8:	eb41 0303 	adc.w	r3, r1, r3
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001500:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001504:	e9c3 1204 	strd	r1, r2, [r3, #16]

	ch.Ch2Sum = ch.Ch2Sum + ch.Ch2;
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800150a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800150e:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001518:	eb10 0a02 	adds.w	sl, r0, r2
 800151c:	eb41 0b03 	adc.w	fp, r1, r3
 8001520:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001522:	e9c3 ab06 	strd	sl, fp, [r3, #24]

	ch.Ch3Sum = ch.Ch3Sum + ch.Ch3;
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001528:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800152c:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	461a      	mov	r2, r3
 8001532:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001536:	eb10 0802 	adds.w	r8, r0, r2
 800153a:	eb41 0903 	adc.w	r9, r1, r3
 800153e:	4b6c      	ldr	r3, [pc, #432]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001540:	e9c3 8908 	strd	r8, r9, [r3, #32]

	ch.Ch4Sum = ch.Ch4Sum + ch.Ch4;
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001546:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800154a:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	461a      	mov	r2, r3
 8001550:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001554:	1884      	adds	r4, r0, r2
 8001556:	eb41 0503 	adc.w	r5, r1, r3
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800155c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28





	cnt++;
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 800156a:	701a      	strb	r2, [r3, #0]
	if(cnt > BUFFER_SIZE)
 800156c:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b50      	cmp	r3, #80	; 0x50
 8001572:	f240 80ae 	bls.w	80016d2 <ADS131A0xGetChannels+0x3ae>
	{
		cnt = 0;
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <ADS131A0xGetChannels+0x3d0>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
//		ch.Ch1Avg = ch.Ch1Sum / BUFFER_SIZE - CH1_OffsetCal;
//		ch.Ch2Avg = ch.Ch2Sum / BUFFER_SIZE - CH2_OffsetCal;
//		ch.Ch3Avg = ch.Ch3Sum / BUFFER_SIZE - CH3_OffsetCal;
//		ch.Ch4Avg = ch.Ch4Sum / BUFFER_SIZE - CH4_OffsetCal;

		ch.Ch1Avg = ch.Ch1Sum / BUFFER_SIZE ;
 800157c:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800157e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001582:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	f7ff fb65 	bl	8000c58 <__aeabi_ldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
		ch.Ch2Avg = ch.Ch2Sum / BUFFER_SIZE ;
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001598:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800159c:	f04f 0250 	mov.w	r2, #80	; 0x50
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	f7ff fb58 	bl	8000c58 <__aeabi_ldivmod>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
		ch.Ch3Avg = ch.Ch3Sum / BUFFER_SIZE ;
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015b2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80015b6:	f04f 0250 	mov.w	r2, #80	; 0x50
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f7ff fb4b 	bl	8000c58 <__aeabi_ldivmod>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
		ch.Ch4Avg = ch.Ch4Sum / BUFFER_SIZE ;
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015d0:	f04f 0250 	mov.w	r2, #80	; 0x50
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f7ff fb3e 	bl	8000c58 <__aeabi_ldivmod>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c

		ch.Ch1Sum = 0;
 80015e4:	4942      	ldr	r1, [pc, #264]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
		ch.Ch2Sum = 0;
 80015f2:	493f      	ldr	r1, [pc, #252]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ch.Ch3Sum = 0;
 8001600:	493b      	ldr	r1, [pc, #236]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ch.Ch4Sum = 0;
 800160e:	4938      	ldr	r1, [pc, #224]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

//	measf.Ch1 = ((float)ch.Ch1Avg - CH1_OffsetCal) / 8388608.0 * 2.5 * 37.5 * 2.0 ;
	//measf.Ch2 = ((float)ch.Ch2Avg- CH2_OffsetCal) / 8388608.0 * 2.5 * 328.0;
//	measf.Ch3 = ((float)ch.Ch3Avg- CH3_OffsetCal) / 8388608.0 * 2.5 * 37.5 * 2.0 ;
	//measf.Ch4 = ((float)ch.Ch4Avg- CH4_OffsetCal) / 8388608.0 * 2.5 * 328.0;
	measf.Ch1 = interpolateValue(ch.Ch1Avg - CH1_OffsetCal, intLUT_I_CH2, floatLUT_I, LUT_SIZE_I);
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800161e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <ADS131A0xGetChannels+0x3d8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad0      	subs	r0, r2, r3
 8001626:	2332      	movs	r3, #50	; 0x32
 8001628:	4a35      	ldr	r2, [pc, #212]	; (8001700 <ADS131A0xGetChannels+0x3dc>)
 800162a:	4936      	ldr	r1, [pc, #216]	; (8001704 <ADS131A0xGetChannels+0x3e0>)
 800162c:	f000 f87c 	bl	8001728 <interpolateValue>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
	measf.Ch3 = interpolateValue(ch.Ch3Avg - CH3_OffsetCal, intLUT_I_CH1, floatLUT_I, LUT_SIZE_I);
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800163c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <ADS131A0xGetChannels+0x3e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1ad0      	subs	r0, r2, r3
 8001644:	2332      	movs	r3, #50	; 0x32
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <ADS131A0xGetChannels+0x3dc>)
 8001648:	4931      	ldr	r1, [pc, #196]	; (8001710 <ADS131A0xGetChannels+0x3ec>)
 800164a:	f000 f86d 	bl	8001728 <interpolateValue>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 8001654:	edc3 7a02 	vstr	s15, [r3, #8]
	measf.Ch4 = interpolateValue(ch.Ch4Avg - CH4_OffsetCal, intLUT_V_CH1, floatLUT_V, LUT_SIZE_V);
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 800165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <ADS131A0xGetChannels+0x3f0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad0      	subs	r0, r2, r3
 8001662:	2332      	movs	r3, #50	; 0x32
 8001664:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <ADS131A0xGetChannels+0x3f4>)
 8001666:	492d      	ldr	r1, [pc, #180]	; (800171c <ADS131A0xGetChannels+0x3f8>)
 8001668:	f000 f85e 	bl	8001728 <interpolateValue>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 8001672:	edc3 7a03 	vstr	s15, [r3, #12]
	measf.Ch2 = interpolateValue(ch.Ch2Avg - CH2_OffsetCal, intLUT_V_CH2, floatLUT_V, LUT_SIZE_V);
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <ADS131A0xGetChannels+0x3fc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1ad0      	subs	r0, r2, r3
 8001680:	2332      	movs	r3, #50	; 0x32
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <ADS131A0xGetChannels+0x3f4>)
 8001684:	4927      	ldr	r1, [pc, #156]	; (8001724 <ADS131A0xGetChannels+0x400>)
 8001686:	f000 f84f 	bl	8001728 <interpolateValue>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 8001690:	edc3 7a01 	vstr	s15, [r3, #4]
//	measf.Ch2 = interpolateValue(ch.Ch2Avg- CH2_OffsetCal, intLUT_V_CH1, floatLUT_V_CH1);
	measf.P1 = measf.Ch3 * measf.Ch4;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 8001696:	ed93 7a02 	vldr	s14, [r3, #8]
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 800169c:	edd3 7a03 	vldr	s15, [r3, #12]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 80016a6:	edc3 7a05 	vstr	s15, [r3, #20]
	measf.P2 = measf.Ch1 * measf.Ch2;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 80016b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <ADS131A0xGetChannels+0x3e4>)
 80016bc:	edc3 7a06 	vstr	s15, [r3, #24]
//
//	if (measf.P2 >= 1.0)
//		measf.EnergyCH2 = measf.EnergyCH2 + measf.P2 * 0.001;


	return ch;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	4611      	mov	r1, r2
 80016c8:	2348      	movs	r3, #72	; 0x48
 80016ca:	461a      	mov	r2, r3
 80016cc:	f007 fbf6 	bl	8008ebc <memcpy>
 80016d0:	e007      	b.n	80016e2 <ADS131A0xGetChannels+0x3be>
		return ch;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <ADS131A0xGetChannels+0x3cc>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	4611      	mov	r1, r2
 80016da:	2348      	movs	r3, #72	; 0x48
 80016dc:	461a      	mov	r2, r3
 80016de:	f007 fbed 	bl	8008ebc <memcpy>
}
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ec:	20000d74 	.word	0x20000d74
 80016f0:	20000d88 	.word	0x20000d88
 80016f4:	200006ba 	.word	0x200006ba
 80016f8:	20000874 	.word	0x20000874
 80016fc:	20000820 	.word	0x20000820
 8001700:	200003e8 	.word	0x200003e8
 8001704:	20000320 	.word	0x20000320
 8001708:	20000828 	.word	0x20000828
 800170c:	2000086c 	.word	0x2000086c
 8001710:	20000258 	.word	0x20000258
 8001714:	20000808 	.word	0x20000808
 8001718:	200000c8 	.word	0x200000c8
 800171c:	20000000 	.word	0x20000000
 8001720:	20000824 	.word	0x20000824
 8001724:	20000190 	.word	0x20000190

08001728 <interpolateValue>:
  //return the average
  return *ptrSum / len;
}

float interpolateValue(int32_t input, int32_t* intLUT, float* fLUT, uint8_t LUT_Size)
{
 8001728:	b480      	push	{r7}
 800172a:	b08b      	sub	sp, #44	; 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	70fb      	strb	r3, [r7, #3]
	static short MatchFound;

	float x0,y0,x1,y1;


	i = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
	MatchFound = 0;
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <interpolateValue+0xf4>)
 800173c:	2200      	movs	r2, #0
 800173e:	801a      	strh	r2, [r3, #0]
	do {

		if ((*(intLUT + i + 1) >= input) && *(intLUT + i)  < input) {
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3301      	adds	r3, #1
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	dc4c      	bgt.n	80017ec <interpolateValue+0xc4>
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd44      	ble.n	80017ec <interpolateValue+0xc4>
			MatchFound = 1;
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <interpolateValue+0xf4>)
 8001764:	2201      	movs	r2, #1
 8001766:	801a      	strh	r2, [r3, #0]
			x0 = (float)(*(intLUT + i));
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	edc7 7a08 	vstr	s15, [r7, #32]
			x1 = (float)(*(intLUT + i + 1));
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	edc7 7a07 	vstr	s15, [r7, #28]

			y0 = *(fLUT + i);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
			y1 = *(fLUT + i + 1);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	617b      	str	r3, [r7, #20]


			return y0 + (y1 - y0)/(x1 - x0) * (input - x0) ;
 80017b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80017c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	e010      	b.n	800180e <interpolateValue+0xe6>
		}
		i++;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3301      	adds	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (i > LUT_Size)
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dd02      	ble.n	8001800 <interpolateValue+0xd8>

			return -255.0;
 80017fa:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001820 <interpolateValue+0xf8>
 80017fe:	e006      	b.n	800180e <interpolateValue+0xe6>

	} while (MatchFound != 1);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <interpolateValue+0xf4>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d19a      	bne.n	8001740 <interpolateValue+0x18>

	return -255.0;
 800180a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001820 <interpolateValue+0xf8>

}
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	372c      	adds	r7, #44	; 0x2c
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	200006bc 	.word	0x200006bc
 8001820:	c37f0000 	.word	0xc37f0000

08001824 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2101      	movs	r1, #1
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <ST7735_Select+0x18>)
 800182e:	f002 feff 	bl	8004630 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001832:	200a      	movs	r0, #10
 8001834:	f002 f88e 	bl	8003954 <HAL_Delay>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	48000400 	.word	0x48000400

08001840 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2101      	movs	r1, #1
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <ST7735_Unselect+0x18>)
 800184a:	f002 fef1 	bl	8004630 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800184e:	200a      	movs	r0, #10
 8001850:	f002 f880 	bl	8003954 <HAL_Delay>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	48000400 	.word	0x48000400

0800185c <ST7735_Reset>:

static void ST7735_Reset() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f002 fee2 	bl	8004630 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800186c:	2005      	movs	r0, #5
 800186e:	f002 f871 	bl	8003954 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f002 fed9 	bl	8004630 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800187e:	200a      	movs	r0, #10
 8001880:	f002 f868 	bl	8003954 <HAL_Delay>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2102      	movs	r1, #2
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <ST7735_WriteCommand+0x2c>)
 8001898:	f002 feca 	bl	8004630 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800189c:	1df9      	adds	r1, r7, #7
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	2201      	movs	r2, #1
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <ST7735_WriteCommand+0x30>)
 80018a6:	f004 fe3e 	bl	8006526 <HAL_SPI_Transmit>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	48000400 	.word	0x48000400
 80018b8:	20001074 	.word	0x20001074

080018bc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2102      	movs	r1, #2
 80018ca:	480a      	ldr	r0, [pc, #40]	; (80018f4 <ST7735_WriteData+0x38>)
 80018cc:	f002 feb0 	bl	8004630 <HAL_GPIO_WritePin>
    do {
    	;
    }
    while(ST7735_SPI_PORT.State != HAL_SPI_STATE_READY);
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <ST7735_WriteData+0x3c>)
 80018d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d1f9      	bne.n	80018d0 <ST7735_WriteData+0x14>

    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,1);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2301      	movs	r3, #1
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <ST7735_WriteData+0x3c>)
 80018e6:	f004 fe1e 	bl	8006526 <HAL_SPI_Transmit>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	48000400 	.word	0x48000400
 80018f8:	20001074 	.word	0x20001074

080018fc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800190e:	e034      	b.n	800197a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffb3 	bl	8001888 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800192c:	7abb      	ldrb	r3, [r7, #10]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001934:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001936:	7abb      	ldrb	r3, [r7, #10]
 8001938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800193c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001944:	7abb      	ldrb	r3, [r7, #10]
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ffb7 	bl	80018bc <ST7735_WriteData>
            addr += numArgs;
 800194e:	7abb      	ldrb	r3, [r7, #10]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001966:	89bb      	ldrh	r3, [r7, #12]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d102      	bne.n	8001972 <ST7735_ExecuteCommandList+0x76>
 800196c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001970:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001972:	89bb      	ldrh	r3, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f001 ffed 	bl	8003954 <HAL_Delay>
    while(numCommands--) {
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	73fa      	strb	r2, [r7, #15]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1c5      	bne.n	8001910 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800198e:	b590      	push	{r4, r7, lr}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	4604      	mov	r4, r0
 8001996:	4608      	mov	r0, r1
 8001998:	4611      	mov	r1, r2
 800199a:	461a      	mov	r2, r3
 800199c:	4623      	mov	r3, r4
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	4603      	mov	r3, r0
 80019a2:	71bb      	strb	r3, [r7, #6]
 80019a4:	460b      	mov	r3, r1
 80019a6:	717b      	strb	r3, [r7, #5]
 80019a8:	4613      	mov	r3, r2
 80019aa:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80019ac:	202a      	movs	r0, #42	; 0x2a
 80019ae:	f7ff ff6b 	bl	8001888 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80019b2:	2300      	movs	r3, #0
 80019b4:	733b      	strb	r3, [r7, #12]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3301      	adds	r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	737b      	strb	r3, [r7, #13]
 80019be:	2300      	movs	r3, #0
 80019c0:	73bb      	strb	r3, [r7, #14]
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2104      	movs	r1, #4
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff73 	bl	80018bc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80019d6:	202b      	movs	r0, #43	; 0x2b
 80019d8:	f7ff ff56 	bl	8001888 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	3302      	adds	r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80019e4:	793b      	ldrb	r3, [r7, #4]
 80019e6:	3302      	adds	r3, #2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2104      	movs	r1, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff62 	bl	80018bc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80019f8:	202c      	movs	r0, #44	; 0x2c
 80019fa:	f7ff ff45 	bl	8001888 <ST7735_WriteCommand>
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
	...

08001a08 <ST7735_Init>:

void ST7735_Init() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001a0c:	f7ff ff0a 	bl	8001824 <ST7735_Select>
    ST7735_Reset();
 8001a10:	f7ff ff24 	bl	800185c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <ST7735_Init+0x28>)
 8001a16:	f7ff ff71 	bl	80018fc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <ST7735_Init+0x2c>)
 8001a1c:	f7ff ff6e 	bl	80018fc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <ST7735_Init+0x30>)
 8001a22:	f7ff ff6b 	bl	80018fc <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001a26:	f7ff ff0b 	bl	8001840 <ST7735_Unselect>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	0800c9c0 	.word	0x0800c9c0
 8001a34:	0800c9fc 	.word	0x0800c9fc
 8001a38:	0800ca0c 	.word	0x0800ca0c

08001a3c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	b590      	push	{r4, r7, lr}
 8001a40:	b089      	sub	sp, #36	; 0x24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2d8      	uxtb	r0, r3
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	b2d9      	uxtb	r1, r3
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a62:	4413      	add	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b2dc      	uxtb	r4, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a72:	4413      	add	r3, r2
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	f7ff ff87 	bl	800198e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e043      	b.n	8001b0e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	3b20      	subs	r3, #32
 8001a8c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	440b      	add	r3, r1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e029      	b.n	8001afc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	743b      	strb	r3, [r7, #16]
 8001ac2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fef4 	bl	80018bc <ST7735_WriteData>
 8001ad4:	e00f      	b.n	8001af6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001ad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	733b      	strb	r3, [r7, #12]
 8001ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2102      	movs	r1, #2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fee3 	bl	80018bc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b00:	461a      	mov	r2, r3
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d3cf      	bcc.n	8001aa8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b12:	461a      	mov	r2, r3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3b5      	bcc.n	8001a86 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b26:	b002      	add	sp, #8
 8001b28:	4770      	bx	lr

08001b2a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	603a      	str	r2, [r7, #0]
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001b3e:	f7ff fe71 	bl	8001824 <ST7735_Select>


    while(*str) {
 8001b42:	e02d      	b.n	8001ba0 <ST7735_WriteString+0x76>

        if(x + font.width >= ST7735_WIDTH) {
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	7d3a      	ldrb	r2, [r7, #20]
 8001b48:	4413      	add	r3, r2
 8001b4a:	2b9f      	cmp	r3, #159	; 0x9f
 8001b4c:	dd13      	ble.n	8001b76 <ST7735_WriteString+0x4c>
            x = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	7d7a      	ldrb	r2, [r7, #21]
 8001b60:	4413      	add	r3, r2
 8001b62:	2b7f      	cmp	r3, #127	; 0x7f
 8001b64:	dc21      	bgt.n	8001baa <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d103      	bne.n	8001b76 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
                continue;
 8001b74:	e014      	b.n	8001ba0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	88b9      	ldrh	r1, [r7, #4]
 8001b7c:	88f8      	ldrh	r0, [r7, #6]
 8001b7e:	8c3b      	ldrh	r3, [r7, #32]
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	8bbb      	ldrh	r3, [r7, #28]
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f7ff ff56 	bl	8001a3c <ST7735_WriteChar>
        x += font.width;
 8001b90:	7d3b      	ldrb	r3, [r7, #20]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	4413      	add	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]
        str++;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1cd      	bne.n	8001b44 <ST7735_WriteString+0x1a>
 8001ba8:	e000      	b.n	8001bac <ST7735_WriteString+0x82>
                break;
 8001baa:	bf00      	nop
    }

    ST7735_Unselect();
 8001bac:	f7ff fe48 	bl	8001840 <ST7735_Unselect>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bba:	b002      	add	sp, #8
 8001bbc:	4770      	bx	lr
	...

08001bc0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b9f      	cmp	r3, #159	; 0x9f
 8001be2:	d857      	bhi.n	8001c94 <ST7735_FillRectangle+0xd4>
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	2b7f      	cmp	r3, #127	; 0x7f
 8001be8:	d854      	bhi.n	8001c94 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4413      	add	r3, r2
 8001bf0:	2ba0      	cmp	r3, #160	; 0xa0
 8001bf2:	dd03      	ble.n	8001bfc <ST7735_FillRectangle+0x3c>
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001bfa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001bfc:	88ba      	ldrh	r2, [r7, #4]
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	2b80      	cmp	r3, #128	; 0x80
 8001c04:	dd03      	ble.n	8001c0e <ST7735_FillRectangle+0x4e>
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c0c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001c0e:	f7ff fe09 	bl	8001824 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	b2d8      	uxtb	r0, r3
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	b2d9      	uxtb	r1, r3
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b2dc      	uxtb	r4, r3
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	883b      	ldrh	r3, [r7, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f7ff fea7 	bl	800198e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001c40:	8c3b      	ldrh	r3, [r7, #32]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	733b      	strb	r3, [r7, #12]
 8001c4a:	8c3b      	ldrh	r3, [r7, #32]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2102      	movs	r1, #2
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <ST7735_FillRectangle+0xdc>)
 8001c56:	f002 fceb 	bl	8004630 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001c5a:	883b      	ldrh	r3, [r7, #0]
 8001c5c:	80bb      	strh	r3, [r7, #4]
 8001c5e:	e013      	b.n	8001c88 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	80fb      	strh	r3, [r7, #6]
 8001c64:	e00a      	b.n	8001c7c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001c66:	f107 010c 	add.w	r1, r7, #12
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	2202      	movs	r2, #2
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <ST7735_FillRectangle+0xe0>)
 8001c72:	f004 fc58 	bl	8006526 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	80fb      	strh	r3, [r7, #6]
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001c82:	88bb      	ldrh	r3, [r7, #4]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	80bb      	strh	r3, [r7, #4]
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e8      	bne.n	8001c60 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001c8e:	f7ff fdd7 	bl	8001840 <ST7735_Unselect>
 8001c92:	e000      	b.n	8001c96 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001c94:	bf00      	nop
}
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	20001074 	.word	0x20001074

08001ca4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	22a0      	movs	r2, #160	; 0xa0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff ff81 	bl	8001bc0 <ST7735_FillRectangle>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <TEMP116_init>:
uint8_t TMP116_DeviceID 	= (0x4B << 1);
#endif


/* Functions ------------------------------------------------------------------*/
temp_err TEMP116_init(I2C_HandleTypeDef *hi2c,tmp116_config_t *TMP116_Conf){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]

	TMP_BUS_HANDLER = hi2c;
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <TEMP116_init+0x38>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]

	TMP116_getUID(&uid);
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <TEMP116_init+0x3c>)
 8001cda:	f000 f815 	bl	8001d08 <TMP116_getUID>





	if((uid&0x0fff) == 0x0116){
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <TEMP116_init+0x3c>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8001cea:	d104      	bne.n	8001cf6 <TEMP116_init+0x2e>

		TMP116_set_Configuration(TMP116_Conf);
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f000 f859 	bl	8001da4 <TMP116_set_Configuration>

		return TMP116_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <TEMP116_init+0x30>

	}else{
		return TMP116_ERR;
 8001cf6:	2301      	movs	r3, #1
	}
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200006c0 	.word	0x200006c0
 8001d04:	200006c4 	.word	0x200006c4

08001d08 <TMP116_getUID>:
 * @brief Get the sensor unique id
 *
 * @param 	uint16_t*	- pointer to uid variable
 * @return 	temp_err
 */
temp_err TMP116_getUID(uint16_t *uid){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
	*uid = 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	801a      	strh	r2, [r3, #0]
	if(TMP_BUS_HANDLER){
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <TMP116_getUID+0x90>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d036      	beq.n	8001d8c <TMP116_getUID+0x84>
	      static uint8_t buf[2];
	      buf[0]=TMP116_ID_Register;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <TMP116_getUID+0x94>)
 8001d20:	220f      	movs	r2, #15
 8001d22:	701a      	strb	r2, [r3, #0]

	      if(HAL_I2C_Master_Transmit(TMP_BUS_HANDLER,TMP116_DeviceID,buf,1,100) != HAL_OK){
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <TMP116_getUID+0x90>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <TMP116_getUID+0x98>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <TMP116_getUID+0x94>)
 8001d36:	f002 fd3b 	bl	80047b0 <HAL_I2C_Master_Transmit>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <TMP116_getUID+0x3c>
	    	  return TMP116_TX_ERR;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e024      	b.n	8001d8e <TMP116_getUID+0x86>
	      }
	      buf[0] = 0;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <TMP116_getUID+0x94>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
	      HAL_Delay(20);
 8001d4a:	2014      	movs	r0, #20
 8001d4c:	f001 fe02 	bl	8003954 <HAL_Delay>
	      if(HAL_I2C_Master_Receive(TMP_BUS_HANDLER,TMP116_DeviceID,buf,2,100) != HAL_OK){
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <TMP116_getUID+0x90>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <TMP116_getUID+0x98>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2302      	movs	r3, #2
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <TMP116_getUID+0x94>)
 8001d62:	f002 fe19 	bl	8004998 <HAL_I2C_Master_Receive>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <TMP116_getUID+0x68>
	    	  return TMP116_RX_ERR;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e00e      	b.n	8001d8e <TMP116_getUID+0x86>
	      }

	      *uid = ((buf[0]<<8)|buf[1]);
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <TMP116_getUID+0x94>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <TMP116_getUID+0x94>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	801a      	strh	r2, [r3, #0]
	      return TMP116_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <TMP116_getUID+0x86>
	}else{
		return TMP116_INIT_ERR;
 8001d8c:	2304      	movs	r3, #4
	}
	return TMP116_OK;
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200006c0 	.word	0x200006c0
 8001d9c:	200006c8 	.word	0x200006c8
 8001da0:	200004b8 	.word	0x200004b8

08001da4 <TMP116_set_Configuration>:
   @Description   Set Configuration Register for Features of the TMP116
   @Parameter     tmp116_config_t*
   @Return value  temp_err
 */
temp_err TMP116_set_Configuration(tmp116_config_t *tempConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	6078      	str	r0, [r7, #4]
	if(TMP_BUS_HANDLER){
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <TMP116_set_Configuration+0x54>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <TMP116_set_Configuration+0x4a>
      static uint8_t buf[3];
      buf[0]=0x01;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <TMP116_set_Configuration+0x58>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
      buf[1]=tempConfig->byte.LSB;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	785a      	ldrb	r2, [r3, #1]
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <TMP116_set_Configuration+0x58>)
 8001dc0:	705a      	strb	r2, [r3, #1]
      buf[2]=tempConfig->byte.MSB;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <TMP116_set_Configuration+0x58>)
 8001dc8:	709a      	strb	r2, [r3, #2]

      if(HAL_I2C_Master_Transmit(TMP_BUS_HANDLER,TMP116_DeviceID,buf,3,100) != HAL_OK){
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <TMP116_set_Configuration+0x54>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <TMP116_set_Configuration+0x5c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2303      	movs	r3, #3
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <TMP116_set_Configuration+0x58>)
 8001ddc:	f002 fce8 	bl	80047b0 <HAL_I2C_Master_Transmit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <TMP116_set_Configuration+0x46>
    	  return TMP116_TX_ERR;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <TMP116_set_Configuration+0x4c>
      }

      return TMP116_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <TMP116_set_Configuration+0x4c>

	}else{
		return TMP116_INIT_ERR;
 8001dee:	2304      	movs	r3, #4
	}
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200006c0 	.word	0x200006c0
 8001dfc:	200006cc 	.word	0x200006cc
 8001e00:	200004b8 	.word	0x200004b8

08001e04 <TMP116_get_Temperature>:
 @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
 @Return value  Float
*/

temp_err TMP116_get_Temperature(float *tempVal)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	6078      	str	r0, [r7, #4]
	if(TMP_BUS_HANDLER){
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <TMP116_get_Temperature+0xa0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d042      	beq.n	8001e9a <TMP116_get_Temperature+0x96>
      static uint8_t buf[3];
      buf[0]=TMP116_TemperatureRegister;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <TMP116_get_Temperature+0xa4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

      if(HAL_I2C_Master_Transmit(TMP_BUS_HANDLER,TMP116_DeviceID,buf,1,100) != HAL_OK){
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <TMP116_get_Temperature+0xa0>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <TMP116_get_Temperature+0xa8>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b299      	uxth	r1, r3
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <TMP116_get_Temperature+0xa4>)
 8001e2c:	f002 fcc0 	bl	80047b0 <HAL_I2C_Master_Transmit>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <TMP116_get_Temperature+0x36>
    	  return TMP116_TX_ERR;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e030      	b.n	8001e9c <TMP116_get_Temperature+0x98>
      }
      HAL_Delay(20);
 8001e3a:	2014      	movs	r0, #20
 8001e3c:	f001 fd8a 	bl	8003954 <HAL_Delay>
      if(HAL_I2C_Master_Receive(TMP_BUS_HANDLER,TMP116_DeviceID,buf,2,100) != HAL_OK){
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <TMP116_get_Temperature+0xa0>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <TMP116_get_Temperature+0xa8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <TMP116_get_Temperature+0xa4>)
 8001e52:	f002 fda1 	bl	8004998 <HAL_I2C_Master_Receive>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <TMP116_get_Temperature+0x5c>
    	  return TMP116_RX_ERR;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e01d      	b.n	8001e9c <TMP116_get_Temperature+0x98>
      }
      HAL_Delay(20);
 8001e60:	2014      	movs	r0, #20
 8001e62:	f001 fd77 	bl	8003954 <HAL_Delay>

      *tempVal = ((((buf[0]<<8)|buf[1]))*0.0078125);
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <TMP116_get_Temperature+0xa4>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <TMP116_get_Temperature+0xa4>)
 8001e6e:	7852      	ldrb	r2, [r2, #1]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb5e 	bl	8000534 <__aeabi_i2d>
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e80:	f7fe fbc2 	bl	8000608 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fe94 	bl	8000bb8 <__aeabi_d2f>
 8001e90:	4602      	mov	r2, r0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]

      return TMP116_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <TMP116_get_Temperature+0x98>
	}else{
		return TMP116_INIT_ERR;
 8001e9a:	2304      	movs	r3, #4
	}
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006c0 	.word	0x200006c0
 8001ea8:	200006d0 	.word	0x200006d0
 8001eac:	200004b8 	.word	0x200004b8

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db12      	blt.n	8001f24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	490a      	ldr	r1, [pc, #40]	; (8001f30 <__NVIC_DisableIRQ+0x44>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	3320      	adds	r3, #32
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f18:	f3bf 8f4f 	dsb	sy
}
 8001f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1e:	f3bf 8f6f 	isb	sy
}
 8001f22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3a:	f001 fc97 	bl	800386c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(ADS131A0x_RST_GPIO_Port, ADS131A0x_RST_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f44:	48b7      	ldr	r0, [pc, #732]	; (8002224 <main+0x2f0>)
 8001f46:	f002 fb73 	bl	8004630 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4a:	f000 f98d 	bl	8002268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4e:	f000 fc51 	bl	80027f4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001f52:	f000 fa35 	bl	80023c0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001f56:	f000 fc1d 	bl	8002794 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001f5a:	f000 fbeb 	bl	8002734 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001f5e:	f000 f9f9 	bl	8002354 <MX_CAN1_Init>
  MX_SPI3_Init();
 8001f62:	f000 faab 	bl	80024bc <MX_SPI3_Init>
  MX_SPI1_Init();
 8001f66:	f000 fa6b 	bl	8002440 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001f6a:	f000 fae5 	bl	8002538 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001f6e:	f000 fb6d 	bl	800264c <MX_TIM16_Init>
  MX_TIM15_Init();
 8001f72:	f000 fb19 	bl	80025a8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001f76:	2017      	movs	r0, #23
 8001f78:	f7ff ffb8 	bl	8001eec <__NVIC_DisableIRQ>





	HAL_Delay(100);
 8001f7c:	2064      	movs	r0, #100	; 0x64
 8001f7e:	f001 fce9 	bl	8003954 <HAL_Delay>
	ST7735_Init();
 8001f82:	f7ff fd41 	bl	8001a08 <ST7735_Init>
	HAL_Delay(100);
 8001f86:	2064      	movs	r0, #100	; 0x64
 8001f88:	f001 fce4 	bl	8003954 <HAL_Delay>
	ST7735_FillScreen(ST7735_BLUE);
 8001f8c:	201f      	movs	r0, #31
 8001f8e:	f7ff fe89 	bl	8001ca4 <ST7735_FillScreen>
	HAL_Delay(100);
 8001f92:	2064      	movs	r0, #100	; 0x64
 8001f94:	f001 fcde 	bl	8003954 <HAL_Delay>




	ST7735_FillRectangle(0, 25, 160, 2, ST7735_WHITE);
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	22a0      	movs	r2, #160	; 0xa0
 8001fa2:	2119      	movs	r1, #25
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fe0b 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(0, 50, 160, 2, ST7735_WHITE);
 8001faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	22a0      	movs	r2, #160	; 0xa0
 8001fb4:	2132      	movs	r1, #50	; 0x32
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fe02 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(0, 75, 160, 2, ST7735_WHITE);
 8001fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	22a0      	movs	r2, #160	; 0xa0
 8001fc6:	214b      	movs	r1, #75	; 0x4b
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fdf9 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(0, 100, 160, 2, ST7735_WHITE);
 8001fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	22a0      	movs	r2, #160	; 0xa0
 8001fd8:	2164      	movs	r1, #100	; 0x64
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff fdf0 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(30, 0, 2, 100, ST7735_WHITE);
 8001fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2364      	movs	r3, #100	; 0x64
 8001fe8:	2202      	movs	r2, #2
 8001fea:	2100      	movs	r1, #0
 8001fec:	201e      	movs	r0, #30
 8001fee:	f7ff fde7 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(130, 0, 2, 100, ST7735_WHITE);
 8001ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2364      	movs	r3, #100	; 0x64
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2082      	movs	r0, #130	; 0x82
 8002000:	f7ff fdde 	bl	8001bc0 <ST7735_FillRectangle>
	ST7735_FillRectangle(75, 100, 2, 35, ST7735_WHITE);
 8002004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2323      	movs	r3, #35	; 0x23
 800200c:	2202      	movs	r2, #2
 800200e:	2164      	movs	r1, #100	; 0x64
 8002010:	204b      	movs	r0, #75	; 0x4b
 8002012:	f7ff fdd5 	bl	8001bc0 <ST7735_FillRectangle>

	ST7735_WriteString(5, 0 + 5, "V1", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8002016:	4b84      	ldr	r3, [pc, #528]	; (8002228 <main+0x2f4>)
 8002018:	221f      	movs	r2, #31
 800201a:	9202      	str	r2, [sp, #8]
 800201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002020:	9201      	str	r2, [sp, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	9200      	str	r2, [sp, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a80      	ldr	r2, [pc, #512]	; (800222c <main+0x2f8>)
 800202a:	2105      	movs	r1, #5
 800202c:	2005      	movs	r0, #5
 800202e:	f7ff fd7c 	bl	8001b2a <ST7735_WriteString>
	ST7735_WriteString(5, 25 + 5, "I1", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <main+0x2f4>)
 8002034:	221f      	movs	r2, #31
 8002036:	9202      	str	r2, [sp, #8]
 8002038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	9200      	str	r2, [sp, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <main+0x2fc>)
 8002046:	211e      	movs	r1, #30
 8002048:	2005      	movs	r0, #5
 800204a:	f7ff fd6e 	bl	8001b2a <ST7735_WriteString>
	ST7735_WriteString(5, 50 + 5, "V2", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <main+0x2f4>)
 8002050:	221f      	movs	r2, #31
 8002052:	9202      	str	r2, [sp, #8]
 8002054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002058:	9201      	str	r2, [sp, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a74      	ldr	r2, [pc, #464]	; (8002234 <main+0x300>)
 8002062:	2137      	movs	r1, #55	; 0x37
 8002064:	2005      	movs	r0, #5
 8002066:	f7ff fd60 	bl	8001b2a <ST7735_WriteString>
	ST7735_WriteString(5, 75 + 5, "I2", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <main+0x2f4>)
 800206c:	221f      	movs	r2, #31
 800206e:	9202      	str	r2, [sp, #8]
 8002070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	9200      	str	r2, [sp, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <main+0x304>)
 800207e:	2150      	movs	r1, #80	; 0x50
 8002080:	2005      	movs	r0, #5
 8002082:	f7ff fd52 	bl	8001b2a <ST7735_WriteString>


	ST7735_WriteString(135, 0 + 5, "mV", Font_11x18, ST7735_WHITE,
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <main+0x2f4>)
 8002088:	221f      	movs	r2, #31
 800208a:	9202      	str	r2, [sp, #8]
 800208c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002090:	9201      	str	r2, [sp, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	9200      	str	r2, [sp, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	; (800223c <main+0x308>)
 800209a:	2105      	movs	r1, #5
 800209c:	2087      	movs	r0, #135	; 0x87
 800209e:	f7ff fd44 	bl	8001b2a <ST7735_WriteString>
			ST7735_BLUE);
	ST7735_WriteString(135, 25 + 5, "mA", Font_11x18, ST7735_WHITE,
 80020a2:	4b61      	ldr	r3, [pc, #388]	; (8002228 <main+0x2f4>)
 80020a4:	221f      	movs	r2, #31
 80020a6:	9202      	str	r2, [sp, #8]
 80020a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a62      	ldr	r2, [pc, #392]	; (8002240 <main+0x30c>)
 80020b6:	211e      	movs	r1, #30
 80020b8:	2087      	movs	r0, #135	; 0x87
 80020ba:	f7ff fd36 	bl	8001b2a <ST7735_WriteString>
			ST7735_BLUE);
	ST7735_WriteString(135, 50 + 5, "mV", Font_11x18, ST7735_WHITE,
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <main+0x2f4>)
 80020c0:	221f      	movs	r2, #31
 80020c2:	9202      	str	r2, [sp, #8]
 80020c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c8:	9201      	str	r2, [sp, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5a      	ldr	r2, [pc, #360]	; (800223c <main+0x308>)
 80020d2:	2137      	movs	r1, #55	; 0x37
 80020d4:	2087      	movs	r0, #135	; 0x87
 80020d6:	f7ff fd28 	bl	8001b2a <ST7735_WriteString>
			ST7735_BLUE);
	ST7735_WriteString(135, 75 + 5, "mA", Font_11x18, ST7735_WHITE,
 80020da:	4b53      	ldr	r3, [pc, #332]	; (8002228 <main+0x2f4>)
 80020dc:	221f      	movs	r2, #31
 80020de:	9202      	str	r2, [sp, #8]
 80020e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e4:	9201      	str	r2, [sp, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a54      	ldr	r2, [pc, #336]	; (8002240 <main+0x30c>)
 80020ee:	2150      	movs	r1, #80	; 0x50
 80020f0:	2087      	movs	r0, #135	; 0x87
 80020f2:	f7ff fd1a 	bl	8001b2a <ST7735_WriteString>
			ST7735_BLUE);



	tmp116_config_t config;
	config.REG = 0x0000;
 80020f6:	2300      	movs	r3, #0
 80020f8:	80bb      	strh	r3, [r7, #4]
	config.bits.AVG = 2;
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f362 03c4 	bfi	r3, r2, #3, #2
 8002102:	717b      	strb	r3, [r7, #5]
	TEMP116_init(&hi2c2, &config);
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	484e      	ldr	r0, [pc, #312]	; (8002244 <main+0x310>)
 800210a:	f7ff fddd 	bl	8001cc8 <TEMP116_init>

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800210e:	2017      	movs	r0, #23
 8002110:	f7ff fece 	bl	8001eb0 <__NVIC_EnableIRQ>
	ADS131A0xReset();
 8002114:	f7fe ff6c 	bl	8000ff0 <ADS131A0xReset>
	ADS131A0xInit();
 8002118:	f7ff f858 	bl	80011cc <ADS131A0xInit>
	HAL_TIM_Base_Start_IT(&htim15);
 800211c:	484a      	ldr	r0, [pc, #296]	; (8002248 <main+0x314>)
 800211e:	f005 f851 	bl	80071c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8002122:	484a      	ldr	r0, [pc, #296]	; (800224c <main+0x318>)
 8002124:	f005 f84e 	bl	80071c4 <HAL_TIM_Base_Start_IT>
	ADS131A0xCalibrate();
 8002128:	f7fe ffe4 	bl	80010f4 <ADS131A0xCalibrate>


// *********************

	sFilterConfig.FilterBank = 0;
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <main+0x31c>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <main+0x31c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <main+0x31c>)
 800213a:	2201      	movs	r2, #1
 800213c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <main+0x31c>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002144:	4b42      	ldr	r3, [pc, #264]	; (8002250 <main+0x31c>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <main+0x31c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <main+0x31c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002156:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <main+0x31c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <main+0x31c>)
 800215e:	2201      	movs	r2, #1
 8002160:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <main+0x31c>)
 8002164:	220e      	movs	r2, #14
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002168:	4939      	ldr	r1, [pc, #228]	; (8002250 <main+0x31c>)
 800216a:	483a      	ldr	r0, [pc, #232]	; (8002254 <main+0x320>)
 800216c:	f001 fd11 	bl	8003b92 <HAL_CAN_ConfigFilter>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <main+0x246>
		Error_Handler();
 8002176:	f000 fbc3 	bl	8002900 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 800217a:	2103      	movs	r1, #3
 800217c:	4835      	ldr	r0, [pc, #212]	; (8002254 <main+0x320>)
 800217e:	f001 ff26 	bl	8003fce <HAL_CAN_ActivateNotification>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <main+0x258>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {/* Notification Error */
		Error_Handler();
 8002188:	f000 fbba 	bl	8002900 <Error_Handler>
	}

	TxHeader.StdId = 0x000;
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <main+0x324>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <main+0x324>)
 8002194:	2201      	movs	r2, #1
 8002196:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <main+0x324>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <main+0x324>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <main+0x324>)
 80021a6:	2208      	movs	r2, #8
 80021a8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <main+0x324>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	751a      	strb	r2, [r3, #20]
	TxData[0] = 0;
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <main+0x328>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0;
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <main+0x328>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	705a      	strb	r2, [r3, #1]

	HAL_CAN_Start(&hcan1);
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <main+0x320>)
 80021be:	f001 fdb2 	bl	8003d26 <HAL_CAN_Start>

	HAL_GPIO_WritePin(USART3_DIR_GPIO_Port, USART3_DIR_Pin, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2104      	movs	r1, #4
 80021c6:	4817      	ldr	r0, [pc, #92]	; (8002224 <main+0x2f0>)
 80021c8:	f002 fa32 	bl	8004630 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TMP116_get_Temperature(&temperature);
 80021cc:	4824      	ldr	r0, [pc, #144]	; (8002260 <main+0x32c>)
 80021ce:	f7ff fe19 	bl	8001e04 <TMP116_get_Temperature>
		if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0) {
 80021d2:	4820      	ldr	r0, [pc, #128]	; (8002254 <main+0x320>)
 80021d4:	f001 fec6 	bl	8003f64 <HAL_CAN_GetTxMailboxesFreeLevel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01d      	beq.n	800221a <main+0x2e6>
			TxData[0] = 0x55;
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <main+0x328>)
 80021e0:	2255      	movs	r2, #85	; 0x55
 80021e2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x55;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <main+0x328>)
 80021e6:	2255      	movs	r2, #85	; 0x55
 80021e8:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x55;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <main+0x328>)
 80021ec:	2255      	movs	r2, #85	; 0x55
 80021ee:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x55;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <main+0x328>)
 80021f2:	2255      	movs	r2, #85	; 0x55
 80021f4:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x55;
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <main+0x328>)
 80021f8:	2255      	movs	r2, #85	; 0x55
 80021fa:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x55;
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <main+0x328>)
 80021fe:	2255      	movs	r2, #85	; 0x55
 8002200:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x55;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <main+0x328>)
 8002204:	2255      	movs	r2, #85	; 0x55
 8002206:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x55;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <main+0x328>)
 800220a:	2255      	movs	r2, #85	; 0x55
 800220c:	71da      	strb	r2, [r3, #7]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <main+0x330>)
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <main+0x328>)
 8002212:	4911      	ldr	r1, [pc, #68]	; (8002258 <main+0x324>)
 8002214:	480f      	ldr	r0, [pc, #60]	; (8002254 <main+0x320>)
 8002216:	f001 fdca 	bl	8003dae <HAL_CAN_AddTxMessage>
		}
		//HAL_UART_Transmit(&huart3, TxData, 8, 10);

	//	eMBPoll();

		HAL_Delay(100);
 800221a:	2064      	movs	r0, #100	; 0x64
 800221c:	f001 fb9a 	bl	8003954 <HAL_Delay>
	  TMP116_get_Temperature(&temperature);
 8002220:	e7d4      	b.n	80021cc <main+0x298>
 8002222:	bf00      	nop
 8002224:	48000400 	.word	0x48000400
 8002228:	200004b0 	.word	0x200004b0
 800222c:	0800bc10 	.word	0x0800bc10
 8002230:	0800bc14 	.word	0x0800bc14
 8002234:	0800bc18 	.word	0x0800bc18
 8002238:	0800bc1c 	.word	0x0800bc1c
 800223c:	0800bc20 	.word	0x0800bc20
 8002240:	0800bc24 	.word	0x0800bc24
 8002244:	20000ec8 	.word	0x20000ec8
 8002248:	20000e7c 	.word	0x20000e7c
 800224c:	20001024 	.word	0x20001024
 8002250:	20000dd0 	.word	0x20000dd0
 8002254:	200010e0 	.word	0x200010e0
 8002258:	20001108 	.word	0x20001108
 800225c:	2000101c 	.word	0x2000101c
 8002260:	20000f14 	.word	0x20000f14
 8002264:	20001070 	.word	0x20001070

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b0      	sub	sp, #192	; 0xc0
 800226c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002272:	2244      	movs	r2, #68	; 0x44
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f006 fe2e 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2264      	movs	r2, #100	; 0x64
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f006 fe20 	bl	8008ed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002298:	2310      	movs	r3, #16
 800229a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800229c:	2301      	movs	r3, #1
 800229e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022c0:	230a      	movs	r3, #10
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022c6:	2307      	movs	r3, #7
 80022c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 ff2d 	bl	800513c <HAL_RCC_OscConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022e8:	f000 fb0a 	bl	8002900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ec:	230f      	movs	r3, #15
 80022ee:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f0:	2303      	movs	r3, #3
 80022f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002300:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002304:	2104      	movs	r1, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fb38 	bl	800597c <HAL_RCC_ClockConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002312:	f000 faf5 	bl	8002900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002316:	2385      	movs	r3, #133	; 0x85
 8002318:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fd2d 	bl	8005d88 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002334:	f000 fae4 	bl	8002900 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002338:	f44f 7000 	mov.w	r0, #512	; 0x200
 800233c:	f002 fea8 	bl	8005090 <HAL_PWREx_ControlVoltageScaling>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002346:	f000 fadb 	bl	8002900 <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	37c0      	adds	r7, #192	; 0xc0
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_CAN1_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <MX_CAN1_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002360:	2210      	movs	r2, #16
 8002362:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_CAN1_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002372:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002376:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_CAN1_Init+0x64>)
 800237a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800237e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_CAN1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_CAN1_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_CAN1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_CAN1_Init+0x64>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_CAN1_Init+0x64>)
 80023a6:	f001 faf9 	bl	800399c <HAL_CAN_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80023b0:	f000 faa6 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200010e0 	.word	0x200010e0
 80023bc:	40006400 	.word	0x40006400

080023c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <MX_I2C2_Init+0x74>)
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <MX_I2C2_Init+0x78>)
 80023c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <MX_I2C2_Init+0x74>)
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <MX_I2C2_Init+0x7c>)
 80023ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <MX_I2C2_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <MX_I2C2_Init+0x74>)
 80023d8:	2201      	movs	r2, #1
 80023da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <MX_I2C2_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <MX_I2C2_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <MX_I2C2_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <MX_I2C2_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <MX_I2C2_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <MX_I2C2_Init+0x74>)
 80023fc:	f002 f948 	bl	8004690 <HAL_I2C_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002406:	f000 fa7b 	bl	8002900 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800240a:	2100      	movs	r1, #0
 800240c:	4809      	ldr	r0, [pc, #36]	; (8002434 <MX_I2C2_Init+0x74>)
 800240e:	f002 fd99 	bl	8004f44 <HAL_I2CEx_ConfigAnalogFilter>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002418:	f000 fa72 	bl	8002900 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800241c:	2100      	movs	r1, #0
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <MX_I2C2_Init+0x74>)
 8002420:	f002 fddb 	bl	8004fda <HAL_I2CEx_ConfigDigitalFilter>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800242a:	f000 fa69 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000ec8 	.word	0x20000ec8
 8002438:	40005800 	.word	0x40005800
 800243c:	00702991 	.word	0x00702991

08002440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <MX_SPI1_Init+0x78>)
 8002448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_SPI1_Init+0x74>)
 800244c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002458:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_SPI1_Init+0x74>)
 800245c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_SPI1_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002478:	2210      	movs	r2, #16
 800247a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <MX_SPI1_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_SPI1_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002490:	2207      	movs	r2, #7
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SPI1_Init+0x74>)
 800249c:	2208      	movs	r2, #8
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_SPI1_Init+0x74>)
 80024a2:	f003 ff9d 	bl	80063e0 <HAL_SPI_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80024ac:	f000 fa28 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20001074 	.word	0x20001074
 80024b8:	40013000 	.word	0x40013000

080024bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_SPI3_Init+0x74>)
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <MX_SPI3_Init+0x78>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_SPI3_Init+0x74>)
 80024c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_SPI3_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_SPI3_Init+0x74>)
 80024d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_SPI3_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_SPI3_Init+0x74>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_SPI3_Init+0x74>)
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_SPI3_Init+0x74>)
 80024f2:	2218      	movs	r2, #24
 80024f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_SPI3_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_SPI3_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_SPI3_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_SPI3_Init+0x74>)
 800250a:	2207      	movs	r2, #7
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <MX_SPI3_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_SPI3_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_SPI3_Init+0x74>)
 800251c:	f003 ff60 	bl	80063e0 <HAL_SPI_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002526:	f000 f9eb 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000f20 	.word	0x20000f20
 8002534:	40003c00 	.word	0x40003c00

08002538 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_TIM6_Init+0x68>)
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <MX_TIM6_Init+0x6c>)
 800254c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <MX_TIM6_Init+0x68>)
 8002550:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002554:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <MX_TIM6_Init+0x68>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_TIM6_Init+0x68>)
 800255e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002562:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_TIM6_Init+0x68>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_TIM6_Init+0x68>)
 800256c:	f004 fdd2 	bl	8007114 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002576:	f000 f9c3 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <MX_TIM6_Init+0x68>)
 8002588:	f005 fcd8 	bl	8007f3c <HAL_TIMEx_MasterConfigSynchronization>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002592:	f000 f9b5 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20001024 	.word	0x20001024
 80025a4:	40001000 	.word	0x40001000

080025a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <MX_TIM15_Init+0xa0>)
 80025ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 199;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025ce:	22c7      	movs	r2, #199	; 0xc7
 80025d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 39999;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025da:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80025de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80025f2:	4814      	ldr	r0, [pc, #80]	; (8002644 <MX_TIM15_Init+0x9c>)
 80025f4:	f004 fd8e 	bl	8007114 <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80025fe:	f000 f97f 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <MX_TIM15_Init+0x9c>)
 8002610:	f005 f82a 	bl	8007668 <HAL_TIM_ConfigClockSource>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800261a:	f000 f971 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4806      	ldr	r0, [pc, #24]	; (8002644 <MX_TIM15_Init+0x9c>)
 800262c:	f005 fc86 	bl	8007f3c <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002636:	f000 f963 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000e7c 	.word	0x20000e7c
 8002648:	40014000 	.word	0x40014000

0800264c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b092      	sub	sp, #72	; 0x48
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002666:	463b      	mov	r3, r7
 8002668:	222c      	movs	r2, #44	; 0x2c
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f006 fc33 	bl	8008ed8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <MX_TIM16_Init+0xe0>)
 8002674:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <MX_TIM16_Init+0xe4>)
 8002676:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8002678:	4b2c      	ldr	r3, [pc, #176]	; (800272c <MX_TIM16_Init+0xe0>)
 800267a:	224f      	movs	r2, #79	; 0x4f
 800267c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b2b      	ldr	r3, [pc, #172]	; (800272c <MX_TIM16_Init+0xe0>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <MX_TIM16_Init+0xe0>)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <MX_TIM16_Init+0xe0>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <MX_TIM16_Init+0xe0>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <MX_TIM16_Init+0xe0>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800269e:	4823      	ldr	r0, [pc, #140]	; (800272c <MX_TIM16_Init+0xe0>)
 80026a0:	f004 fd38 	bl	8007114 <HAL_TIM_Base_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80026aa:	f000 f929 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80026ae:	481f      	ldr	r0, [pc, #124]	; (800272c <MX_TIM16_Init+0xe0>)
 80026b0:	f004 fde4 	bl	800727c <HAL_TIM_OC_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80026ba:	f000 f921 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <MX_TIM16_Init+0xe0>)
 80026e4:	f004 ff4a 	bl	800757c <HAL_TIM_OC_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80026ee:	f000 f907 	bl	8002900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002710:	463b      	mov	r3, r7
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_TIM16_Init+0xe0>)
 8002716:	f005 fc7f 	bl	8008018 <HAL_TIMEx_ConfigBreakDeadTime>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002720:	f000 f8ee 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	3748      	adds	r7, #72	; 0x48
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20001164 	.word	0x20001164
 8002730:	40014400 	.word	0x40014400

08002734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <MX_USART1_UART_Init+0x58>)
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <MX_USART1_UART_Init+0x5c>)
 800273c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_USART1_UART_Init+0x58>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_USART1_UART_Init+0x58>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <MX_USART1_UART_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_USART1_UART_Init+0x58>)
 8002778:	f005 fce4 	bl	8008144 <HAL_UART_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002782:	f000 f8bd 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000f98 	.word	0x20000f98
 8002790:	40013800 	.word	0x40013800

08002794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_USART3_UART_Init+0x58>)
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <MX_USART3_UART_Init+0x5c>)
 800279c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027ba:	220c      	movs	r2, #12
 80027bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART3_UART_Init+0x58>)
 80027d8:	f005 fcb4 	bl	8008144 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027e2:	f000 f88d 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000df8 	.word	0x20000df8
 80027f0:	40004800 	.word	0x40004800

080027f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <MX_GPIO_Init+0x100>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <MX_GPIO_Init+0x100>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f248 0140 	movw	r1, #32832	; 0x8040
 8002840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002844:	f001 fef4 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|SPI1_DC_Pin|USART3_DIR_Pin, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	2107      	movs	r1, #7
 800284c:	482a      	ldr	r0, [pc, #168]	; (80028f8 <MX_GPIO_Init+0x104>)
 800284e:	f001 feef 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RST_GPIO_Port, ESP8266_RST_Pin, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f001 fee8 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_RST_GPIO_Port, SPI3_RST_Pin, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002866:	4824      	ldr	r0, [pc, #144]	; (80028f8 <MX_GPIO_Init+0x104>)
 8002868:	f001 fee2 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RST_Pin ESP8266_RST_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|ESP8266_RST_Pin|SPI3_CS_Pin;
 800286c:	f248 1340 	movw	r3, #33088	; 0x8140
 8002870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002872:	2301      	movs	r3, #1
 8002874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f001 fd58 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin SPI1_DC_Pin USART3_DIR_Pin SPI3_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI1_DC_Pin|USART3_DIR_Pin|SPI3_RST_Pin;
 800288c:	f240 2307 	movw	r3, #519	; 0x207
 8002890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	2301      	movs	r3, #1
 8002894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4619      	mov	r1, r3
 80028a4:	4814      	ldr	r0, [pc, #80]	; (80028f8 <MX_GPIO_Init+0x104>)
 80028a6:	f001 fd49 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_DRDY_Pin */
  GPIO_InitStruct.Pin = SPI3_DRDY_Pin;
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_GPIO_Init+0x108>)
 80028b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI3_DRDY_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4619      	mov	r1, r3
 80028bc:	480e      	ldr	r0, [pc, #56]	; (80028f8 <MX_GPIO_Init+0x104>)
 80028be:	f001 fd3d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_DONE_Pin */
  GPIO_InitStruct.Pin = SPI3_DONE_Pin;
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI3_DONE_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	4808      	ldr	r0, [pc, #32]	; (80028f8 <MX_GPIO_Init+0x104>)
 80028d8:	f001 fd30 	bl	800433c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	2017      	movs	r0, #23
 80028e2:	f001 fc76 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028e6:	2017      	movs	r0, #23
 80028e8:	f001 fc8f 	bl	800420a <HAL_NVIC_EnableIRQ>

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	48000400 	.word	0x48000400
 80028fc:	10210000 	.word	0x10210000

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_MspInit+0x44>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_MspInit+0x44>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6613      	str	r3, [r2, #96]	; 0x60
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_MspInit+0x44>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_MspInit+0x44>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_MspInit+0x44>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_MspInit+0x44>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_CAN_MspInit+0x80>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d129      	bne.n	80029ce <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_CAN_MspInit+0x84>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_CAN_MspInit+0x84>)
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_CAN_MspInit+0x84>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_CAN_MspInit+0x84>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_CAN_MspInit+0x84>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_CAN_MspInit+0x84>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029bc:	2309      	movs	r3, #9
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ca:	f001 fcb7 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40006400 	.word	0x40006400
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_I2C_MspInit+0x7c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d128      	bne.n	8002a54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a1a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	480b      	ldr	r0, [pc, #44]	; (8002a64 <HAL_I2C_MspInit+0x84>)
 8002a38:	f001 fc80 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40005800 	.word	0x40005800
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400

08002a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a36      	ldr	r2, [pc, #216]	; (8002b60 <HAL_SPI_MspInit+0xf8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d131      	bne.n	8002aee <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	4a35      	ldr	r2, [pc, #212]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a94:	6613      	str	r3, [r2, #96]	; 0x60
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aca:	2305      	movs	r3, #5
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad8:	f001 fc30 	bl	800433c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2023      	movs	r0, #35	; 0x23
 8002ae2:	f001 fb76 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ae6:	2023      	movs	r0, #35	; 0x23
 8002ae8:	f001 fb8f 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002aec:	e034      	b.n	8002b58 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_SPI_MspInit+0x100>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d12f      	bne.n	8002b58 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b02:	6593      	str	r3, [r2, #88]	; 0x58
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_SPI_MspInit+0xfc>)
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b28:	2338      	movs	r3, #56	; 0x38
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b38:	2306      	movs	r3, #6
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	480a      	ldr	r0, [pc, #40]	; (8002b6c <HAL_SPI_MspInit+0x104>)
 8002b44:	f001 fbfa 	bl	800433c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2033      	movs	r0, #51	; 0x33
 8002b4e:	f001 fb40 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002b52:	2033      	movs	r0, #51	; 0x33
 8002b54:	f001 fb59 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3730      	adds	r7, #48	; 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013000 	.word	0x40013000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40003c00 	.word	0x40003c00
 8002b6c:	48000400 	.word	0x48000400

08002b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_TIM_Base_MspInit+0x9c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d114      	bne.n	8002bac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002b88:	f043 0310 	orr.w	r3, r3, #16
 8002b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	2036      	movs	r0, #54	; 0x36
 8002ba0:	f001 fb17 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ba4:	2036      	movs	r0, #54	; 0x36
 8002ba6:	f001 fb30 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002baa:	e02a      	b.n	8002c02 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_TIM_Base_MspInit+0xa4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d114      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	2018      	movs	r0, #24
 8002bd4:	f001 fafd 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002bd8:	2018      	movs	r0, #24
 8002bda:	f001 fb16 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8002bde:	e010      	b.n	8002c02 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_TIM_Base_MspInit+0xa8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10b      	bne.n	8002c02 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_TIM_Base_MspInit+0xa0>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40001000 	.word	0x40001000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40014400 	.word	0x40014400

08002c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <HAL_UART_MspInit+0xec>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12a      	bne.n	8002c94 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c48:	6613      	str	r3, [r2, #96]	; 0x60
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c80:	2307      	movs	r3, #7
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c84:	f107 031c 	add.w	r3, r7, #28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8e:	f001 fb55 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c92:	e035      	b.n	8002d00 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <HAL_UART_MspInit+0xf4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d130      	bne.n	8002d00 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_UART_MspInit+0xf0>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480a      	ldr	r0, [pc, #40]	; (8002d14 <HAL_UART_MspInit+0xf8>)
 8002cec:	f001 fb26 	bl	800433c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	2027      	movs	r0, #39	; 0x27
 8002cf6:	f001 fa6c 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cfa:	2027      	movs	r0, #39	; 0x27
 8002cfc:	f001 fa85 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8002d00:	bf00      	nop
 8002d02:	3730      	adds	r7, #48	; 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40004800 	.word	0x40004800
 8002d14:	48000400 	.word	0x48000400

08002d18 <__NVIC_EnableIRQ>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_DisableIRQ>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db12      	blt.n	8002d8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	490a      	ldr	r1, [pc, #40]	; (8002d98 <__NVIC_DisableIRQ+0x44>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d80:	f3bf 8f4f 	dsb	sy
}
 8002d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d86:	f3bf 8f6f 	isb	sy
}
 8002d8a:	bf00      	nop
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002da0:	f3bf 8f4f 	dsb	sy
}
 8002da4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <__NVIC_SystemReset+0x24>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <__NVIC_SystemReset+0x24>)
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_SystemReset+0x28>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002db6:	f3bf 8f4f 	dsb	sy
}
 8002dba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <__NVIC_SystemReset+0x20>
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	05fa0004 	.word	0x05fa0004

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 fd7a 	bl	8003914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e28:	2040      	movs	r0, #64	; 0x40
 8002e2a:	f001 fc19 	bl	8004660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002e3a:	f004 fa80 	bl	800733e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000e7c 	.word	0x20000e7c

08002e48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <SPI1_IRQHandler+0x10>)
 8002e4e:	f003 feeb 	bl	8006c28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20001074 	.word	0x20001074

08002e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <USART3_IRQHandler+0x10>)
 8002e62:	f005 f9bd 	bl	80081e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000df8 	.word	0x20000df8

08002e70 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <SPI3_IRQHandler+0x10>)
 8002e76:	f003 fed7 	bl	8006c28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000f20 	.word	0x20000f20

08002e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <TIM6_DAC_IRQHandler+0x10>)
 8002e8a:	f004 fa58 	bl	800733e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001024 	.word	0x20001024

08002e98 <HAL_GPIO_EXTI_Callback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if(hspi -> Instance == ADS131A0x_SPI_PORT.Instance){
		// Nothing to do here
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b096      	sub	sp, #88	; 0x58
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	if(GPIO_Pin == ADS131A0x_DRDY_Pin) {
 8002ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d114      	bne.n	8002ed6 <HAL_GPIO_EXTI_Callback+0x3e>
		ADS131A0x_Ready_flag = 1;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x48>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]

		ADS131A0xSetCS(0);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fe f8b4 	bl	8001020 <ADS131A0xSetCS>
		HAL_SPI_TransmitReceive(&ADS131A0x_SPI_PORT, emptyTxBuffer, ADS131A0x_DataBuf, ADS131A0x_WORD_SIZE*5, 1);
 8002eb8:	2301      	movs	r3, #1
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2314      	movs	r3, #20
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002ec0:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002ec2:	480a      	ldr	r0, [pc, #40]	; (8002eec <HAL_GPIO_EXTI_Callback+0x54>)
 8002ec4:	f003 fc9d 	bl	8006802 <HAL_SPI_TransmitReceive>
		ADS131A0xSetCS(1);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7fe f8a9 	bl	8001020 <ADS131A0xSetCS>

		ADS131A0xGetChannels();
 8002ece:	463b      	mov	r3, r7
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fa27 	bl	8001324 <ADS131A0xGetChannels>


	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3750      	adds	r7, #80	; 0x50
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000870 	.word	0x20000870
 8002ee4:	20000d74 	.word	0x20000d74
 8002ee8:	2000080c 	.word	0x2000080c
 8002eec:	20000f20 	.word	0x20000f20

08002ef0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4aa3      	ldr	r2, [pc, #652]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	f040 8248 	bne.w	8003392 <HAL_TIM_PeriodElapsedCallback+0x4a2>
	{

		NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002f02:	2017      	movs	r0, #23
 8002f04:	f7ff ff26 	bl	8002d54 <__NVIC_DisableIRQ>
		  if (fabs(measf.Ch4) > 1.0) {
 8002f08:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f0e:	eef0 7ae7 	vabs.f32	s15, s15
 8002f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dd19      	ble.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x64>
				sprintf(test, "%.2f", measf.Ch4);
 8002f20:	4b9a      	ldr	r3, [pc, #616]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb17 	bl	8000558 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4998      	ldr	r1, [pc, #608]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f30:	4898      	ldr	r0, [pc, #608]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002f32:	f006 fc43 	bl	80097bc <siprintf>
				ST7735_WriteString(135, 0 + 5, " V", Font_11x18, ST7735_WHITE,
 8002f36:	4b98      	ldr	r3, [pc, #608]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f38:	221f      	movs	r2, #31
 8002f3a:	9202      	str	r2, [sp, #8]
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	9201      	str	r2, [sp, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a94      	ldr	r2, [pc, #592]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	2087      	movs	r0, #135	; 0x87
 8002f4e:	f7fe fdec 	bl	8001b2a <ST7735_WriteString>
 8002f52:	e029      	b.n	8002fa8 <HAL_TIM_PeriodElapsedCallback+0xb8>
						ST7735_BLUE);
			} else if (fabs(measf.Ch4) <= 1.0) {
 8002f54:	4b8d      	ldr	r3, [pc, #564]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8002f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d81d      	bhi.n	8002fa8 <HAL_TIM_PeriodElapsedCallback+0xb8>
				sprintf(test, "%.2f", measf.Ch4 * 1000.0);
 8002f6c:	4b87      	ldr	r3, [pc, #540]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd faf1 	bl	8000558 <__aeabi_f2d>
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002f7c:	f7fd fb44 	bl	8000608 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4982      	ldr	r1, [pc, #520]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002f86:	4883      	ldr	r0, [pc, #524]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002f88:	f006 fc18 	bl	80097bc <siprintf>
				ST7735_WriteString(135, 0 + 5, "mV", Font_11x18, ST7735_WHITE,
 8002f8c:	4b82      	ldr	r3, [pc, #520]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002f8e:	221f      	movs	r2, #31
 8002f90:	9202      	str	r2, [sp, #8]
 8002f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f96:	9201      	str	r2, [sp, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	9200      	str	r2, [sp, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a81      	ldr	r2, [pc, #516]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	2087      	movs	r0, #135	; 0x87
 8002fa4:	f7fe fdc1 	bl	8001b2a <ST7735_WriteString>
						ST7735_BLUE);
			}


			ST7735_WriteString(35, 0 + 5, test, Font_11x18, ST7735_WHITE,
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002faa:	221f      	movs	r2, #31
 8002fac:	9202      	str	r2, [sp, #8]
 8002fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb2:	9201      	str	r2, [sp, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	9200      	str	r2, [sp, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a76      	ldr	r2, [pc, #472]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	2023      	movs	r0, #35	; 0x23
 8002fc0:	f7fe fdb3 	bl	8001b2a <ST7735_WriteString>
					ST7735_BLUE);

			  if (fabs(measf.Ch3) > 1.0) {
 8002fc4:	4b71      	ldr	r3, [pc, #452]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fca:	eef0 7ae7 	vabs.f32	s15, s15
 8002fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	dd19      	ble.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x120>
					sprintf(test, "%.2f", measf.Ch3);
 8002fdc:	4b6b      	ldr	r3, [pc, #428]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fab9 	bl	8000558 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4969      	ldr	r1, [pc, #420]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002fec:	4869      	ldr	r0, [pc, #420]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002fee:	f006 fbe5 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 25 + 5, " A", Font_11x18, ST7735_WHITE,
 8002ff2:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	9202      	str	r2, [sp, #8]
 8002ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003006:	211e      	movs	r1, #30
 8003008:	2087      	movs	r0, #135	; 0x87
 800300a:	f7fe fd8e 	bl	8001b2a <ST7735_WriteString>
 800300e:	e029      	b.n	8003064 <HAL_TIM_PeriodElapsedCallback+0x174>
							ST7735_BLUE);
				} else if (fabs(measf.Ch3) <= 1.0) {
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003012:	edd3 7a02 	vldr	s15, [r3, #8]
 8003016:	eef0 7ae7 	vabs.f32	s15, s15
 800301a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d81d      	bhi.n	8003064 <HAL_TIM_PeriodElapsedCallback+0x174>
					sprintf(test, "%.2f", measf.Ch3 * 1000.0);
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa93 	bl	8000558 <__aeabi_f2d>
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003038:	f7fd fae6 	bl	8000608 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4953      	ldr	r1, [pc, #332]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003042:	4854      	ldr	r0, [pc, #336]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003044:	f006 fbba 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 25 + 5, "mA", Font_11x18, ST7735_WHITE,
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800304a:	221f      	movs	r2, #31
 800304c:	9202      	str	r2, [sp, #8]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	9201      	str	r2, [sp, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	9200      	str	r2, [sp, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a54      	ldr	r2, [pc, #336]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800305c:	211e      	movs	r1, #30
 800305e:	2087      	movs	r0, #135	; 0x87
 8003060:	f7fe fd63 	bl	8001b2a <ST7735_WriteString>
							ST7735_BLUE);
				}


			ST7735_WriteString(35, 25 + 5, test, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8003064:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003066:	221f      	movs	r2, #31
 8003068:	9202      	str	r2, [sp, #8]
 800306a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306e:	9201      	str	r2, [sp, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	9200      	str	r2, [sp, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a47      	ldr	r2, [pc, #284]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003078:	211e      	movs	r1, #30
 800307a:	2023      	movs	r0, #35	; 0x23
 800307c:	f7fe fd55 	bl	8001b2a <ST7735_WriteString>



			  if (fabs(measf.Ch2) > 1.0) {
 8003080:	4b42      	ldr	r3, [pc, #264]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003082:	edd3 7a01 	vldr	s15, [r3, #4]
 8003086:	eef0 7ae7 	vabs.f32	s15, s15
 800308a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800308e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	dd19      	ble.n	80030cc <HAL_TIM_PeriodElapsedCallback+0x1dc>
					sprintf(test, "%.2f  ", measf.Ch2);
 8003098:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fa5b 	bl	8000558 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4942      	ldr	r1, [pc, #264]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80030a8:	483a      	ldr	r0, [pc, #232]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80030aa:	f006 fb87 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 50 + 5, " V", Font_11x18, ST7735_WHITE,
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80030b0:	221f      	movs	r2, #31
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b8:	9201      	str	r2, [sp, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a36      	ldr	r2, [pc, #216]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80030c2:	2137      	movs	r1, #55	; 0x37
 80030c4:	2087      	movs	r0, #135	; 0x87
 80030c6:	f7fe fd30 	bl	8001b2a <ST7735_WriteString>
 80030ca:	e029      	b.n	8003120 <HAL_TIM_PeriodElapsedCallback+0x230>
							ST7735_BLUE);
				} else if (fabs(measf.Ch2) <= 1.0) {
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80030ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80030d2:	eef0 7ae7 	vabs.f32	s15, s15
 80030d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	d81d      	bhi.n	8003120 <HAL_TIM_PeriodElapsedCallback+0x230>
					sprintf(test, "%.2f", measf.Ch2 * 1000.0);
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa35 	bl	8000558 <__aeabi_f2d>
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80030f4:	f7fd fa88 	bl	8000608 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4924      	ldr	r1, [pc, #144]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80030fe:	4825      	ldr	r0, [pc, #148]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003100:	f006 fb5c 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 50 + 5, "mV", Font_11x18, ST7735_WHITE,
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003106:	221f      	movs	r2, #31
 8003108:	9202      	str	r2, [sp, #8]
 800310a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800310e:	9201      	str	r2, [sp, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	9200      	str	r2, [sp, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003118:	2137      	movs	r1, #55	; 0x37
 800311a:	2087      	movs	r0, #135	; 0x87
 800311c:	f7fe fd05 	bl	8001b2a <ST7735_WriteString>
							ST7735_BLUE);
				}



			ST7735_WriteString(35, 50 + 5, test, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003122:	221f      	movs	r2, #31
 8003124:	9202      	str	r2, [sp, #8]
 8003126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312a:	9201      	str	r2, [sp, #4]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	9200      	str	r2, [sp, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003134:	2137      	movs	r1, #55	; 0x37
 8003136:	2023      	movs	r0, #35	; 0x23
 8003138:	f7fe fcf7 	bl	8001b2a <ST7735_WriteString>

			  if (fabs(measf.Ch1) > 1.0) {
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	eef0 7ae7 	vabs.f32	s15, s15
 8003146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	dd2f      	ble.n	80031b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>
					sprintf(test, "%.2f  ", measf.Ch1);
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9fd 	bl	8000558 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4913      	ldr	r1, [pc, #76]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003164:	480b      	ldr	r0, [pc, #44]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003166:	f006 fb29 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 75 + 5, " A", Font_11x18, ST7735_WHITE,
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800316c:	221f      	movs	r2, #31
 800316e:	9202      	str	r2, [sp, #8]
 8003170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003174:	9201      	str	r2, [sp, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800317e:	2150      	movs	r1, #80	; 0x50
 8003180:	2087      	movs	r0, #135	; 0x87
 8003182:	f7fe fcd2 	bl	8001b2a <ST7735_WriteString>
 8003186:	e03f      	b.n	8003208 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003188:	20001024 	.word	0x20001024
 800318c:	20000828 	.word	0x20000828
 8003190:	0800bc28 	.word	0x0800bc28
 8003194:	20000f88 	.word	0x20000f88
 8003198:	200004b0 	.word	0x200004b0
 800319c:	0800bc30 	.word	0x0800bc30
 80031a0:	408f4000 	.word	0x408f4000
 80031a4:	0800bc34 	.word	0x0800bc34
 80031a8:	0800bc38 	.word	0x0800bc38
 80031ac:	0800bc3c 	.word	0x0800bc3c
 80031b0:	0800bc40 	.word	0x0800bc40
							ST7735_BLUE);
				} else if (fabs(measf.Ch1) <= 1.0) {
 80031b4:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	eef0 7ae7 	vabs.f32	s15, s15
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	d81d      	bhi.n	8003208 <HAL_TIM_PeriodElapsedCallback+0x318>
					sprintf(test, "%.2f", measf.Ch1 * 1000.0);
 80031cc:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9c1 	bl	8000558 <__aeabi_f2d>
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b80      	ldr	r3, [pc, #512]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80031dc:	f7fd fa14 	bl	8000608 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	497e      	ldr	r1, [pc, #504]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80031e6:	487f      	ldr	r0, [pc, #508]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80031e8:	f006 fae8 	bl	80097bc <siprintf>
					ST7735_WriteString(135, 75 + 5, "mA", Font_11x18, ST7735_WHITE,
 80031ec:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80031ee:	221f      	movs	r2, #31
 80031f0:	9202      	str	r2, [sp, #8]
 80031f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f6:	9201      	str	r2, [sp, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003200:	2150      	movs	r1, #80	; 0x50
 8003202:	2087      	movs	r0, #135	; 0x87
 8003204:	f7fe fc91 	bl	8001b2a <ST7735_WriteString>
							ST7735_BLUE);
				}

			ST7735_WriteString(35, 75 + 5, test, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800320a:	221f      	movs	r2, #31
 800320c:	9202      	str	r2, [sp, #8]
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	9201      	str	r2, [sp, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800321c:	2150      	movs	r1, #80	; 0x50
 800321e:	2023      	movs	r0, #35	; 0x23
 8003220:	f7fe fc83 	bl	8001b2a <ST7735_WriteString>

		    sprintf(test, "%.1f*C", temperature);
 8003224:	4b72      	ldr	r3, [pc, #456]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f995 	bl	8000558 <__aeabi_f2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4970      	ldr	r1, [pc, #448]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8003234:	486b      	ldr	r0, [pc, #428]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8003236:	f006 fac1 	bl	80097bc <siprintf>
			ST7735_WriteString(5, 100 + 5, test, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800323a:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800323c:	221f      	movs	r2, #31
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	9200      	str	r2, [sp, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a65      	ldr	r2, [pc, #404]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800324e:	2169      	movs	r1, #105	; 0x69
 8003250:	2005      	movs	r0, #5
 8003252:	f7fe fc6a 	bl	8001b2a <ST7735_WriteString>


static uint8_t cntrep;
cntrep++;
 8003256:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8003260:	701a      	strb	r2, [r3, #0]
	if(cntrep > 5)
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b05      	cmp	r3, #5
 8003268:	f240 8093 	bls.w	8003392 <HAL_TIM_PeriodElapsedCallback+0x4a2>
	{
		cntrep = 0;
 800326c:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
		static uint8_t cnt;

		if(cnt == 0)
 8003272:	4b62      	ldr	r3, [pc, #392]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d127      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x3da>
		{
			ST7735_WriteString(80, 100 + 5, "Ef", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800327c:	221f      	movs	r2, #31
 800327e:	9202      	str	r2, [sp, #8]
 8003280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003284:	9201      	str	r2, [sp, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	9200      	str	r2, [sp, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5c      	ldr	r2, [pc, #368]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800328e:	2169      	movs	r1, #105	; 0x69
 8003290:	2050      	movs	r0, #80	; 0x50
 8003292:	f7fe fc4a 	bl	8001b2a <ST7735_WriteString>
			 sprintf(outputParam, "%.2f %",measf.Eff);
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f95c 	bl	8000558 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4957      	ldr	r1, [pc, #348]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80032a6:	4858      	ldr	r0, [pc, #352]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80032a8:	f006 fa88 	bl	80097bc <siprintf>
					ST7735_WriteString(105, 100 + 5, outputParam, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80032ae:	221f      	movs	r2, #31
 80032b0:	9202      	str	r2, [sp, #8]
 80032b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	9200      	str	r2, [sp, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80032c0:	2169      	movs	r1, #105	; 0x69
 80032c2:	2069      	movs	r0, #105	; 0x69
 80032c4:	f7fe fc31 	bl	8001b2a <ST7735_WriteString>
 80032c8:	e056      	b.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x488>

		}
		else if(cnt == 1)
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d127      	bne.n	8003322 <HAL_TIM_PeriodElapsedCallback+0x432>
		{
			ST7735_WriteString(80, 100 + 5, "P1", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 80032d2:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80032d4:	221f      	movs	r2, #31
 80032d6:	9202      	str	r2, [sp, #8]
 80032d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032dc:	9201      	str	r2, [sp, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80032e6:	2169      	movs	r1, #105	; 0x69
 80032e8:	2050      	movs	r0, #80	; 0x50
 80032ea:	f7fe fc1e 	bl	8001b2a <ST7735_WriteString>
			 sprintf(outputParam, "%.2f %",measf.P1);
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd f930 	bl	8000558 <__aeabi_f2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4941      	ldr	r1, [pc, #260]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80032fe:	4842      	ldr	r0, [pc, #264]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003300:	f006 fa5c 	bl	80097bc <siprintf>
					ST7735_WriteString(105, 100 + 5, outputParam, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8003306:	221f      	movs	r2, #31
 8003308:	9202      	str	r2, [sp, #8]
 800330a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800330e:	9201      	str	r2, [sp, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	9200      	str	r2, [sp, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003318:	2169      	movs	r1, #105	; 0x69
 800331a:	2069      	movs	r0, #105	; 0x69
 800331c:	f7fe fc05 	bl	8001b2a <ST7735_WriteString>
 8003320:	e02a      	b.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x488>

		}
		else if(cnt == 2)
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d126      	bne.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x488>
		{
			ST7735_WriteString(80, 100 + 5, "P2", Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800332c:	221f      	movs	r2, #31
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	9200      	str	r2, [sp, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a34      	ldr	r2, [pc, #208]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800333e:	2169      	movs	r1, #105	; 0x69
 8003340:	2050      	movs	r0, #80	; 0x50
 8003342:	f7fe fbf2 	bl	8001b2a <ST7735_WriteString>
			 sprintf(outputParam, "%.2f %",measf.P2);
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f904 	bl	8000558 <__aeabi_f2d>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	492b      	ldr	r1, [pc, #172]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003356:	482c      	ldr	r0, [pc, #176]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003358:	f006 fa30 	bl	80097bc <siprintf>
					ST7735_WriteString(105, 100 + 5, outputParam, Font_11x18, ST7735_WHITE, ST7735_BLUE);
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800335e:	221f      	movs	r2, #31
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003366:	9201      	str	r2, [sp, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	9200      	str	r2, [sp, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003370:	2169      	movs	r1, #105	; 0x69
 8003372:	2069      	movs	r0, #105	; 0x69
 8003374:	f7fe fbd9 	bl	8001b2a <ST7735_WriteString>

		}
		cnt ++ ;
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003382:	701a      	strb	r2, [r3, #0]
		if(cnt > 2) cnt = 0;
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d902      	bls.n	8003392 <HAL_TIM_PeriodElapsedCallback+0x4a2>
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]

	}
	}

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003392:	2017      	movs	r0, #23
 8003394:	f7ff fcc0 	bl	8002d18 <__NVIC_EnableIRQ>


	if(htim == &htim15)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f040 80e1 	bne.w	8003564 <HAL_TIM_PeriodElapsedCallback+0x674>

	{
		if (measf.P1 / measf.P2 > 1.0)
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80033a4:	edd3 6a05 	vldr	s13, [r3, #20]
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80033aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80033ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd2b      	ble.n	8003418 <HAL_TIM_PeriodElapsedCallback+0x528>
			measf.Eff = measf.P1 / measf.P2;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80033c2:	edd3 6a05 	vldr	s13, [r3, #20]
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80033c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80033cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d0:	4b01      	ldr	r3, [pc, #4]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80033d2:	edc3 7a04 	vstr	s15, [r3, #16]
 80033d6:	e02a      	b.n	800342e <HAL_TIM_PeriodElapsedCallback+0x53e>
 80033d8:	20000828 	.word	0x20000828
 80033dc:	408f4000 	.word	0x408f4000
 80033e0:	0800bc28 	.word	0x0800bc28
 80033e4:	20000f88 	.word	0x20000f88
 80033e8:	200004b0 	.word	0x200004b0
 80033ec:	0800bc3c 	.word	0x0800bc3c
 80033f0:	20000f14 	.word	0x20000f14
 80033f4:	0800bc48 	.word	0x0800bc48
 80033f8:	200006d3 	.word	0x200006d3
 80033fc:	200006d4 	.word	0x200006d4
 8003400:	0800bc50 	.word	0x0800bc50
 8003404:	0800bc54 	.word	0x0800bc54
 8003408:	2000114c 	.word	0x2000114c
 800340c:	0800bc5c 	.word	0x0800bc5c
 8003410:	0800bc60 	.word	0x0800bc60
 8003414:	20000e7c 	.word	0x20000e7c
		else
			measf.Eff = measf.P2 / measf.P1;
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800341a:	edd3 6a06 	vldr	s13, [r3, #24]
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003420:	ed93 7a05 	vldr	s14, [r3, #20]
 8003424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003428:	4b55      	ldr	r3, [pc, #340]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800342a:	edc3 7a04 	vstr	s15, [r3, #16]

		if (fabs(measf.Ch3) >= 0.05)
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003430:	edd3 7a02 	vldr	s15, [r3, #8]
 8003434:	eef0 7ae7 	vabs.f32	s15, s15
 8003438:	ee17 0a90 	vmov	r0, s15
 800343c:	f7fd f88c 	bl	8000558 <__aeabi_f2d>
 8003440:	a34b      	add	r3, pc, #300	; (adr r3, 8003570 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd fb65 	bl	8000b14 <__aeabi_dcmpge>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d017      	beq.n	8003480 <HAL_TIM_PeriodElapsedCallback+0x590>
			measf.Q_CH1 = measf.Q_CH1 + (measf.Ch3 / 36000.0L);
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003452:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd f87c 	bl	8000558 <__aeabi_f2d>
 8003460:	a345      	add	r3, pc, #276	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f9f9 	bl	800085c <__aeabi_ddiv>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f7fc ff13 	bl	800029c <__adddf3>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4941      	ldr	r1, [pc, #260]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800347c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		if (fabs(measf.Ch1) >= 0.05)
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eef0 7ae7 	vabs.f32	s15, s15
 800348a:	ee17 0a90 	vmov	r0, s15
 800348e:	f7fd f863 	bl	8000558 <__aeabi_f2d>
 8003492:	a337      	add	r3, pc, #220	; (adr r3, 8003570 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fd fb3c 	bl	8000b14 <__aeabi_dcmpge>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d017      	beq.n	80034d2 <HAL_TIM_PeriodElapsedCallback+0x5e2>
			measf.Q_CH2 = measf.Q_CH2 + (measf.Ch1 / 36000.0L);
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd f853 	bl	8000558 <__aeabi_f2d>
 80034b2:	a331      	add	r3, pc, #196	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f7fd f9d0 	bl	800085c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fc feea 	bl	800029c <__adddf3>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	492c      	ldr	r1, [pc, #176]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		if (fabs(measf.P1) >= 1.0)
 80034d2:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80034d8:	eef0 7ae7 	vabs.f32	s15, s15
 80034dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	db17      	blt.n	800351a <HAL_TIM_PeriodElapsedCallback+0x62a>
			measf.EnergyCH1 = measf.EnergyCH1 + (measf.P1 / 36000.0L);
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034ec:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f82f 	bl	8000558 <__aeabi_f2d>
 80034fa:	a31f      	add	r3, pc, #124	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f9ac 	bl	800085c <__aeabi_ddiv>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7fc fec6 	bl	800029c <__adddf3>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	491a      	ldr	r1, [pc, #104]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003516:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (fabs(measf.P2) >= 1.0)
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800351c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003520:	eef0 7ae7 	vabs.f32	s15, s15
 8003524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003530:	da00      	bge.n	8003534 <HAL_TIM_PeriodElapsedCallback+0x644>
			measf.EnergyCH2 = measf.EnergyCH2 + (measf.P2 / 36000.0L);
	}
}
 8003532:	e017      	b.n	8003564 <HAL_TIM_PeriodElapsedCallback+0x674>
			measf.EnergyCH2 = measf.EnergyCH2 + (measf.P2 / 36000.0L);
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003536:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd f80a 	bl	8000558 <__aeabi_f2d>
 8003544:	a30c      	add	r3, pc, #48	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fd f987 	bl	800085c <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fc fea1 	bl	800029c <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003560:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bdb0      	pop	{r4, r5, r7, pc}
 800356c:	f3af 8000 	nop.w
 8003570:	9999999a 	.word	0x9999999a
 8003574:	3fa99999 	.word	0x3fa99999
 8003578:	00000000 	.word	0x00000000
 800357c:	40e19400 	.word	0x40e19400
 8003580:	20000828 	.word	0x20000828

08003584 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_TIM_OC_DelayElapsedCallback+0x16>
	{
		prvvTIMERExpiredISR( );
 8003596:	f000 f95f 	bl	8003858 <prvvTIMERExpiredISR>
	}
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00

080035a8 <HAL_UART_TxCpltCallback>:
		HAL_UART_Receive_IT(&huart3, usart3_rx_data_buff, 1);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <HAL_UART_TxCpltCallback+0x28>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_TxCpltCallback+0x20>
	{
		HAL_GPIO_WritePin(USART3_DIR_GPIO_Port, USART3_DIR_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2104      	movs	r1, #4
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <HAL_UART_TxCpltCallback+0x2c>)
 80035c0:	f001 f836 	bl	8004630 <HAL_GPIO_WritePin>
		prvvUARTTxReadyISR();
 80035c4:	f000 f93e 	bl	8003844 <prvvUARTTxReadyISR>
	}
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40004800 	.word	0x40004800
 80035d4:	48000400 	.word	0x48000400

080035d8 <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1)
	{

	}

	if(hspi == &hspi3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_SPI_ErrorCallback+0x1c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_ErrorCallback+0x14>
	{
		NVIC_SystemReset();
 80035e8:	f7ff fbd8 	bl	8002d9c <__NVIC_SystemReset>
	}
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000f20 	.word	0x20000f20

080035f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
	return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_kill>:

int _kill(int pid, int sig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003612:	f005 fc29 	bl	8008e68 <__errno>
 8003616:	4603      	mov	r3, r0
 8003618:	2216      	movs	r2, #22
 800361a:	601a      	str	r2, [r3, #0]
	return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <_exit>:

void _exit (int status)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffe7 	bl	8003608 <_kill>
	while (1) {}		/* Make sure we hang here */
 800363a:	e7fe      	b.n	800363a <_exit+0x12>

0800363c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e00a      	b.n	8003664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800364e:	f3af 8000 	nop.w
 8003652:	4601      	mov	r1, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	60ba      	str	r2, [r7, #8]
 800365a:	b2ca      	uxtb	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	dbf0      	blt.n	800364e <_read+0x12>
	}

return len;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e009      	b.n	800369c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	60ba      	str	r2, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbf1      	blt.n	8003688 <_write+0x12>
	}
	return len;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <_close>:

int _close(int file)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
	return -1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d6:	605a      	str	r2, [r3, #4]
	return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_isatty>:

int _isatty(int file)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
	return 1;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
	return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <_sbrk+0x5c>)
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <_sbrk+0x60>)
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <_sbrk+0x64>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <_sbrk+0x64>)
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <_sbrk+0x68>)
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <_sbrk+0x64>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003748:	f005 fb8e 	bl	8008e68 <__errno>
 800374c:	4603      	mov	r3, r0
 800374e:	220c      	movs	r2, #12
 8003750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	e009      	b.n	800376c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <_sbrk+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <_sbrk+0x64>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <_sbrk+0x64>)
 8003768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20028000 	.word	0x20028000
 8003778:	00000400 	.word	0x00000400
 800377c:	200006d8 	.word	0x200006d8
 8003780:	200011d8 	.word	0x200011d8

08003784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <SystemInit+0x64>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <SystemInit+0x64>)
 8003790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <SystemInit+0x68>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <SystemInit+0x68>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <SystemInit+0x68>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <SystemInit+0x68>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <SystemInit+0x68>)
 80037b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80037b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80037b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <SystemInit+0x68>)
 80037bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <SystemInit+0x68>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <SystemInit+0x68>)
 80037c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <SystemInit+0x68>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SystemInit+0x64>)
 80037d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037da:	609a      	str	r2, [r3, #8]
#endif
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00
 80037ec:	40021000 	.word	0x40021000

080037f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037f4:	f7ff ffc6 	bl	8003784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037fa:	e003      	b.n	8003804 <LoopCopyDataInit>

080037fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003800:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003802:	3104      	adds	r1, #4

08003804 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003804:	480a      	ldr	r0, [pc, #40]	; (8003830 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003808:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800380a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800380c:	d3f6      	bcc.n	80037fc <CopyDataInit>
	ldr	r2, =_sbss
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003810:	e002      	b.n	8003818 <LoopFillZerobss>

08003812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003812:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003814:	f842 3b04 	str.w	r3, [r2], #4

08003818 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <LoopForever+0x16>)
	cmp	r2, r3
 800381a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800381c:	d3f9      	bcc.n	8003812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800381e:	f005 fb29 	bl	8008e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003822:	f7fe fb87 	bl	8001f34 <main>

08003826 <LoopForever>:

LoopForever:
    b LoopForever
 8003826:	e7fe      	b.n	8003826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003828:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800382c:	0800ce74 	.word	0x0800ce74
	ldr	r0, =_sdata
 8003830:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003834:	20000698 	.word	0x20000698
	ldr	r2, =_sbss
 8003838:	20000698 	.word	0x20000698
	ldr	r3, = _ebss
 800383c:	200011d8 	.word	0x200011d8

08003840 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003840:	e7fe      	b.n	8003840 <ADC1_IRQHandler>
	...

08003844 <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
 void prvvUARTTxReadyISR( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <prvvUARTTxReadyISR+0x10>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4798      	blx	r3
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200011b0 	.word	0x200011b0

08003858 <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
void prvvTIMERExpiredISR( void ) //��ʱ���ж��ڵ���
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <prvvTIMERExpiredISR+0x10>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4798      	blx	r3
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200011b4 	.word	0x200011b4

0800386c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f000 fca0 	bl	80041bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387c:	2000      	movs	r0, #0
 800387e:	f000 f80d 	bl	800389c <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	71fb      	strb	r3, [r7, #7]
 800388c:	e001      	b.n	8003892 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800388e:	f7ff f83f 	bl	8002910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003892:	79fb      	ldrb	r3, [r7, #7]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_InitTick+0x6c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d023      	beq.n	80038f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_InitTick+0x70>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_InitTick+0x6c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038be:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fcad 	bl	8004226 <HAL_SYSTICK_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d809      	bhi.n	80038ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f000 fc77 	bl	80041d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_InitTick+0x74>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e007      	b.n	80038fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e004      	b.n	80038fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e001      	b.n	80038fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200004c4 	.word	0x200004c4
 800390c:	200004bc 	.word	0x200004bc
 8003910:	200004c0 	.word	0x200004c0

08003914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_IncTick+0x20>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x24>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_IncTick+0x24>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	200004c4 	.word	0x200004c4
 8003938:	200011c4 	.word	0x200011c4

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	200011c4 	.word	0x200011c4

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff ffee 	bl	800393c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d005      	beq.n	800397a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_Delay+0x44>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397a:	bf00      	nop
 800397c:	f7ff ffde 	bl	800393c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d8f7      	bhi.n	800397c <HAL_Delay+0x28>
  {
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200004c4 	.word	0x200004c4

0800399c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0ed      	b.n	8003b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe ffcc 	bl	8002958 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0202 	bic.w	r2, r2, #2
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d0:	f7ff ffb4 	bl	800393c <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039d6:	e012      	b.n	80039fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039d8:	f7ff ffb0 	bl	800393c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b0a      	cmp	r3, #10
 80039e4:	d90b      	bls.n	80039fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2205      	movs	r2, #5
 80039f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0c5      	b.n	8003b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e5      	bne.n	80039d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7ff ff8e 	bl	800393c <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a22:	e012      	b.n	8003a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a24:	f7ff ff8a 	bl	800393c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	d90b      	bls.n	8003a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2205      	movs	r2, #5
 8003a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e09f      	b.n	8003b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0e5      	beq.n	8003a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7e1b      	ldrb	r3, [r3, #24]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d108      	bne.n	8003a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e007      	b.n	8003a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7e5b      	ldrb	r3, [r3, #25]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e007      	b.n	8003aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7e9b      	ldrb	r3, [r3, #26]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e007      	b.n	8003ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0220 	bic.w	r2, r2, #32
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7edb      	ldrb	r3, [r3, #27]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d108      	bne.n	8003af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0210 	bic.w	r2, r2, #16
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e007      	b.n	8003b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0210 	orr.w	r2, r2, #16
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7f1b      	ldrb	r3, [r3, #28]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d108      	bne.n	8003b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0208 	orr.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e007      	b.n	8003b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0208 	bic.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7f5b      	ldrb	r3, [r3, #29]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0204 	orr.w	r2, r2, #4
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e007      	b.n	8003b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d003      	beq.n	8003bb8 <HAL_CAN_ConfigFilter+0x26>
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	f040 80aa 	bne.w	8003d0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	401a      	ands	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d123      	bne.n	8003c3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3248      	adds	r2, #72	; 0x48
 8003c1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	3348      	adds	r3, #72	; 0x48
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d122      	bne.n	8003c88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3248      	adds	r2, #72	; 0x48
 8003c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	3348      	adds	r3, #72	; 0x48
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ca2:	e007      	b.n	8003cb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003cce:	e007      	b.n	8003ce0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e006      	b.n	8003d1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d12e      	bne.n	8003d98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d52:	f7ff fdf3 	bl	800393c <HAL_GetTick>
 8003d56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d58:	e012      	b.n	8003d80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d5a:	f7ff fdef 	bl	800393c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b0a      	cmp	r3, #10
 8003d66:	d90b      	bls.n	8003d80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2205      	movs	r2, #5
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e012      	b.n	8003da6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e006      	b.n	8003da6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b089      	sub	sp, #36	; 0x24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dcc:	7ffb      	ldrb	r3, [r7, #31]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d003      	beq.n	8003dda <HAL_CAN_AddTxMessage+0x2c>
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f040 80b8 	bne.w	8003f4a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a0 	beq.w	8003f3a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d907      	bls.n	8003e1a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e09e      	b.n	8003f58 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	6809      	ldr	r1, [r1, #0]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	440b      	add	r3, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00f      	b.n	8003e68 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e52:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e5c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3318      	adds	r3, #24
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	440b      	add	r3, r1
 8003e66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3318      	adds	r3, #24
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	440b      	add	r3, r1
 8003e78:	3304      	adds	r3, #4
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	7d1b      	ldrb	r3, [r3, #20]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d111      	bne.n	8003ea8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	6811      	ldr	r1, [r2, #0]
 8003e98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3307      	adds	r3, #7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	061a      	lsls	r2, r3, #24
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3306      	adds	r3, #6
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3305      	adds	r3, #5
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	3204      	adds	r2, #4
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	4610      	mov	r0, r2
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6811      	ldr	r1, [r2, #0]
 8003ed0:	ea43 0200 	orr.w	r2, r3, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ede:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3303      	adds	r3, #3
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	061a      	lsls	r2, r3, #24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3302      	adds	r3, #2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	4313      	orrs	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	4610      	mov	r0, r2
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	ea43 0200 	orr.w	r2, r3, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	440b      	add	r3, r1
 8003f10:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f14:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	4413      	add	r3, r2
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	6811      	ldr	r1, [r2, #0]
 8003f28:	f043 0201 	orr.w	r2, r3, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	440b      	add	r3, r1
 8003f34:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e00e      	b.n	8003f58 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e006      	b.n	8003f58 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3724      	adds	r7, #36	; 0x24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f76:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f78:	7afb      	ldrb	r3, [r7, #11]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d002      	beq.n	8003f84 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d11d      	bne.n	8003fc0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d002      	beq.n	8003fec <HAL_CAN_ActivateNotification+0x1e>
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d109      	bne.n	8004000 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6959      	ldr	r1, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e006      	b.n	800400e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <__NVIC_SetPriorityGrouping>:
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60d3      	str	r3, [r2, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_GetPriorityGrouping>:
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <__NVIC_EnableIRQ+0x38>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_SetPriority>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	db0a      	blt.n	80040e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <__NVIC_SetPriority+0x4c>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	440b      	add	r3, r1
 80040e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040e4:	e00a      	b.n	80040fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <__NVIC_SetPriority+0x50>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3b04      	subs	r3, #4
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	440b      	add	r3, r1
 80040fa:	761a      	strb	r2, [r3, #24]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000e100 	.word	0xe000e100
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <NVIC_EncodePriority>:
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f1c3 0307 	rsb	r3, r3, #7
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf28      	it	cs
 800412e:	2304      	movcs	r3, #4
 8004130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3304      	adds	r3, #4
 8004136:	2b06      	cmp	r3, #6
 8004138:	d902      	bls.n	8004140 <NVIC_EncodePriority+0x30>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3b03      	subs	r3, #3
 800413e:	e000      	b.n	8004142 <NVIC_EncodePriority+0x32>
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004158:	f04f 31ff 	mov.w	r1, #4294967295
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43d9      	mvns	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	4313      	orrs	r3, r2
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004188:	d301      	bcc.n	800418e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418a:	2301      	movs	r3, #1
 800418c:	e00f      	b.n	80041ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <SysTick_Config+0x40>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004196:	210f      	movs	r1, #15
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	f7ff ff8e 	bl	80040bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <SysTick_Config+0x40>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SysTick_Config+0x40>)
 80041a8:	2207      	movs	r2, #7
 80041aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000e010 	.word	0xe000e010

080041bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff29 	bl	800401c <__NVIC_SetPriorityGrouping>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041e4:	f7ff ff3e 	bl	8004064 <__NVIC_GetPriorityGrouping>
 80041e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff8e 	bl	8004110 <NVIC_EncodePriority>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff5d 	bl	80040bc <__NVIC_SetPriority>
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	4603      	mov	r3, r0
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff31 	bl	8004080 <__NVIC_EnableIRQ>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffa2 	bl	8004178 <SysTick_Config>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d008      	beq.n	8004268 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2204      	movs	r2, #4
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e022      	b.n	80042ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020e 	bic.w	r2, r2, #14
 8004276:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f003 021c 	and.w	r2, r3, #28
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f202 	lsl.w	r2, r1, r2
 800429a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d005      	beq.n	80042de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2204      	movs	r2, #4
 80042d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e029      	b.n	8004332 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 020e 	bic.w	r2, r2, #14
 80042ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f003 021c 	and.w	r2, r3, #28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
    }
  }
  return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434a:	e154      	b.n	80045f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8146 	beq.w	80045f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d00b      	beq.n	8004384 <HAL_GPIO_Init+0x48>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d007      	beq.n	8004384 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004378:	2b11      	cmp	r3, #17
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b12      	cmp	r3, #18
 8004382:	d130      	bne.n	80043e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ba:	2201      	movs	r2, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0201 	and.w	r2, r3, #1
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	2203      	movs	r2, #3
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0xea>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b12      	cmp	r3, #18
 8004424:	d123      	bne.n	800446e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a0 	beq.w	80045f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b0:	4b58      	ldr	r3, [pc, #352]	; (8004614 <HAL_GPIO_Init+0x2d8>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	4a57      	ldr	r2, [pc, #348]	; (8004614 <HAL_GPIO_Init+0x2d8>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6613      	str	r3, [r2, #96]	; 0x60
 80044bc:	4b55      	ldr	r3, [pc, #340]	; (8004614 <HAL_GPIO_Init+0x2d8>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044c8:	4a53      	ldr	r2, [pc, #332]	; (8004618 <HAL_GPIO_Init+0x2dc>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044f2:	d019      	beq.n	8004528 <HAL_GPIO_Init+0x1ec>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a49      	ldr	r2, [pc, #292]	; (800461c <HAL_GPIO_Init+0x2e0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_GPIO_Init+0x1e8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a48      	ldr	r2, [pc, #288]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00d      	beq.n	8004520 <HAL_GPIO_Init+0x1e4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a47      	ldr	r2, [pc, #284]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <HAL_GPIO_Init+0x1e0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a46      	ldr	r2, [pc, #280]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_GPIO_Init+0x1dc>
 8004514:	2304      	movs	r3, #4
 8004516:	e008      	b.n	800452a <HAL_GPIO_Init+0x1ee>
 8004518:	2307      	movs	r3, #7
 800451a:	e006      	b.n	800452a <HAL_GPIO_Init+0x1ee>
 800451c:	2303      	movs	r3, #3
 800451e:	e004      	b.n	800452a <HAL_GPIO_Init+0x1ee>
 8004520:	2302      	movs	r3, #2
 8004522:	e002      	b.n	800452a <HAL_GPIO_Init+0x1ee>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_GPIO_Init+0x1ee>
 8004528:	2300      	movs	r3, #0
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	f002 0203 	and.w	r2, r2, #3
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	4093      	lsls	r3, r2
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800453a:	4937      	ldr	r1, [pc, #220]	; (8004618 <HAL_GPIO_Init+0x2dc>)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	3302      	adds	r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004548:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	43db      	mvns	r3, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800456c:	4a2f      	ldr	r2, [pc, #188]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004596:	4a25      	ldr	r2, [pc, #148]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_GPIO_Init+0x2f0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c0:	4a1a      	ldr	r2, [pc, #104]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <HAL_GPIO_Init+0x2f0>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3301      	adds	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f aea3 	bne.w	800434c <HAL_GPIO_Init+0x10>
  }
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40021000 	.word	0x40021000
 8004618:	40010000 	.word	0x40010000
 800461c:	48000400 	.word	0x48000400
 8004620:	48000800 	.word	0x48000800
 8004624:	48000c00 	.word	0x48000c00
 8004628:	48001000 	.word	0x48001000
 800462c:	40010400 	.word	0x40010400

08004630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
 800463c:	4613      	mov	r3, r2
 800463e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004646:	887a      	ldrh	r2, [r7, #2]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800464c:	e002      	b.n	8004654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fc0a 	bl	8002e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40010400 	.word	0x40010400

08004690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e081      	b.n	80047a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe f992 	bl	80029e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	e006      	b.n	8004718 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004716:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d104      	bne.n	800472a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	ea42 0103 	orr.w	r1, r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	460b      	mov	r3, r1
 80047be:	817b      	strh	r3, [r7, #10]
 80047c0:	4613      	mov	r3, r2
 80047c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	f040 80da 	bne.w	8004986 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_I2C_Master_Transmit+0x30>
 80047dc:	2302      	movs	r3, #2
 80047de:	e0d3      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047e8:	f7ff f8a8 	bl	800393c <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f9e6 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0be      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2221      	movs	r2, #33	; 0x21
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2210      	movs	r2, #16
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2bff      	cmp	r3, #255	; 0xff
 800483a:	d90e      	bls.n	800485a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	b2da      	uxtb	r2, r3
 8004848:	8979      	ldrh	r1, [r7, #10]
 800484a:	4b51      	ldr	r3, [pc, #324]	; (8004990 <HAL_I2C_Master_Transmit+0x1e0>)
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fb48 	bl	8004ee8 <I2C_TransferConfig>
 8004858:	e06c      	b.n	8004934 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	b2da      	uxtb	r2, r3
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_I2C_Master_Transmit+0x1e0>)
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fb37 	bl	8004ee8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800487a:	e05b      	b.n	8004934 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	6a39      	ldr	r1, [r7, #32]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f9e3 	bl	8004c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e07b      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d034      	beq.n	8004934 <HAL_I2C_Master_Transmit+0x184>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d130      	bne.n	8004934 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2200      	movs	r2, #0
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f975 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e04d      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2bff      	cmp	r3, #255	; 0xff
 80048f4:	d90e      	bls.n	8004914 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	22ff      	movs	r2, #255	; 0xff
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	b2da      	uxtb	r2, r3
 8004902:	8979      	ldrh	r1, [r7, #10]
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 faeb 	bl	8004ee8 <I2C_TransferConfig>
 8004912:	e00f      	b.n	8004934 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004922:	b2da      	uxtb	r2, r3
 8004924:	8979      	ldrh	r1, [r7, #10]
 8004926:	2300      	movs	r3, #0
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fada 	bl	8004ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d19e      	bne.n	800487c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	6a39      	ldr	r1, [r7, #32]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f9c2 	bl	8004ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e01a      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2220      	movs	r2, #32
 8004958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_I2C_Master_Transmit+0x1e4>)
 8004966:	400b      	ands	r3, r1
 8004968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	80002000 	.word	0x80002000
 8004994:	fe00e800 	.word	0xfe00e800

08004998 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	461a      	mov	r2, r3
 80049a4:	460b      	mov	r3, r1
 80049a6:	817b      	strh	r3, [r7, #10]
 80049a8:	4613      	mov	r3, r2
 80049aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	f040 80db 	bne.w	8004b70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_I2C_Master_Receive+0x30>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e0d4      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049d0:	f7fe ffb4 	bl	800393c <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2319      	movs	r3, #25
 80049dc:	2201      	movs	r2, #1
 80049de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f8f2 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0bf      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2222      	movs	r2, #34	; 0x22
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2210      	movs	r2, #16
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	893a      	ldrh	r2, [r7, #8]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2bff      	cmp	r3, #255	; 0xff
 8004a22:	d90e      	bls.n	8004a42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	8979      	ldrh	r1, [r7, #10]
 8004a32:	4b52      	ldr	r3, [pc, #328]	; (8004b7c <HAL_I2C_Master_Receive+0x1e4>)
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fa54 	bl	8004ee8 <I2C_TransferConfig>
 8004a40:	e06d      	b.n	8004b1e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <HAL_I2C_Master_Receive+0x1e4>)
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fa43 	bl	8004ee8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004a62:	e05c      	b.n	8004b1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6a39      	ldr	r1, [r7, #32]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f96b 	bl	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e07c      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d034      	beq.n	8004b1e <HAL_I2C_Master_Receive+0x186>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d130      	bne.n	8004b1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f880 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e04d      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2bff      	cmp	r3, #255	; 0xff
 8004ade:	d90e      	bls.n	8004afe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	22ff      	movs	r2, #255	; 0xff
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	8979      	ldrh	r1, [r7, #10]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f9f6 	bl	8004ee8 <I2C_TransferConfig>
 8004afc:	e00f      	b.n	8004b1e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f9e5 	bl	8004ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d19d      	bne.n	8004a64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	6a39      	ldr	r1, [r7, #32]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f8cd 	bl	8004ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e01a      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2220      	movs	r2, #32
 8004b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <HAL_I2C_Master_Receive+0x1e8>)
 8004b50:	400b      	ands	r3, r1
 8004b52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	80002400 	.word	0x80002400
 8004b80:	fe00e800 	.word	0xfe00e800

08004b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d103      	bne.n	8004ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d007      	beq.n	8004bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	619a      	str	r2, [r3, #24]
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	e022      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d01e      	beq.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fe fea9 	bl	800393c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e00f      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d0cd      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c58:	e02c      	b.n	8004cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f8dc 	bl	8004e1c <I2C_IsAcknowledgeFailed>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e02a      	b.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d01e      	beq.n	8004cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fe fe61 	bl	800393c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d113      	bne.n	8004cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d1cb      	bne.n	8004c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cd8:	e028      	b.n	8004d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f89c 	bl	8004e1c <I2C_IsAcknowledgeFailed>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e026      	b.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fe fe25 	bl	800393c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d113      	bne.n	8004d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e007      	b.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d1cf      	bne.n	8004cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d50:	e055      	b.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f860 	bl	8004e1c <I2C_IsAcknowledgeFailed>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e053      	b.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d129      	bne.n	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d105      	bne.n	8004d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e03f      	b.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e022      	b.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc8:	f7fe fdb8 	bl	800393c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e007      	b.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d1a2      	bne.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	fe00e800 	.word	0xfe00e800

08004e1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d151      	bne.n	8004eda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e36:	e022      	b.n	8004e7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d01e      	beq.n	8004e7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e40:	f7fe fd7c 	bl	800393c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d302      	bcc.n	8004e56 <I2C_IsAcknowledgeFailed+0x3a>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e02e      	b.n	8004edc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d1d5      	bne.n	8004e38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2210      	movs	r2, #16
 8004e92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fe71 	bl	8004b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <I2C_IsAcknowledgeFailed+0xc8>)
 8004eae:	400b      	ands	r3, r1
 8004eb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	fe00e800 	.word	0xfe00e800

08004ee8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	0d5b      	lsrs	r3, r3, #21
 8004f04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f08:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <I2C_TransferConfig+0x58>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	ea02 0103 	and.w	r1, r2, r3
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f18:	7a7b      	ldrb	r3, [r7, #9]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	03ff63ff 	.word	0x03ff63ff

08004f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d138      	bne.n	8004fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e032      	b.n	8004fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d139      	bne.n	8005064 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e033      	b.n	8005066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2224      	movs	r2, #36	; 0x24
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800502c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <HAL_PWREx_GetVoltageRange+0x18>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40007000 	.word	0x40007000

08005090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	d130      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050a0:	4b23      	ldr	r3, [pc, #140]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d038      	beq.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ae:	4b20      	ldr	r3, [pc, #128]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2232      	movs	r2, #50	; 0x32
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0c9b      	lsrs	r3, r3, #18
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d4:	e002      	b.n	80050dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3b01      	subs	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050dc:	4b14      	ldr	r3, [pc, #80]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d102      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f2      	bne.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fc:	d110      	bne.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e00f      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d007      	beq.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005118:	4a05      	ldr	r2, [pc, #20]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800511a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800511e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40007000 	.word	0x40007000
 8005134:	200004bc 	.word	0x200004bc
 8005138:	431bde83 	.word	0x431bde83

0800513c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f000 bc11 	b.w	8005972 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005150:	4ba0      	ldr	r3, [pc, #640]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515a:	4b9e      	ldr	r3, [pc, #632]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80e4 	beq.w	800533a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_RCC_OscConfig+0x4c>
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b0c      	cmp	r3, #12
 800517c:	f040 808b 	bne.w	8005296 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b01      	cmp	r3, #1
 8005184:	f040 8087 	bne.w	8005296 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005188:	4b92      	ldr	r3, [pc, #584]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_OscConfig+0x64>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e3e8      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	4b8b      	ldr	r3, [pc, #556]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_RCC_OscConfig+0x7e>
 80051b0:	4b88      	ldr	r3, [pc, #544]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b8:	e005      	b.n	80051c6 <HAL_RCC_OscConfig+0x8a>
 80051ba:	4b86      	ldr	r3, [pc, #536]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d223      	bcs.n	8005212 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd7a 	bl	8005cc8 <RCC_SetFlashLatencyFromMSIRange>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e3c9      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051de:	4b7d      	ldr	r3, [pc, #500]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7c      	ldr	r2, [pc, #496]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b7a      	ldr	r3, [pc, #488]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	4977      	ldr	r1, [pc, #476]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fc:	4b75      	ldr	r3, [pc, #468]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	4972      	ldr	r1, [pc, #456]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
 8005210:	e025      	b.n	800525e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005212:	4b70      	ldr	r3, [pc, #448]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a6f      	ldr	r2, [pc, #444]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b6d      	ldr	r3, [pc, #436]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	496a      	ldr	r1, [pc, #424]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800522c:	4313      	orrs	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005230:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	4965      	ldr	r1, [pc, #404]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fd3a 	bl	8005cc8 <RCC_SetFlashLatencyFromMSIRange>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e389      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800525e:	f000 fc6f 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005262:	4602      	mov	r2, r0
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	495a      	ldr	r1, [pc, #360]	; (80053d8 <HAL_RCC_OscConfig+0x29c>)
 8005270:	5ccb      	ldrb	r3, [r1, r3]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	4a58      	ldr	r2, [pc, #352]	; (80053dc <HAL_RCC_OscConfig+0x2a0>)
 800527c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800527e:	4b58      	ldr	r3, [pc, #352]	; (80053e0 <HAL_RCC_OscConfig+0x2a4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fb0a 	bl	800389c <HAL_InitTick>
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d052      	beq.n	8005338 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	e36d      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d032      	beq.n	8005304 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800529e:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4c      	ldr	r2, [pc, #304]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052aa:	f7fe fb47 	bl	800393c <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052b2:	f7fe fb43 	bl	800393c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e356      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052c4:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d0:	4b40      	ldr	r3, [pc, #256]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3f      	ldr	r2, [pc, #252]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	493a      	ldr	r1, [pc, #232]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	4935      	ldr	r1, [pc, #212]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
 8005302:	e01a      	b.n	800533a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005304:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a32      	ldr	r2, [pc, #200]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005310:	f7fe fb14 	bl	800393c <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005318:	f7fe fb10 	bl	800393c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e323      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x1dc>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d073      	beq.n	800542e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d005      	beq.n	8005358 <HAL_RCC_OscConfig+0x21c>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d10e      	bne.n	8005370 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d10b      	bne.n	8005370 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d063      	beq.n	800542c <HAL_RCC_OscConfig+0x2f0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d15f      	bne.n	800542c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e300      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d106      	bne.n	8005388 <HAL_RCC_OscConfig+0x24c>
 800537a:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e01d      	b.n	80053c4 <HAL_RCC_OscConfig+0x288>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x270>
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 8005398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0x288>
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <HAL_RCC_OscConfig+0x298>)
 80053be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fe fab6 	bl	800393c <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d2:	e010      	b.n	80053f6 <HAL_RCC_OscConfig+0x2ba>
 80053d4:	40021000 	.word	0x40021000
 80053d8:	0800ca38 	.word	0x0800ca38
 80053dc:	200004bc 	.word	0x200004bc
 80053e0:	200004c0 	.word	0x200004c0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fe faaa 	bl	800393c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e2bd      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f6:	4baf      	ldr	r3, [pc, #700]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2a8>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fe fa9a 	bl	800393c <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fe fa96 	bl	800393c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e2a9      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800541e:	4ba5      	ldr	r3, [pc, #660]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x2d0>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d060      	beq.n	80054fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d005      	beq.n	800544c <HAL_RCC_OscConfig+0x310>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d119      	bne.n	800547a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d116      	bne.n	800547a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	4b99      	ldr	r3, [pc, #612]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_OscConfig+0x328>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e286      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b93      	ldr	r3, [pc, #588]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	4990      	ldr	r1, [pc, #576]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005478:	e040      	b.n	80054fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d023      	beq.n	80054ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005482:	4b8c      	ldr	r3, [pc, #560]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a8b      	ldr	r2, [pc, #556]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fe fa55 	bl	800393c <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005496:	f7fe fa51 	bl	800393c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e264      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a8:	4b82      	ldr	r3, [pc, #520]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	4b7f      	ldr	r3, [pc, #508]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	497c      	ldr	r1, [pc, #496]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	e018      	b.n	80054fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a79      	ldr	r2, [pc, #484]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fe fa31 	bl	800393c <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fe fa2d 	bl	800393c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e240      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054f0:	4b70      	ldr	r3, [pc, #448]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03c      	beq.n	8005582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01c      	beq.n	800554a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005510:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005516:	4a67      	ldr	r2, [pc, #412]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fe fa0c 	bl	800393c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005528:	f7fe fa08 	bl	800393c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e21b      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800553a:	4b5e      	ldr	r3, [pc, #376]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ef      	beq.n	8005528 <HAL_RCC_OscConfig+0x3ec>
 8005548:	e01b      	b.n	8005582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554a:	4b5a      	ldr	r3, [pc, #360]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	4a58      	ldr	r2, [pc, #352]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fe f9ef 	bl	800393c <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fe f9eb 	bl	800393c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1fe      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ef      	bne.n	8005562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80a6 	beq.w	80056dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005594:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a0:	4b44      	ldr	r3, [pc, #272]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	4a43      	ldr	r2, [pc, #268]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	6593      	str	r3, [r2, #88]	; 0x58
 80055ac:	4b41      	ldr	r3, [pc, #260]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055bc:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <HAL_RCC_OscConfig+0x57c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d118      	bne.n	80055fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c8:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <HAL_RCC_OscConfig+0x57c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3a      	ldr	r2, [pc, #232]	; (80056b8 <HAL_RCC_OscConfig+0x57c>)
 80055ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d4:	f7fe f9b2 	bl	800393c <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fe f9ae 	bl	800393c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1c1      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ee:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <HAL_RCC_OscConfig+0x57c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <HAL_RCC_OscConfig+0x4d8>
 8005602:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005612:	e024      	b.n	800565e <HAL_RCC_OscConfig+0x522>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d110      	bne.n	800563e <HAL_RCC_OscConfig+0x502>
 800561c:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a24      	ldr	r2, [pc, #144]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800562c:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800563c:	e00f      	b.n	800565e <HAL_RCC_OscConfig+0x522>
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800564e:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fe f969 	bl	800393c <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fe f965 	bl	800393c <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e176      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_OscConfig+0x578>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0ed      	beq.n	800566e <HAL_RCC_OscConfig+0x532>
 8005692:	e01a      	b.n	80056ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005694:	f7fe f952 	bl	800393c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800569a:	e00f      	b.n	80056bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569c:	f7fe f94e 	bl	800393c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d906      	bls.n	80056bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e15f      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056bc:	4baa      	ldr	r3, [pc, #680]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e8      	bne.n	800569c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d0:	4ba5      	ldr	r3, [pc, #660]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	4aa4      	ldr	r2, [pc, #656]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d03c      	beq.n	8005762 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01c      	beq.n	800572a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f0:	4b9d      	ldr	r3, [pc, #628]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80056f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f6:	4a9c      	ldr	r2, [pc, #624]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fe f91c 	bl	800393c <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005708:	f7fe f918 	bl	800393c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e12b      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800571a:	4b93      	ldr	r3, [pc, #588]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800571c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ef      	beq.n	8005708 <HAL_RCC_OscConfig+0x5cc>
 8005728:	e01b      	b.n	8005762 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800572a:	4b8f      	ldr	r3, [pc, #572]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800572c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005730:	4a8d      	ldr	r2, [pc, #564]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fe f8ff 	bl	800393c <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005742:	f7fe f8fb 	bl	800393c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10e      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005754:	4b84      	ldr	r3, [pc, #528]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1ef      	bne.n	8005742 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8102 	beq.w	8005970 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	2b02      	cmp	r3, #2
 8005772:	f040 80c5 	bne.w	8005900 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005776:	4b7c      	ldr	r3, [pc, #496]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f003 0203 	and.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	429a      	cmp	r2, r3
 8005788:	d12c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	3b01      	subs	r3, #1
 8005796:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d123      	bne.n	80057e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d11b      	bne.n	80057e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d113      	bne.n	80057e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	3b01      	subs	r3, #1
 80057ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d109      	bne.n	80057e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	3b01      	subs	r3, #1
 80057de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d067      	beq.n	80058b4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	d062      	beq.n	80058b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057ea:	4b5f      	ldr	r3, [pc, #380]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0bb      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057fa:	4b5b      	ldr	r3, [pc, #364]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5a      	ldr	r2, [pc, #360]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005804:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005806:	f7fe f899 	bl	800393c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fe f895 	bl	800393c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e0a8      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	4b51      	ldr	r3, [pc, #324]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f0      	bne.n	800580e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582c:	4b4e      	ldr	r3, [pc, #312]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCC_OscConfig+0x830>)
 8005832:	4013      	ands	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800583c:	3a01      	subs	r2, #1
 800583e:	0112      	lsls	r2, r2, #4
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005846:	0212      	lsls	r2, r2, #8
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800584e:	0852      	lsrs	r2, r2, #1
 8005850:	3a01      	subs	r2, #1
 8005852:	0552      	lsls	r2, r2, #21
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800585a:	0852      	lsrs	r2, r2, #1
 800585c:	3a01      	subs	r2, #1
 800585e:	0652      	lsls	r2, r2, #25
 8005860:	4311      	orrs	r1, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005866:	06d2      	lsls	r2, r2, #27
 8005868:	430a      	orrs	r2, r1
 800586a:	493f      	ldr	r1, [pc, #252]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005870:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800587c:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a39      	ldr	r2, [pc, #228]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005886:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005888:	f7fe f858 	bl	800393c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fe f854 	bl	800393c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e067      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a2:	4b31      	ldr	r3, [pc, #196]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ae:	e05f      	b.n	8005970 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e05e      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b4:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d157      	bne.n	8005970 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058c0:	4b29      	ldr	r3, [pc, #164]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a28      	ldr	r2, [pc, #160]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058d8:	f7fe f830 	bl	800393c <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fe f82c 	bl	800393c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e03f      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x7a4>
 80058fe:	e037      	b.n	8005970 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d02d      	beq.n	8005962 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005906:	4b18      	ldr	r3, [pc, #96]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800590c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005910:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005924:	f023 0303 	bic.w	r3, r3, #3
 8005928:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005930:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fd ffff 	bl	800393c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005942:	f7fd fffb 	bl	800393c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e00e      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	4b04      	ldr	r3, [pc, #16]	; (8005968 <HAL_RCC_OscConfig+0x82c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f0      	bne.n	8005942 <HAL_RCC_OscConfig+0x806>
 8005960:	e006      	b.n	8005970 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e005      	b.n	8005972 <HAL_RCC_OscConfig+0x836>
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0c8      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d910      	bls.n	80059c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b63      	ldr	r3, [pc, #396]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 0207 	bic.w	r2, r3, #7
 80059a6:	4961      	ldr	r1, [pc, #388]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0b0      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d04c      	beq.n	8005a66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d4:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d121      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e09e      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d107      	bne.n	80059fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ec:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d115      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e092      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a04:	4b4a      	ldr	r3, [pc, #296]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e086      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a14:	4b46      	ldr	r3, [pc, #280]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e07e      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f023 0203 	bic.w	r2, r3, #3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	493f      	ldr	r1, [pc, #252]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a36:	f7fd ff81 	bl	800393c <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3e:	f7fd ff7d 	bl	800393c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e066      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a54:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 020c 	and.w	r2, r3, #12
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d1eb      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a72:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	492c      	ldr	r1, [pc, #176]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a84:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d210      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	4924      	ldr	r1, [pc, #144]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <HAL_RCC_ClockConfig+0x1b0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e036      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4918      	ldr	r1, [pc, #96]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4910      	ldr	r1, [pc, #64]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af2:	f000 f825 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <HAL_RCC_ClockConfig+0x1b4>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	490c      	ldr	r1, [pc, #48]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fd fec0 	bl	800389c <HAL_InitTick>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b20:	7afb      	ldrb	r3, [r7, #11]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40022000 	.word	0x40022000
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800ca38 	.word	0x0800ca38
 8005b38:	200004bc 	.word	0x200004bc
 8005b3c:	200004c0 	.word	0x200004c0

08005b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b089      	sub	sp, #36	; 0x24
 8005b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b58:	4b3b      	ldr	r3, [pc, #236]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0x34>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d121      	bne.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d11e      	bne.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b74:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b80:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e005      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d102      	bne.n	8005bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e004      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d134      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d003      	beq.n	8005bec <HAL_RCC_GetSysClockFreq+0xac>
 8005be4:	e005      	b.n	8005bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8005be8:	617b      	str	r3, [r7, #20]
      break;
 8005bea:	e005      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bee:	617b      	str	r3, [r7, #20]
      break;
 8005bf0:	e002      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	617b      	str	r3, [r7, #20]
      break;
 8005bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	3301      	adds	r3, #1
 8005c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	fb02 f203 	mul.w	r2, r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	0e5b      	lsrs	r3, r3, #25
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	3301      	adds	r3, #1
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c38:	69bb      	ldr	r3, [r7, #24]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3724      	adds	r7, #36	; 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800ca50 	.word	0x0800ca50
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	007a1200 	.word	0x007a1200

08005c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	200004bc 	.word	0x200004bc

08005c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c74:	f7ff fff0 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	4904      	ldr	r1, [pc, #16]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40021000 	.word	0x40021000
 8005c98:	0800ca48 	.word	0x0800ca48

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ca0:	f7ff ffda 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0adb      	lsrs	r3, r3, #11
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	0800ca48 	.word	0x0800ca48

08005cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cd4:	4b2a      	ldr	r3, [pc, #168]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ce0:	f7ff f9c8 	bl	8005074 <HAL_PWREx_GetVoltageRange>
 8005ce4:	6178      	str	r0, [r7, #20]
 8005ce6:	e014      	b.n	8005d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf4:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d00:	f7ff f9b8 	bl	8005074 <HAL_PWREx_GetVoltageRange>
 8005d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d18:	d10b      	bne.n	8005d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d919      	bls.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2ba0      	cmp	r3, #160	; 0xa0
 8005d24:	d902      	bls.n	8005d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d26:	2302      	movs	r3, #2
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e013      	b.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	e010      	b.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d902      	bls.n	8005d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d38:	2303      	movs	r3, #3
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	e00a      	b.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d102      	bne.n	8005d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d44:	2302      	movs	r3, #2
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	e004      	b.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b70      	cmp	r3, #112	; 0x70
 8005d4e:	d101      	bne.n	8005d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d50:	2301      	movs	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 0207 	bic.w	r2, r3, #7
 8005d5c:	4909      	ldr	r1, [pc, #36]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d001      	beq.n	8005d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40022000 	.word	0x40022000

08005d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d90:	2300      	movs	r3, #0
 8005d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d94:	2300      	movs	r3, #0
 8005d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d031      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dac:	d01a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005dae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005db2:	d814      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dbc:	d10f      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005dbe:	4b5d      	ldr	r3, [pc, #372]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4a5c      	ldr	r2, [pc, #368]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dca:	e00c      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa12 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	74fb      	strb	r3, [r7, #19]
      break;
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10b      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dec:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfa:	494e      	ldr	r1, [pc, #312]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e02:	e001      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 809e 	beq.w	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e16:	2300      	movs	r3, #0
 8005e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e1a:	4b46      	ldr	r3, [pc, #280]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e30:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	4a3f      	ldr	r2, [pc, #252]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3c:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e4c:	4b3a      	ldr	r3, [pc, #232]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a39      	ldr	r2, [pc, #228]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e58:	f7fd fd70 	bl	800393c <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e5e:	e009      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fd fd6c 	bl	800393c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	74fb      	strb	r3, [r7, #19]
        break;
 8005e72:	e005      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e74:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ef      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d15a      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01e      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d019      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ece:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fd2c 	bl	800393c <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee6:	e00b      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee8:	f7fd fd28 	bl	800393c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d902      	bls.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	74fb      	strb	r3, [r7, #19]
            break;
 8005efe:	e006      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ec      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005f0e:	7cfb      	ldrb	r3, [r7, #19]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f14:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	4904      	ldr	r1, [pc, #16]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f2a:	e009      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	74bb      	strb	r3, [r7, #18]
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005f32:	bf00      	nop
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f40:	7c7b      	ldrb	r3, [r7, #17]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d105      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f46:	4bac      	ldr	r3, [pc, #688]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	4aab      	ldr	r2, [pc, #684]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f5e:	4ba6      	ldr	r3, [pc, #664]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f023 0203 	bic.w	r2, r3, #3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	49a2      	ldr	r1, [pc, #648]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f80:	4b9d      	ldr	r3, [pc, #628]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f023 020c 	bic.w	r2, r3, #12
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	499a      	ldr	r1, [pc, #616]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fa2:	4b95      	ldr	r3, [pc, #596]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	4991      	ldr	r1, [pc, #580]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fc4:	4b8c      	ldr	r3, [pc, #560]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	4989      	ldr	r1, [pc, #548]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fe6:	4b84      	ldr	r3, [pc, #528]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	4980      	ldr	r1, [pc, #512]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006008:	4b7b      	ldr	r3, [pc, #492]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	4978      	ldr	r1, [pc, #480]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602a:	4b73      	ldr	r3, [pc, #460]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006038:	496f      	ldr	r1, [pc, #444]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800604c:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	4967      	ldr	r1, [pc, #412]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800606e:	4b62      	ldr	r3, [pc, #392]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	495e      	ldr	r1, [pc, #376]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006090:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	4956      	ldr	r1, [pc, #344]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060b2:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b8:	f023 0203 	bic.w	r2, r3, #3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	494d      	ldr	r1, [pc, #308]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d028      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d4:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	4945      	ldr	r1, [pc, #276]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f2:	d106      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f4:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4a3f      	ldr	r2, [pc, #252]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fe:	60d3      	str	r3, [r2, #12]
 8006100:	e011      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800610a:	d10c      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	2101      	movs	r1, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f872 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8006122:	7cfb      	ldrb	r3, [r7, #19]
 8006124:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d028      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006138:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	492d      	ldr	r1, [pc, #180]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006150:	d106      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615c:	60d3      	str	r3, [r2, #12]
 800615e:	e011      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006168:	d10c      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2101      	movs	r1, #1
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f843 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800617a:	7cfb      	ldrb	r3, [r7, #19]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01c      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	4916      	ldr	r1, [pc, #88]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ae:	d10c      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	2102      	movs	r1, #2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f820 	bl	80061fc <RCCEx_PLLSAI1_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
 80061c8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	4904      	ldr	r1, [pc, #16]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000

080061fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800620a:	4b74      	ldr	r3, [pc, #464]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006216:	4b71      	ldr	r3, [pc, #452]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0203 	and.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d10d      	bne.n	8006242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
       ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800622e:	4b6b      	ldr	r3, [pc, #428]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
       ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d047      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	e044      	b.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d018      	beq.n	8006282 <RCCEx_PLLSAI1_Config+0x86>
 8006250:	2b03      	cmp	r3, #3
 8006252:	d825      	bhi.n	80062a0 <RCCEx_PLLSAI1_Config+0xa4>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d002      	beq.n	800625e <RCCEx_PLLSAI1_Config+0x62>
 8006258:	2b02      	cmp	r3, #2
 800625a:	d009      	beq.n	8006270 <RCCEx_PLLSAI1_Config+0x74>
 800625c:	e020      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800625e:	4b5f      	ldr	r3, [pc, #380]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11d      	bne.n	80062a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626e:	e01a      	b.n	80062a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006270:	4b5a      	ldr	r3, [pc, #360]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006280:	e013      	b.n	80062aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006282:	4b56      	ldr	r3, [pc, #344]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800628e:	4b53      	ldr	r3, [pc, #332]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800629e:	e006      	b.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e004      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062b6:	4b49      	ldr	r3, [pc, #292]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6819      	ldr	r1, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	430b      	orrs	r3, r1
 80062cc:	4943      	ldr	r1, [pc, #268]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d17c      	bne.n	80063d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062d8:	4b40      	ldr	r3, [pc, #256]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a3f      	ldr	r2, [pc, #252]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80062de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fd fb2a 	bl	800393c <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062ea:	e009      	b.n	8006300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ec:	f7fd fb26 	bl	800393c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d902      	bls.n	8006300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
        break;
 80062fe:	e005      	b.n	800630c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ef      	bne.n	80062ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d15f      	bne.n	80063d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d110      	bne.n	800633a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006320:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	0211      	lsls	r1, r2, #8
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68d2      	ldr	r2, [r2, #12]
 800632e:	06d2      	lsls	r2, r2, #27
 8006330:	430a      	orrs	r2, r1
 8006332:	492a      	ldr	r1, [pc, #168]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]
 8006338:	e027      	b.n	800638a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d112      	bne.n	8006366 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006340:	4b26      	ldr	r3, [pc, #152]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6892      	ldr	r2, [r2, #8]
 8006350:	0211      	lsls	r1, r2, #8
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6912      	ldr	r2, [r2, #16]
 8006356:	0852      	lsrs	r2, r2, #1
 8006358:	3a01      	subs	r2, #1
 800635a:	0552      	lsls	r2, r2, #21
 800635c:	430a      	orrs	r2, r1
 800635e:	491f      	ldr	r1, [pc, #124]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]
 8006364:	e011      	b.n	800638a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800636e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6892      	ldr	r2, [r2, #8]
 8006376:	0211      	lsls	r1, r2, #8
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6952      	ldr	r2, [r2, #20]
 800637c:	0852      	lsrs	r2, r2, #1
 800637e:	3a01      	subs	r2, #1
 8006380:	0652      	lsls	r2, r2, #25
 8006382:	430a      	orrs	r2, r1
 8006384:	4915      	ldr	r1, [pc, #84]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a13      	ldr	r2, [pc, #76]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006394:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006396:	f7fd fad1 	bl	800393c <HAL_GetTick>
 800639a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800639c:	e009      	b.n	80063b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800639e:	f7fd facd 	bl	800393c <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d902      	bls.n	80063b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	73fb      	strb	r3, [r7, #15]
          break;
 80063b0:	e005      	b.n	80063be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0ef      	beq.n	800639e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000

080063e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e095      	b.n	800651e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d009      	beq.n	8006418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
 800640a:	e005      	b.n	8006418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fc fb18 	bl	8002a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006458:	d902      	bls.n	8006460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e002      	b.n	8006466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800646e:	d007      	beq.n	8006480 <HAL_SPI_Init+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006478:	d002      	beq.n	8006480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f003 0204 	and.w	r2, r3, #4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064fc:	ea42 0103 	orr.w	r1, r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b088      	sub	sp, #32
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_SPI_Transmit+0x22>
 8006544:	2302      	movs	r3, #2
 8006546:	e158      	b.n	80067fa <HAL_SPI_Transmit+0x2d4>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006550:	f7fd f9f4 	bl	800393c <HAL_GetTick>
 8006554:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d002      	beq.n	800656c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
    goto error;
 800656a:	e13d      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x52>
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800657c:	e134      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2203      	movs	r2, #3
 8006582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c8:	d10f      	bne.n	80065ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d007      	beq.n	8006608 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006610:	d94b      	bls.n	80066aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_SPI_Transmit+0xfa>
 800661a:	8afb      	ldrh	r3, [r7, #22]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d13e      	bne.n	800669e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006644:	e02b      	b.n	800669e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d112      	bne.n	800667a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	881a      	ldrh	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	1c9a      	adds	r2, r3, #2
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006678:	e011      	b.n	800669e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667a:	f7fd f95f 	bl	800393c <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d803      	bhi.n	8006692 <HAL_SPI_Transmit+0x16c>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Transmit+0x172>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800669c:	e0a4      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1ce      	bne.n	8006646 <HAL_SPI_Transmit+0x120>
 80066a8:	e07c      	b.n	80067a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_Transmit+0x192>
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d170      	bne.n	800679a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d912      	bls.n	80066e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	881a      	ldrh	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	1c9a      	adds	r2, r3, #2
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b02      	subs	r3, #2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066e6:	e058      	b.n	800679a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800670e:	e044      	b.n	800679a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d12b      	bne.n	8006776 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d912      	bls.n	800674e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	1c9a      	adds	r2, r3, #2
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b02      	subs	r3, #2
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800674c:	e025      	b.n	800679a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006774:	e011      	b.n	800679a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006776:	f7fd f8e1 	bl	800393c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d803      	bhi.n	800678e <HAL_SPI_Transmit+0x268>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d102      	bne.n	8006794 <HAL_SPI_Transmit+0x26e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006798:	e026      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1b5      	bne.n	8006710 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fc6d 	bl	8007088 <SPI_EndRxTxTransaction>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e000      	b.n	80067e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80067e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b08a      	sub	sp, #40	; 0x28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006810:	2301      	movs	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x26>
 8006824:	2302      	movs	r3, #2
 8006826:	e1fb      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x41e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006830:	f7fd f884 	bl	800393c <HAL_GetTick>
 8006834:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800683c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006844:	887b      	ldrh	r3, [r7, #2]
 8006846:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800684c:	7efb      	ldrb	r3, [r7, #27]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d00e      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x6e>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006858:	d106      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x66>
 8006862:	7efb      	ldrb	r3, [r7, #27]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d003      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800686e:	e1cd      	b.n	8006c0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x80>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x80>
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006888:	e1c0      	b.n	8006c0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b04      	cmp	r3, #4
 8006894:	d003      	beq.n	800689e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2205      	movs	r2, #5
 800689a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	887a      	ldrh	r2, [r7, #2]
 80068ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	887a      	ldrh	r2, [r7, #2]
 80068b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	887a      	ldrh	r2, [r7, #2]
 80068c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	887a      	ldrh	r2, [r7, #2]
 80068ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e0:	d802      	bhi.n	80068e8 <HAL_SPI_TransmitReceive+0xe6>
 80068e2:	8a3b      	ldrh	r3, [r7, #16]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d908      	bls.n	80068fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068f6:	605a      	str	r2, [r3, #4]
 80068f8:	e007      	b.n	800690a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d007      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006930:	d97c      	bls.n	8006a2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_SPI_TransmitReceive+0x13e>
 800693a:	8a7b      	ldrh	r3, [r7, #18]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d169      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	881a      	ldrh	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006964:	e056      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d11b      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x1aa>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x1aa>
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b01      	cmp	r3, #1
 8006982:	d113      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	881a      	ldrh	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	1c9a      	adds	r2, r3, #2
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d11c      	bne.n	80069f4 <HAL_SPI_TransmitReceive+0x1f2>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	b292      	uxth	r2, r2
 80069d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f0:	2301      	movs	r3, #1
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069f4:	f7fc ffa2 	bl	800393c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d807      	bhi.n	8006a14 <HAL_SPI_TransmitReceive+0x212>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d003      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a12:	e0fb      	b.n	8006c0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1a3      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x164>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d19d      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x164>
 8006a2a:	e0df      	b.n	8006bec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_SPI_TransmitReceive+0x23a>
 8006a34:	8a7b      	ldrh	r3, [r7, #18]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	f040 80cb 	bne.w	8006bd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d912      	bls.n	8006a6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	881a      	ldrh	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b02      	subs	r3, #2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a6a:	e0b2      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a92:	e09e      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d134      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x30a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02f      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x30a>
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d12c      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d912      	bls.n	8006ae2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b02      	subs	r3, #2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ae0:	e012      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d148      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x3aa>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d042      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d923      	bls.n	8006b7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	1c9a      	adds	r2, r3, #2
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b02      	subs	r3, #2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d81f      	bhi.n	8006ba8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	e016      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f103 020c 	add.w	r2, r3, #12
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bac:	f7fc fec6 	bl	800393c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d803      	bhi.n	8006bc4 <HAL_SPI_TransmitReceive+0x3c2>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x3c8>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bd0:	e01c      	b.n	8006c0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f af5b 	bne.w	8006a94 <HAL_SPI_TransmitReceive+0x292>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f47f af54 	bne.w	8006a94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa49 	bl	8007088 <SPI_EndRxTxTransaction>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60
 8006c08:	e000      	b.n	8006c0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3728      	adds	r7, #40	; 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	099b      	lsrs	r3, r3, #6
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10f      	bne.n	8006c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	099b      	lsrs	r3, r3, #6
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
    return;
 8006c6a:	e0d7      	b.n	8006e1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <HAL_SPI_IRQHandler+0x66>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	09db      	lsrs	r3, r3, #7
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
    return;
 8006c8c:	e0c6      	b.n	8006e1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10c      	bne.n	8006cb4 <HAL_SPI_IRQHandler+0x8c>
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	099b      	lsrs	r3, r3, #6
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80b4 	beq.w	8006e1c <HAL_SPI_IRQHandler+0x1f4>
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80ad 	beq.w	8006e1c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	099b      	lsrs	r3, r3, #6
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d023      	beq.n	8006d16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d011      	beq.n	8006cfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cde:	f043 0204 	orr.w	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	e00b      	b.n	8006d16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	693b      	ldr	r3, [r7, #16]
        return;
 8006d14:	e082      	b.n	8006e1c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d014      	beq.n	8006d4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5c:	f043 0208 	orr.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d64:	2300      	movs	r3, #0
 8006d66:	60bb      	str	r3, [r7, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d04f      	beq.n	8006e1a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <HAL_SPI_IRQHandler+0x17e>
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d034      	beq.n	8006e10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0203 	bic.w	r2, r2, #3
 8006db4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d011      	beq.n	8006de2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <HAL_SPI_IRQHandler+0x1fc>)
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd fa75 	bl	80042ba <HAL_DMA_Abort_IT>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <HAL_SPI_IRQHandler+0x1fc>)
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fd fa5f 	bl	80042ba <HAL_DMA_Abort_IT>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e0e:	e003      	b.n	8006e18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7fc fbe1 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e16:	e000      	b.n	8006e1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e18:	bf00      	nop
    return;
 8006e1a:	bf00      	nop
  }
}
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	08006e29 	.word	0x08006e29

08006e28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7fc fbc7 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	4613      	mov	r3, r2
 8006e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e64:	f7fc fd6a 	bl	800393c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4413      	add	r3, r2
 8006e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e74:	f7fc fd62 	bl	800393c <HAL_GetTick>
 8006e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e7a:	4b39      	ldr	r3, [pc, #228]	; (8006f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	015b      	lsls	r3, r3, #5
 8006e80:	0d1b      	lsrs	r3, r3, #20
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e8a:	e054      	b.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d050      	beq.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e94:	f7fc fd52 	bl	800393c <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d902      	bls.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d13d      	bne.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec2:	d111      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ecc:	d004      	beq.n	8006ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed6:	d107      	bne.n	8006ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d10f      	bne.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e017      	b.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d19b      	bne.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200004bc 	.word	0x200004bc

08006f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f72:	f7fc fce3 	bl	800393c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f82:	f7fc fcdb 	bl	800393c <HAL_GetTick>
 8006f86:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f88:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	00da      	lsls	r2, r3, #3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	0d1b      	lsrs	r3, r3, #20
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fa0:	e062      	b.n	8007068 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fa8:	d109      	bne.n	8006fbe <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006fbc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d050      	beq.n	8007068 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fc6:	f7fc fcb9 	bl	800393c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d902      	bls.n	8006fdc <SPI_WaitFifoStateUntilTimeout+0x78>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d13d      	bne.n	8007058 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff4:	d111      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffe:	d004      	beq.n	800700a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007008:	d107      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	d10f      	bne.n	8007044 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007042:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e010      	b.n	800707a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4013      	ands	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	429a      	cmp	r2, r3
 8007076:	d194      	bne.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200004bc 	.word	0x200004bc

08007088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff ff5f 	bl	8006f64 <SPI_WaitFifoStateUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	f043 0220 	orr.w	r2, r3, #32
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e027      	b.n	800710c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	2180      	movs	r1, #128	; 0x80
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fec4 	bl	8006e54 <SPI_WaitFlagStateUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e014      	b.n	800710c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff ff38 	bl	8006f64 <SPI_WaitFifoStateUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fe:	f043 0220 	orr.w	r2, r3, #32
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e000      	b.n	800710c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e049      	b.n	80071ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fb fd18 	bl	8002b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f000 fb6c 	bl	8007830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d001      	beq.n	80071dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e040      	b.n	800725e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <HAL_TIM_Base_Start_IT+0xa8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00e      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007206:	d009      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_TIM_Base_Start_IT+0xac>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <HAL_TIM_Base_Start_IT+0xb0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d115      	bne.n	8007248 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <HAL_TIM_Base_Start_IT+0xb4>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b06      	cmp	r3, #6
 800722c:	d015      	beq.n	800725a <HAL_TIM_Base_Start_IT+0x96>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007234:	d011      	beq.n	800725a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007246:	e008      	b.n	800725a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e000      	b.n	800725c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40000400 	.word	0x40000400
 8007274:	40014000 	.word	0x40014000
 8007278:	00010007 	.word	0x00010007

0800727c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e049      	b.n	8007322 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f841 	bl	800732a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 fab8 	bl	8007830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d122      	bne.n	800739a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d11b      	bne.n	800739a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f06f 0202 	mvn.w	r2, #2
 800736a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa37 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 8007386:	e005      	b.n	8007394 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fc f8fb 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa3a 	bl	8007808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d122      	bne.n	80073ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d11b      	bne.n	80073ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0204 	mvn.w	r2, #4
 80073be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa0d 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 80073da:	e005      	b.n	80073e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fc f8d1 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa10 	bl	8007808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d122      	bne.n	8007442 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b08      	cmp	r3, #8
 8007408:	d11b      	bne.n	8007442 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f06f 0208 	mvn.w	r2, #8
 8007412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2204      	movs	r2, #4
 8007418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9e3 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 800742e:	e005      	b.n	800743c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fc f8a7 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9e6 	bl	8007808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b10      	cmp	r3, #16
 800744e:	d122      	bne.n	8007496 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	2b10      	cmp	r3, #16
 800745c:	d11b      	bne.n	8007496 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f06f 0210 	mvn.w	r2, #16
 8007466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2208      	movs	r2, #8
 800746c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9b9 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 8007482:	e005      	b.n	8007490 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7fc f87d 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9bc 	bl	8007808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d10e      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0201 	mvn.w	r2, #1
 80074ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fb fd17 	bl	8002ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	2b80      	cmp	r3, #128	; 0x80
 80074ce:	d10e      	bne.n	80074ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d107      	bne.n	80074ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fe17 	bl	800811c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fc:	d10e      	bne.n	800751c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007508:	2b80      	cmp	r3, #128	; 0x80
 800750a:	d107      	bne.n	800751c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fe0a 	bl	8008130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d10e      	bne.n	8007548 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d107      	bne.n	8007548 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f96a 	bl	800781c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b20      	cmp	r3, #32
 8007554:	d10e      	bne.n	8007574 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b20      	cmp	r3, #32
 8007562:	d107      	bne.n	8007574 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0220 	mvn.w	r2, #32
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fdca 	bl	8008108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007592:	2302      	movs	r3, #2
 8007594:	e064      	b.n	8007660 <HAL_TIM_OC_ConfigChannel+0xe4>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b14      	cmp	r3, #20
 80075a2:	d857      	bhi.n	8007654 <HAL_TIM_OC_ConfigChannel+0xd8>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <HAL_TIM_OC_ConfigChannel+0x30>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	08007601 	.word	0x08007601
 80075b0:	08007655 	.word	0x08007655
 80075b4:	08007655 	.word	0x08007655
 80075b8:	08007655 	.word	0x08007655
 80075bc:	0800760f 	.word	0x0800760f
 80075c0:	08007655 	.word	0x08007655
 80075c4:	08007655 	.word	0x08007655
 80075c8:	08007655 	.word	0x08007655
 80075cc:	0800761d 	.word	0x0800761d
 80075d0:	08007655 	.word	0x08007655
 80075d4:	08007655 	.word	0x08007655
 80075d8:	08007655 	.word	0x08007655
 80075dc:	0800762b 	.word	0x0800762b
 80075e0:	08007655 	.word	0x08007655
 80075e4:	08007655 	.word	0x08007655
 80075e8:	08007655 	.word	0x08007655
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007655 	.word	0x08007655
 80075f4:	08007655 	.word	0x08007655
 80075f8:	08007655 	.word	0x08007655
 80075fc:	08007647 	.word	0x08007647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f980 	bl	800790c <TIM_OC1_SetConfig>
      break;
 800760c:	e023      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 f9f5 	bl	8007a04 <TIM_OC2_SetConfig>
      break;
 800761a:	e01c      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fa68 	bl	8007af8 <TIM_OC3_SetConfig>
      break;
 8007628:	e015      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fad9 	bl	8007be8 <TIM_OC4_SetConfig>
      break;
 8007636:	e00e      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fb30 	bl	8007ca4 <TIM_OC5_SetConfig>
      break;
 8007644:	e007      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb81 	bl	8007d54 <TIM_OC6_SetConfig>
      break;
 8007652:	e000      	b.n	8007656 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8007654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIM_ConfigClockSource+0x18>
 800767c:	2302      	movs	r3, #2
 800767e:	e0b5      	b.n	80077ec <HAL_TIM_ConfigClockSource+0x184>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800769e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076bc:	d03e      	beq.n	800773c <HAL_TIM_ConfigClockSource+0xd4>
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	f200 8087 	bhi.w	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ca:	f000 8085 	beq.w	80077d8 <HAL_TIM_ConfigClockSource+0x170>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d87f      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076d4:	2b70      	cmp	r3, #112	; 0x70
 80076d6:	d01a      	beq.n	800770e <HAL_TIM_ConfigClockSource+0xa6>
 80076d8:	2b70      	cmp	r3, #112	; 0x70
 80076da:	d87b      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076dc:	2b60      	cmp	r3, #96	; 0x60
 80076de:	d050      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x11a>
 80076e0:	2b60      	cmp	r3, #96	; 0x60
 80076e2:	d877      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076e4:	2b50      	cmp	r3, #80	; 0x50
 80076e6:	d03c      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0xfa>
 80076e8:	2b50      	cmp	r3, #80	; 0x50
 80076ea:	d873      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076ec:	2b40      	cmp	r3, #64	; 0x40
 80076ee:	d058      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x13a>
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d86f      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076f4:	2b30      	cmp	r3, #48	; 0x30
 80076f6:	d064      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0x15a>
 80076f8:	2b30      	cmp	r3, #48	; 0x30
 80076fa:	d86b      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d060      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d867      	bhi.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d05c      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007708:	2b10      	cmp	r3, #16
 800770a:	d05a      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800770c:	e062      	b.n	80077d4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6899      	ldr	r1, [r3, #8]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f000 fbed 	bl	8007efc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007730:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	609a      	str	r2, [r3, #8]
      break;
 800773a:	e04e      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	6899      	ldr	r1, [r3, #8]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f000 fbd6 	bl	8007efc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800775e:	609a      	str	r2, [r3, #8]
      break;
 8007760:	e03b      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	461a      	mov	r2, r3
 8007770:	f000 fb4a 	bl	8007e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2150      	movs	r1, #80	; 0x50
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fba3 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 8007780:	e02b      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	461a      	mov	r2, r3
 8007790:	f000 fb69 	bl	8007e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2160      	movs	r1, #96	; 0x60
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fb93 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 80077a0:	e01b      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6859      	ldr	r1, [r3, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f000 fb2a 	bl	8007e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2140      	movs	r1, #64	; 0x40
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fb83 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 80077c0:	e00b      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f000 fb7a 	bl	8007ec6 <TIM_ITRx_SetConfig>
        break;
 80077d2:	e002      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      break;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <HAL_TIM_ConfigClockSource+0x172>
      break;
 80077d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2e      	ldr	r2, [pc, #184]	; (80078fc <TIM_Base_SetConfig+0xcc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <TIM_Base_SetConfig+0x28>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0x28>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a2b      	ldr	r2, [pc, #172]	; (8007900 <TIM_Base_SetConfig+0xd0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <TIM_Base_SetConfig+0xcc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <TIM_Base_SetConfig+0x62>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d00b      	beq.n	8007892 <TIM_Base_SetConfig+0x62>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a20      	ldr	r2, [pc, #128]	; (8007900 <TIM_Base_SetConfig+0xd0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <TIM_Base_SetConfig+0x62>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <TIM_Base_SetConfig+0xd4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_Base_SetConfig+0x62>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <TIM_Base_SetConfig+0xd8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a0c      	ldr	r2, [pc, #48]	; (80078fc <TIM_Base_SetConfig+0xcc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_Base_SetConfig+0xb0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <TIM_Base_SetConfig+0xd4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_Base_SetConfig+0xb0>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <TIM_Base_SetConfig+0xd8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	615a      	str	r2, [r3, #20]
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40000400 	.word	0x40000400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400

0800790c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f023 0201 	bic.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800793a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f023 0302 	bic.w	r3, r3, #2
 8007958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a24      	ldr	r2, [pc, #144]	; (80079f8 <TIM_OC1_SetConfig+0xec>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d007      	beq.n	800797c <TIM_OC1_SetConfig+0x70>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a23      	ldr	r2, [pc, #140]	; (80079fc <TIM_OC1_SetConfig+0xf0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC1_SetConfig+0x70>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_OC1_SetConfig+0xf4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10c      	bne.n	8007996 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0308 	bic.w	r3, r3, #8
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <TIM_OC1_SetConfig+0xec>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_OC1_SetConfig+0xa2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a16      	ldr	r2, [pc, #88]	; (80079fc <TIM_OC1_SetConfig+0xf0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC1_SetConfig+0xa2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <TIM_OC1_SetConfig+0xf4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d111      	bne.n	80079d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	621a      	str	r2, [r3, #32]
}
 80079ec:	bf00      	nop
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400

08007a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f023 0210 	bic.w	r2, r3, #16
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0320 	bic.w	r3, r3, #32
 8007a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a22      	ldr	r2, [pc, #136]	; (8007aec <TIM_OC2_SetConfig+0xe8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d10d      	bne.n	8007a84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a19      	ldr	r2, [pc, #100]	; (8007aec <TIM_OC2_SetConfig+0xe8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC2_SetConfig+0x98>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <TIM_OC2_SetConfig+0xec>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC2_SetConfig+0x98>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <TIM_OC2_SetConfig+0xf0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d113      	bne.n	8007ac4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400

08007af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a21      	ldr	r2, [pc, #132]	; (8007bdc <TIM_OC3_SetConfig+0xe4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10d      	bne.n	8007b76 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a18      	ldr	r2, [pc, #96]	; (8007bdc <TIM_OC3_SetConfig+0xe4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d007      	beq.n	8007b8e <TIM_OC3_SetConfig+0x96>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a17      	ldr	r2, [pc, #92]	; (8007be0 <TIM_OC3_SetConfig+0xe8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d003      	beq.n	8007b8e <TIM_OC3_SetConfig+0x96>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <TIM_OC3_SetConfig+0xec>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d113      	bne.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	621a      	str	r2, [r3, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40012c00 	.word	0x40012c00
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400

08007be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	031b      	lsls	r3, r3, #12
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <TIM_OC4_SetConfig+0xb0>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_OC4_SetConfig+0x74>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <TIM_OC4_SetConfig+0xb4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC4_SetConfig+0x74>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <TIM_OC4_SetConfig+0xb8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d109      	bne.n	8007c70 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	019b      	lsls	r3, r3, #6
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40012c00 	.word	0x40012c00
 8007c9c:	40014000 	.word	0x40014000
 8007ca0:	40014400 	.word	0x40014400

08007ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <TIM_OC5_SetConfig+0xa4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_OC5_SetConfig+0x6a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <TIM_OC5_SetConfig+0xa8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC5_SetConfig+0x6a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a11      	ldr	r2, [pc, #68]	; (8007d50 <TIM_OC5_SetConfig+0xac>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d109      	bne.n	8007d22 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	621a      	str	r2, [r3, #32]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40014400 	.word	0x40014400

08007d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	051b      	lsls	r3, r3, #20
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <TIM_OC6_SetConfig+0xa8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_OC6_SetConfig+0x6c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <TIM_OC6_SetConfig+0xac>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC6_SetConfig+0x6c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <TIM_OC6_SetConfig+0xb0>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	029b      	lsls	r3, r3, #10
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40012c00 	.word	0x40012c00
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40014400 	.word	0x40014400

08007e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f023 030a 	bic.w	r3, r3, #10
 8007e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b087      	sub	sp, #28
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0210 	bic.w	r2, r3, #16
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	031b      	lsls	r3, r3, #12
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f043 0307 	orr.w	r3, r3, #7
 8007ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	021a      	lsls	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	609a      	str	r2, [r3, #8]
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e054      	b.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a24      	ldr	r2, [pc, #144]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d108      	bne.n	8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a13      	ldr	r2, [pc, #76]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a11      	ldr	r2, [pc, #68]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10c      	bne.n	8007fec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40000400 	.word	0x40000400
 8008014:	40014000 	.word	0x40014000

08008018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008030:	2302      	movs	r3, #2
 8008032:	e060      	b.n	80080f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a14      	ldr	r2, [pc, #80]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d115      	bne.n	80080e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	051b      	lsls	r3, r3, #20
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40012c00 	.word	0x40012c00

08008108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e040      	b.n	80081d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7fa fd58 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2224      	movs	r2, #36	; 0x24
 8008170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0201 	bic.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa44 	bl	8008610 <UART_SetConfig>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e022      	b.n	80081d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc94 	bl	8008ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fd1b 	bl	8008c0c <UART_CheckIdleState>
 80081d6:	4603      	mov	r3, r0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	f640 030f 	movw	r3, #2063	; 0x80f
 8008206:	4013      	ands	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d113      	bne.n	8008238 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 81ce 	beq.w	80085ca <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
      }
      return;
 8008236:	e1c8      	b.n	80085ca <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80e3 	beq.w	8008406 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d105      	bne.n	8008256 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	4ba6      	ldr	r3, [pc, #664]	; (80084e8 <HAL_UART_IRQHandler+0x308>)
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80d8 	beq.w	8008406 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d010      	beq.n	8008282 <HAL_UART_IRQHandler+0xa2>
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2201      	movs	r2, #1
 8008270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d010      	beq.n	80082ae <HAL_UART_IRQHandler+0xce>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2202      	movs	r2, #2
 800829c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a4:	f043 0204 	orr.w	r2, r3, #4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d010      	beq.n	80082da <HAL_UART_IRQHandler+0xfa>
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2204      	movs	r2, #4
 80082c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d0:	f043 0202 	orr.w	r2, r3, #2
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d015      	beq.n	8008310 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00b      	beq.n	8008310 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2208      	movs	r2, #8
 80082fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008306:	f043 0208 	orr.w	r2, r3, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008316:	2b00      	cmp	r3, #0
 8008318:	d011      	beq.n	800833e <HAL_UART_IRQHandler+0x15e>
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800832c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008334:	f043 0220 	orr.w	r2, r3, #32
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8142 	beq.w	80085ce <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008374:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008380:	2b40      	cmp	r3, #64	; 0x40
 8008382:	d004      	beq.n	800838e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800838a:	2b00      	cmp	r3, #0
 800838c:	d031      	beq.n	80083f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fd01 	bl	8008d96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d123      	bne.n	80083ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d013      	beq.n	80083e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	4a4b      	ldr	r2, [pc, #300]	; (80084ec <HAL_UART_IRQHandler+0x30c>)
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fb ff77 	bl	80042ba <HAL_DMA_Abort_IT>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e0:	e00f      	b.n	8008402 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8fe 	bl	80085e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e8:	e00b      	b.n	8008402 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8fa 	bl	80085e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f0:	e007      	b.n	8008402 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8f6 	bl	80085e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008400:	e0e5      	b.n	80085ce <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008402:	bf00      	nop
    return;
 8008404:	e0e3      	b.n	80085ce <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800840a:	2b01      	cmp	r3, #1
 800840c:	f040 80a9 	bne.w	8008562 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80a3 	beq.w	8008562 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 809d 	beq.w	8008562 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2210      	movs	r2, #16
 800842e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d158      	bne.n	80084f0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008448:	893b      	ldrh	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80c1 	beq.w	80085d2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008456:	893a      	ldrh	r2, [r7, #8]
 8008458:	429a      	cmp	r2, r3
 800845a:	f080 80ba 	bcs.w	80085d2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	893a      	ldrh	r2, [r7, #8]
 8008462:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d12a      	bne.n	80084cc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008484:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0201 	bic.w	r2, r2, #1
 8008494:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0210 	bic.w	r2, r2, #16
 80084c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fb feb9 	bl	800423e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f889 	bl	80085f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80084e6:	e074      	b.n	80085d2 <HAL_UART_IRQHandler+0x3f2>
 80084e8:	04000120 	.word	0x04000120
 80084ec:	08008df5 	.word	0x08008df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d063      	beq.n	80085d6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800850e:	897b      	ldrh	r3, [r7, #10]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d060      	beq.n	80085d6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008522:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0210 	bic.w	r2, r2, #16
 8008554:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008556:	897b      	ldrh	r3, [r7, #10]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f84c 	bl	80085f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008560:	e039      	b.n	80085d6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <HAL_UART_IRQHandler+0x3a8>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800857e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc66 	bl	8008e52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008586:	e029      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00d      	beq.n	80085ae <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008598:	2b00      	cmp	r3, #0
 800859a:	d008      	beq.n	80085ae <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01a      	beq.n	80085da <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
    }
    return;
 80085ac:	e015      	b.n	80085da <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d011      	beq.n	80085dc <HAL_UART_IRQHandler+0x3fc>
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00c      	beq.n	80085dc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc2c 	bl	8008e20 <UART_EndTransmit_IT>
    return;
 80085c8:	e008      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80085ca:	bf00      	nop
 80085cc:	e006      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80085ce:	bf00      	nop
 80085d0:	e004      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80085d2:	bf00      	nop
 80085d4:	e002      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80085d6:	bf00      	nop
 80085d8:	e000      	b.n	80085dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80085da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop

080085e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008610:	b5b0      	push	{r4, r5, r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	4313      	orrs	r3, r2
 8008632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4ba4      	ldr	r3, [pc, #656]	; (80088cc <UART_SetConfig+0x2bc>)
 800863c:	4013      	ands	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6812      	ldr	r2, [r2, #0]
 8008642:	69f9      	ldr	r1, [r7, #28]
 8008644:	430b      	orrs	r3, r1
 8008646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a99      	ldr	r2, [pc, #612]	; (80088d0 <UART_SetConfig+0x2c0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d004      	beq.n	8008678 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	430a      	orrs	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a90      	ldr	r2, [pc, #576]	; (80088d4 <UART_SetConfig+0x2c4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d121      	bne.n	80086da <UART_SetConfig+0xca>
 8008696:	4b90      	ldr	r3, [pc, #576]	; (80088d8 <UART_SetConfig+0x2c8>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d817      	bhi.n	80086d4 <UART_SetConfig+0xc4>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x9c>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086c3 	.word	0x080086c3
 80086b8:	080086cf 	.word	0x080086cf
 80086bc:	2301      	movs	r3, #1
 80086be:	76fb      	strb	r3, [r7, #27]
 80086c0:	e0bc      	b.n	800883c <UART_SetConfig+0x22c>
 80086c2:	2302      	movs	r3, #2
 80086c4:	76fb      	strb	r3, [r7, #27]
 80086c6:	e0b9      	b.n	800883c <UART_SetConfig+0x22c>
 80086c8:	2304      	movs	r3, #4
 80086ca:	76fb      	strb	r3, [r7, #27]
 80086cc:	e0b6      	b.n	800883c <UART_SetConfig+0x22c>
 80086ce:	2308      	movs	r3, #8
 80086d0:	76fb      	strb	r3, [r7, #27]
 80086d2:	e0b3      	b.n	800883c <UART_SetConfig+0x22c>
 80086d4:	2310      	movs	r3, #16
 80086d6:	76fb      	strb	r3, [r7, #27]
 80086d8:	e0b0      	b.n	800883c <UART_SetConfig+0x22c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a7f      	ldr	r2, [pc, #508]	; (80088dc <UART_SetConfig+0x2cc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d132      	bne.n	800874a <UART_SetConfig+0x13a>
 80086e4:	4b7c      	ldr	r3, [pc, #496]	; (80088d8 <UART_SetConfig+0x2c8>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d828      	bhi.n	8008744 <UART_SetConfig+0x134>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0xe8>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	0800872d 	.word	0x0800872d
 80086fc:	08008745 	.word	0x08008745
 8008700:	08008745 	.word	0x08008745
 8008704:	08008745 	.word	0x08008745
 8008708:	08008739 	.word	0x08008739
 800870c:	08008745 	.word	0x08008745
 8008710:	08008745 	.word	0x08008745
 8008714:	08008745 	.word	0x08008745
 8008718:	08008733 	.word	0x08008733
 800871c:	08008745 	.word	0x08008745
 8008720:	08008745 	.word	0x08008745
 8008724:	08008745 	.word	0x08008745
 8008728:	0800873f 	.word	0x0800873f
 800872c:	2300      	movs	r3, #0
 800872e:	76fb      	strb	r3, [r7, #27]
 8008730:	e084      	b.n	800883c <UART_SetConfig+0x22c>
 8008732:	2302      	movs	r3, #2
 8008734:	76fb      	strb	r3, [r7, #27]
 8008736:	e081      	b.n	800883c <UART_SetConfig+0x22c>
 8008738:	2304      	movs	r3, #4
 800873a:	76fb      	strb	r3, [r7, #27]
 800873c:	e07e      	b.n	800883c <UART_SetConfig+0x22c>
 800873e:	2308      	movs	r3, #8
 8008740:	76fb      	strb	r3, [r7, #27]
 8008742:	e07b      	b.n	800883c <UART_SetConfig+0x22c>
 8008744:	2310      	movs	r3, #16
 8008746:	76fb      	strb	r3, [r7, #27]
 8008748:	e078      	b.n	800883c <UART_SetConfig+0x22c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a64      	ldr	r2, [pc, #400]	; (80088e0 <UART_SetConfig+0x2d0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d120      	bne.n	8008796 <UART_SetConfig+0x186>
 8008754:	4b60      	ldr	r3, [pc, #384]	; (80088d8 <UART_SetConfig+0x2c8>)
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800875e:	2b30      	cmp	r3, #48	; 0x30
 8008760:	d013      	beq.n	800878a <UART_SetConfig+0x17a>
 8008762:	2b30      	cmp	r3, #48	; 0x30
 8008764:	d814      	bhi.n	8008790 <UART_SetConfig+0x180>
 8008766:	2b20      	cmp	r3, #32
 8008768:	d009      	beq.n	800877e <UART_SetConfig+0x16e>
 800876a:	2b20      	cmp	r3, #32
 800876c:	d810      	bhi.n	8008790 <UART_SetConfig+0x180>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <UART_SetConfig+0x168>
 8008772:	2b10      	cmp	r3, #16
 8008774:	d006      	beq.n	8008784 <UART_SetConfig+0x174>
 8008776:	e00b      	b.n	8008790 <UART_SetConfig+0x180>
 8008778:	2300      	movs	r3, #0
 800877a:	76fb      	strb	r3, [r7, #27]
 800877c:	e05e      	b.n	800883c <UART_SetConfig+0x22c>
 800877e:	2302      	movs	r3, #2
 8008780:	76fb      	strb	r3, [r7, #27]
 8008782:	e05b      	b.n	800883c <UART_SetConfig+0x22c>
 8008784:	2304      	movs	r3, #4
 8008786:	76fb      	strb	r3, [r7, #27]
 8008788:	e058      	b.n	800883c <UART_SetConfig+0x22c>
 800878a:	2308      	movs	r3, #8
 800878c:	76fb      	strb	r3, [r7, #27]
 800878e:	e055      	b.n	800883c <UART_SetConfig+0x22c>
 8008790:	2310      	movs	r3, #16
 8008792:	76fb      	strb	r3, [r7, #27]
 8008794:	e052      	b.n	800883c <UART_SetConfig+0x22c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a52      	ldr	r2, [pc, #328]	; (80088e4 <UART_SetConfig+0x2d4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d120      	bne.n	80087e2 <UART_SetConfig+0x1d2>
 80087a0:	4b4d      	ldr	r3, [pc, #308]	; (80088d8 <UART_SetConfig+0x2c8>)
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087aa:	2bc0      	cmp	r3, #192	; 0xc0
 80087ac:	d013      	beq.n	80087d6 <UART_SetConfig+0x1c6>
 80087ae:	2bc0      	cmp	r3, #192	; 0xc0
 80087b0:	d814      	bhi.n	80087dc <UART_SetConfig+0x1cc>
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	d009      	beq.n	80087ca <UART_SetConfig+0x1ba>
 80087b6:	2b80      	cmp	r3, #128	; 0x80
 80087b8:	d810      	bhi.n	80087dc <UART_SetConfig+0x1cc>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <UART_SetConfig+0x1b4>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d006      	beq.n	80087d0 <UART_SetConfig+0x1c0>
 80087c2:	e00b      	b.n	80087dc <UART_SetConfig+0x1cc>
 80087c4:	2300      	movs	r3, #0
 80087c6:	76fb      	strb	r3, [r7, #27]
 80087c8:	e038      	b.n	800883c <UART_SetConfig+0x22c>
 80087ca:	2302      	movs	r3, #2
 80087cc:	76fb      	strb	r3, [r7, #27]
 80087ce:	e035      	b.n	800883c <UART_SetConfig+0x22c>
 80087d0:	2304      	movs	r3, #4
 80087d2:	76fb      	strb	r3, [r7, #27]
 80087d4:	e032      	b.n	800883c <UART_SetConfig+0x22c>
 80087d6:	2308      	movs	r3, #8
 80087d8:	76fb      	strb	r3, [r7, #27]
 80087da:	e02f      	b.n	800883c <UART_SetConfig+0x22c>
 80087dc:	2310      	movs	r3, #16
 80087de:	76fb      	strb	r3, [r7, #27]
 80087e0:	e02c      	b.n	800883c <UART_SetConfig+0x22c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a3a      	ldr	r2, [pc, #232]	; (80088d0 <UART_SetConfig+0x2c0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d125      	bne.n	8008838 <UART_SetConfig+0x228>
 80087ec:	4b3a      	ldr	r3, [pc, #232]	; (80088d8 <UART_SetConfig+0x2c8>)
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087fa:	d017      	beq.n	800882c <UART_SetConfig+0x21c>
 80087fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008800:	d817      	bhi.n	8008832 <UART_SetConfig+0x222>
 8008802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008806:	d00b      	beq.n	8008820 <UART_SetConfig+0x210>
 8008808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800880c:	d811      	bhi.n	8008832 <UART_SetConfig+0x222>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <UART_SetConfig+0x20a>
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008816:	d006      	beq.n	8008826 <UART_SetConfig+0x216>
 8008818:	e00b      	b.n	8008832 <UART_SetConfig+0x222>
 800881a:	2300      	movs	r3, #0
 800881c:	76fb      	strb	r3, [r7, #27]
 800881e:	e00d      	b.n	800883c <UART_SetConfig+0x22c>
 8008820:	2302      	movs	r3, #2
 8008822:	76fb      	strb	r3, [r7, #27]
 8008824:	e00a      	b.n	800883c <UART_SetConfig+0x22c>
 8008826:	2304      	movs	r3, #4
 8008828:	76fb      	strb	r3, [r7, #27]
 800882a:	e007      	b.n	800883c <UART_SetConfig+0x22c>
 800882c:	2308      	movs	r3, #8
 800882e:	76fb      	strb	r3, [r7, #27]
 8008830:	e004      	b.n	800883c <UART_SetConfig+0x22c>
 8008832:	2310      	movs	r3, #16
 8008834:	76fb      	strb	r3, [r7, #27]
 8008836:	e001      	b.n	800883c <UART_SetConfig+0x22c>
 8008838:	2310      	movs	r3, #16
 800883a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a23      	ldr	r2, [pc, #140]	; (80088d0 <UART_SetConfig+0x2c0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	f040 8084 	bne.w	8008950 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008848:	7efb      	ldrb	r3, [r7, #27]
 800884a:	2b08      	cmp	r3, #8
 800884c:	d823      	bhi.n	8008896 <UART_SetConfig+0x286>
 800884e:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <UART_SetConfig+0x244>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008879 	.word	0x08008879
 8008858:	08008897 	.word	0x08008897
 800885c:	08008881 	.word	0x08008881
 8008860:	08008897 	.word	0x08008897
 8008864:	08008887 	.word	0x08008887
 8008868:	08008897 	.word	0x08008897
 800886c:	08008897 	.word	0x08008897
 8008870:	08008897 	.word	0x08008897
 8008874:	0800888f 	.word	0x0800888f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008878:	f7fd f9fa 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 800887c:	6178      	str	r0, [r7, #20]
        break;
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <UART_SetConfig+0x2d8>)
 8008882:	617b      	str	r3, [r7, #20]
        break;
 8008884:	e00c      	b.n	80088a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008886:	f7fd f95b 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 800888a:	6178      	str	r0, [r7, #20]
        break;
 800888c:	e008      	b.n	80088a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008892:	617b      	str	r3, [r7, #20]
        break;
 8008894:	e004      	b.n	80088a0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	76bb      	strb	r3, [r7, #26]
        break;
 800889e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8102 	beq.w	8008aac <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d305      	bcc.n	80088c4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d913      	bls.n	80088ec <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	76bb      	strb	r3, [r7, #26]
 80088c8:	e0f0      	b.n	8008aac <UART_SetConfig+0x49c>
 80088ca:	bf00      	nop
 80088cc:	efff69f3 	.word	0xefff69f3
 80088d0:	40008000 	.word	0x40008000
 80088d4:	40013800 	.word	0x40013800
 80088d8:	40021000 	.word	0x40021000
 80088dc:	40004400 	.word	0x40004400
 80088e0:	40004800 	.word	0x40004800
 80088e4:	40004c00 	.word	0x40004c00
 80088e8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	020b      	lsls	r3, r1, #8
 80088fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008902:	0202      	lsls	r2, r0, #8
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	6849      	ldr	r1, [r1, #4]
 8008908:	0849      	lsrs	r1, r1, #1
 800890a:	4608      	mov	r0, r1
 800890c:	f04f 0100 	mov.w	r1, #0
 8008910:	1814      	adds	r4, r2, r0
 8008912:	eb43 0501 	adc.w	r5, r3, r1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	461a      	mov	r2, r3
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f8 f9e8 	bl	8000cf8 <__aeabi_uldivmod>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4613      	mov	r3, r2
 800892e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008936:	d308      	bcc.n	800894a <UART_SetConfig+0x33a>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893e:	d204      	bcs.n	800894a <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	e0b0      	b.n	8008aac <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	76bb      	strb	r3, [r7, #26]
 800894e:	e0ad      	b.n	8008aac <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008958:	d15c      	bne.n	8008a14 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800895a:	7efb      	ldrb	r3, [r7, #27]
 800895c:	2b08      	cmp	r3, #8
 800895e:	d828      	bhi.n	80089b2 <UART_SetConfig+0x3a2>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x358>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	0800898d 	.word	0x0800898d
 800896c:	08008995 	.word	0x08008995
 8008970:	0800899d 	.word	0x0800899d
 8008974:	080089b3 	.word	0x080089b3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089b3 	.word	0x080089b3
 8008980:	080089b3 	.word	0x080089b3
 8008984:	080089b3 	.word	0x080089b3
 8008988:	080089ab 	.word	0x080089ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fd f970 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8008990:	6178      	str	r0, [r7, #20]
        break;
 8008992:	e013      	b.n	80089bc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008994:	f7fd f982 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8008998:	6178      	str	r0, [r7, #20]
        break;
 800899a:	e00f      	b.n	80089bc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800899c:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <UART_SetConfig+0x4b4>)
 800899e:	617b      	str	r3, [r7, #20]
        break;
 80089a0:	e00c      	b.n	80089bc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a2:	f7fd f8cd 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 80089a6:	6178      	str	r0, [r7, #20]
        break;
 80089a8:	e008      	b.n	80089bc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ae:	617b      	str	r3, [r7, #20]
        break;
 80089b0:	e004      	b.n	80089bc <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	76bb      	strb	r3, [r7, #26]
        break;
 80089ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d074      	beq.n	8008aac <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	005a      	lsls	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	441a      	add	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d916      	bls.n	8008a0e <UART_SetConfig+0x3fe>
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e6:	d212      	bcs.n	8008a0e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f023 030f 	bic.w	r3, r3, #15
 80089f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	89fb      	ldrh	r3, [r7, #14]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	89fa      	ldrh	r2, [r7, #14]
 8008a0a:	60da      	str	r2, [r3, #12]
 8008a0c:	e04e      	b.n	8008aac <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	76bb      	strb	r3, [r7, #26]
 8008a12:	e04b      	b.n	8008aac <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a14:	7efb      	ldrb	r3, [r7, #27]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d827      	bhi.n	8008a6a <UART_SetConfig+0x45a>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x410>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a4d 	.word	0x08008a4d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	08008a6b 	.word	0x08008a6b
 8008a30:	08008a5b 	.word	0x08008a5b
 8008a34:	08008a6b 	.word	0x08008a6b
 8008a38:	08008a6b 	.word	0x08008a6b
 8008a3c:	08008a6b 	.word	0x08008a6b
 8008a40:	08008a63 	.word	0x08008a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a44:	f7fd f914 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8008a48:	6178      	str	r0, [r7, #20]
        break;
 8008a4a:	e013      	b.n	8008a74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a4c:	f7fd f926 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8008a50:	6178      	str	r0, [r7, #20]
        break;
 8008a52:	e00f      	b.n	8008a74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a54:	4b1b      	ldr	r3, [pc, #108]	; (8008ac4 <UART_SetConfig+0x4b4>)
 8008a56:	617b      	str	r3, [r7, #20]
        break;
 8008a58:	e00c      	b.n	8008a74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5a:	f7fd f871 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8008a5e:	6178      	str	r0, [r7, #20]
        break;
 8008a60:	e008      	b.n	8008a74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a66:	617b      	str	r3, [r7, #20]
        break;
 8008a68:	e004      	b.n	8008a74 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	76bb      	strb	r3, [r7, #26]
        break;
 8008a72:	bf00      	nop
    }

    if (pclk != 0U)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d018      	beq.n	8008aac <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	085a      	lsrs	r2, r3, #1
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	441a      	add	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b0f      	cmp	r3, #15
 8008a94:	d908      	bls.n	8008aa8 <UART_SetConfig+0x498>
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a9c:	d204      	bcs.n	8008aa8 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	60da      	str	r2, [r3, #12]
 8008aa6:	e001      	b.n	8008aac <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ab8:	7ebb      	ldrb	r3, [r7, #26]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	00f42400 	.word	0x00f42400

08008ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01a      	beq.n	8008bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc6:	d10a      	bne.n	8008bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	605a      	str	r2, [r3, #4]
  }
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c1c:	f7fa fe8e 	bl	800393c <HAL_GetTick>
 8008c20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0308 	and.w	r3, r3, #8
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10e      	bne.n	8008c4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f82d 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e023      	b.n	8008c96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d10e      	bne.n	8008c7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f817 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e00d      	b.n	8008c96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cae:	e05e      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb6:	d05a      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb8:	f7fa fe40 	bl	800393c <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <UART_WaitOnFlagUntilTimeout+0x30>
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d11b      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cdc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e043      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d02c      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d22:	d124      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d2c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d3c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0201 	bic.w	r2, r2, #1
 8008d4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2220      	movs	r2, #32
 8008d52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2220      	movs	r2, #32
 8008d58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e00f      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4013      	ands	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d091      	beq.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d107      	bne.n	8008dd6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0210 	bic.w	r2, r2, #16
 8008dd4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fbe6 	bl	80085e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e18:	bf00      	nop
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e36:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7fa fbaf 	bl	80035a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
	...

08008e68 <__errno>:
 8008e68:	4b01      	ldr	r3, [pc, #4]	; (8008e70 <__errno+0x8>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	200004c8 	.word	0x200004c8

08008e74 <__libc_init_array>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	4d0d      	ldr	r5, [pc, #52]	; (8008eac <__libc_init_array+0x38>)
 8008e78:	4c0d      	ldr	r4, [pc, #52]	; (8008eb0 <__libc_init_array+0x3c>)
 8008e7a:	1b64      	subs	r4, r4, r5
 8008e7c:	10a4      	asrs	r4, r4, #2
 8008e7e:	2600      	movs	r6, #0
 8008e80:	42a6      	cmp	r6, r4
 8008e82:	d109      	bne.n	8008e98 <__libc_init_array+0x24>
 8008e84:	4d0b      	ldr	r5, [pc, #44]	; (8008eb4 <__libc_init_array+0x40>)
 8008e86:	4c0c      	ldr	r4, [pc, #48]	; (8008eb8 <__libc_init_array+0x44>)
 8008e88:	f002 feb6 	bl	800bbf8 <_init>
 8008e8c:	1b64      	subs	r4, r4, r5
 8008e8e:	10a4      	asrs	r4, r4, #2
 8008e90:	2600      	movs	r6, #0
 8008e92:	42a6      	cmp	r6, r4
 8008e94:	d105      	bne.n	8008ea2 <__libc_init_array+0x2e>
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9c:	4798      	blx	r3
 8008e9e:	3601      	adds	r6, #1
 8008ea0:	e7ee      	b.n	8008e80 <__libc_init_array+0xc>
 8008ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea6:	4798      	blx	r3
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	e7f2      	b.n	8008e92 <__libc_init_array+0x1e>
 8008eac:	0800ce6c 	.word	0x0800ce6c
 8008eb0:	0800ce6c 	.word	0x0800ce6c
 8008eb4:	0800ce6c 	.word	0x0800ce6c
 8008eb8:	0800ce70 	.word	0x0800ce70

08008ebc <memcpy>:
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	4770      	bx	lr
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d1f9      	bne.n	8008eca <memcpy+0xe>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <__cvt>:
 8008ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	ec55 4b10 	vmov	r4, r5, d0
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	bfbb      	ittet	lt
 8008efa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008efe:	461d      	movlt	r5, r3
 8008f00:	2300      	movge	r3, #0
 8008f02:	232d      	movlt	r3, #45	; 0x2d
 8008f04:	700b      	strb	r3, [r1, #0]
 8008f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f0c:	4691      	mov	r9, r2
 8008f0e:	f023 0820 	bic.w	r8, r3, #32
 8008f12:	bfbc      	itt	lt
 8008f14:	4622      	movlt	r2, r4
 8008f16:	4614      	movlt	r4, r2
 8008f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f1c:	d005      	beq.n	8008f2a <__cvt+0x42>
 8008f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f22:	d100      	bne.n	8008f26 <__cvt+0x3e>
 8008f24:	3601      	adds	r6, #1
 8008f26:	2102      	movs	r1, #2
 8008f28:	e000      	b.n	8008f2c <__cvt+0x44>
 8008f2a:	2103      	movs	r1, #3
 8008f2c:	ab03      	add	r3, sp, #12
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	ab02      	add	r3, sp, #8
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	ec45 4b10 	vmov	d0, r4, r5
 8008f38:	4653      	mov	r3, sl
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	f000 fcec 	bl	8009918 <_dtoa_r>
 8008f40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f44:	4607      	mov	r7, r0
 8008f46:	d102      	bne.n	8008f4e <__cvt+0x66>
 8008f48:	f019 0f01 	tst.w	r9, #1
 8008f4c:	d022      	beq.n	8008f94 <__cvt+0xac>
 8008f4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f52:	eb07 0906 	add.w	r9, r7, r6
 8008f56:	d110      	bne.n	8008f7a <__cvt+0x92>
 8008f58:	783b      	ldrb	r3, [r7, #0]
 8008f5a:	2b30      	cmp	r3, #48	; 0x30
 8008f5c:	d10a      	bne.n	8008f74 <__cvt+0x8c>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7f7 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f6a:	b918      	cbnz	r0, 8008f74 <__cvt+0x8c>
 8008f6c:	f1c6 0601 	rsb	r6, r6, #1
 8008f70:	f8ca 6000 	str.w	r6, [sl]
 8008f74:	f8da 3000 	ldr.w	r3, [sl]
 8008f78:	4499      	add	r9, r3
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7f7 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f86:	b108      	cbz	r0, 8008f8c <__cvt+0xa4>
 8008f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f8c:	2230      	movs	r2, #48	; 0x30
 8008f8e:	9b03      	ldr	r3, [sp, #12]
 8008f90:	454b      	cmp	r3, r9
 8008f92:	d307      	bcc.n	8008fa4 <__cvt+0xbc>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f98:	1bdb      	subs	r3, r3, r7
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	b004      	add	sp, #16
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa4:	1c59      	adds	r1, r3, #1
 8008fa6:	9103      	str	r1, [sp, #12]
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	e7f0      	b.n	8008f8e <__cvt+0xa6>

08008fac <__exponent>:
 8008fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	bfb8      	it	lt
 8008fb4:	4249      	neglt	r1, r1
 8008fb6:	f803 2b02 	strb.w	r2, [r3], #2
 8008fba:	bfb4      	ite	lt
 8008fbc:	222d      	movlt	r2, #45	; 0x2d
 8008fbe:	222b      	movge	r2, #43	; 0x2b
 8008fc0:	2909      	cmp	r1, #9
 8008fc2:	7042      	strb	r2, [r0, #1]
 8008fc4:	dd2a      	ble.n	800901c <__exponent+0x70>
 8008fc6:	f10d 0407 	add.w	r4, sp, #7
 8008fca:	46a4      	mov	ip, r4
 8008fcc:	270a      	movs	r7, #10
 8008fce:	46a6      	mov	lr, r4
 8008fd0:	460a      	mov	r2, r1
 8008fd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fd6:	fb07 1516 	mls	r5, r7, r6, r1
 8008fda:	3530      	adds	r5, #48	; 0x30
 8008fdc:	2a63      	cmp	r2, #99	; 0x63
 8008fde:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	dcf1      	bgt.n	8008fce <__exponent+0x22>
 8008fea:	3130      	adds	r1, #48	; 0x30
 8008fec:	f1ae 0502 	sub.w	r5, lr, #2
 8008ff0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ff4:	1c44      	adds	r4, r0, #1
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4561      	cmp	r1, ip
 8008ffa:	d30a      	bcc.n	8009012 <__exponent+0x66>
 8008ffc:	f10d 0209 	add.w	r2, sp, #9
 8009000:	eba2 020e 	sub.w	r2, r2, lr
 8009004:	4565      	cmp	r5, ip
 8009006:	bf88      	it	hi
 8009008:	2200      	movhi	r2, #0
 800900a:	4413      	add	r3, r2
 800900c:	1a18      	subs	r0, r3, r0
 800900e:	b003      	add	sp, #12
 8009010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009016:	f804 2f01 	strb.w	r2, [r4, #1]!
 800901a:	e7ed      	b.n	8008ff8 <__exponent+0x4c>
 800901c:	2330      	movs	r3, #48	; 0x30
 800901e:	3130      	adds	r1, #48	; 0x30
 8009020:	7083      	strb	r3, [r0, #2]
 8009022:	70c1      	strb	r1, [r0, #3]
 8009024:	1d03      	adds	r3, r0, #4
 8009026:	e7f1      	b.n	800900c <__exponent+0x60>

08009028 <_printf_float>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b02 	vpush	{d8}
 8009030:	b08d      	sub	sp, #52	; 0x34
 8009032:	460c      	mov	r4, r1
 8009034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009038:	4616      	mov	r6, r2
 800903a:	461f      	mov	r7, r3
 800903c:	4605      	mov	r5, r0
 800903e:	f001 fa57 	bl	800a4f0 <_localeconv_r>
 8009042:	f8d0 a000 	ldr.w	sl, [r0]
 8009046:	4650      	mov	r0, sl
 8009048:	f7f7 f8ca 	bl	80001e0 <strlen>
 800904c:	2300      	movs	r3, #0
 800904e:	930a      	str	r3, [sp, #40]	; 0x28
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	f8d8 3000 	ldr.w	r3, [r8]
 8009058:	f894 b018 	ldrb.w	fp, [r4, #24]
 800905c:	3307      	adds	r3, #7
 800905e:	f023 0307 	bic.w	r3, r3, #7
 8009062:	f103 0208 	add.w	r2, r3, #8
 8009066:	f8c8 2000 	str.w	r2, [r8]
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009072:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800907a:	9307      	str	r3, [sp, #28]
 800907c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009080:	ee08 0a10 	vmov	s16, r0
 8009084:	4b9f      	ldr	r3, [pc, #636]	; (8009304 <_printf_float+0x2dc>)
 8009086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	f7f7 fd55 	bl	8000b3c <__aeabi_dcmpun>
 8009092:	bb88      	cbnz	r0, 80090f8 <_printf_float+0xd0>
 8009094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009098:	4b9a      	ldr	r3, [pc, #616]	; (8009304 <_printf_float+0x2dc>)
 800909a:	f04f 32ff 	mov.w	r2, #4294967295
 800909e:	f7f7 fd2f 	bl	8000b00 <__aeabi_dcmple>
 80090a2:	bb48      	cbnz	r0, 80090f8 <_printf_float+0xd0>
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fd1e 	bl	8000aec <__aeabi_dcmplt>
 80090b0:	b110      	cbz	r0, 80090b8 <_printf_float+0x90>
 80090b2:	232d      	movs	r3, #45	; 0x2d
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b8:	4b93      	ldr	r3, [pc, #588]	; (8009308 <_printf_float+0x2e0>)
 80090ba:	4894      	ldr	r0, [pc, #592]	; (800930c <_printf_float+0x2e4>)
 80090bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090c0:	bf94      	ite	ls
 80090c2:	4698      	movls	r8, r3
 80090c4:	4680      	movhi	r8, r0
 80090c6:	2303      	movs	r3, #3
 80090c8:	6123      	str	r3, [r4, #16]
 80090ca:	9b05      	ldr	r3, [sp, #20]
 80090cc:	f023 0204 	bic.w	r2, r3, #4
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	9700      	str	r7, [sp, #0]
 80090d8:	4633      	mov	r3, r6
 80090da:	aa0b      	add	r2, sp, #44	; 0x2c
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f9d8 	bl	8009494 <_printf_common>
 80090e4:	3001      	adds	r0, #1
 80090e6:	f040 8090 	bne.w	800920a <_printf_float+0x1e2>
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295
 80090ee:	b00d      	add	sp, #52	; 0x34
 80090f0:	ecbd 8b02 	vpop	{d8}
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	f7f7 fd1c 	bl	8000b3c <__aeabi_dcmpun>
 8009104:	b140      	cbz	r0, 8009118 <_printf_float+0xf0>
 8009106:	464b      	mov	r3, r9
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfbc      	itt	lt
 800910c:	232d      	movlt	r3, #45	; 0x2d
 800910e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009112:	487f      	ldr	r0, [pc, #508]	; (8009310 <_printf_float+0x2e8>)
 8009114:	4b7f      	ldr	r3, [pc, #508]	; (8009314 <_printf_float+0x2ec>)
 8009116:	e7d1      	b.n	80090bc <_printf_float+0x94>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800911e:	9206      	str	r2, [sp, #24]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	d13f      	bne.n	80091a4 <_printf_float+0x17c>
 8009124:	2306      	movs	r3, #6
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	9b05      	ldr	r3, [sp, #20]
 800912a:	6861      	ldr	r1, [r4, #4]
 800912c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009130:	2300      	movs	r3, #0
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	ab0a      	add	r3, sp, #40	; 0x28
 8009136:	e9cd b301 	strd	fp, r3, [sp, #4]
 800913a:	ab09      	add	r3, sp, #36	; 0x24
 800913c:	ec49 8b10 	vmov	d0, r8, r9
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009148:	4628      	mov	r0, r5
 800914a:	f7ff fecd 	bl	8008ee8 <__cvt>
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009152:	2b47      	cmp	r3, #71	; 0x47
 8009154:	4680      	mov	r8, r0
 8009156:	d108      	bne.n	800916a <_printf_float+0x142>
 8009158:	1cc8      	adds	r0, r1, #3
 800915a:	db02      	blt.n	8009162 <_printf_float+0x13a>
 800915c:	6863      	ldr	r3, [r4, #4]
 800915e:	4299      	cmp	r1, r3
 8009160:	dd41      	ble.n	80091e6 <_printf_float+0x1be>
 8009162:	f1ab 0b02 	sub.w	fp, fp, #2
 8009166:	fa5f fb8b 	uxtb.w	fp, fp
 800916a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800916e:	d820      	bhi.n	80091b2 <_printf_float+0x18a>
 8009170:	3901      	subs	r1, #1
 8009172:	465a      	mov	r2, fp
 8009174:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009178:	9109      	str	r1, [sp, #36]	; 0x24
 800917a:	f7ff ff17 	bl	8008fac <__exponent>
 800917e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009180:	1813      	adds	r3, r2, r0
 8009182:	2a01      	cmp	r2, #1
 8009184:	4681      	mov	r9, r0
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	dc02      	bgt.n	8009190 <_printf_float+0x168>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	07d2      	lsls	r2, r2, #31
 800918e:	d501      	bpl.n	8009194 <_printf_float+0x16c>
 8009190:	3301      	adds	r3, #1
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009198:	2b00      	cmp	r3, #0
 800919a:	d09c      	beq.n	80090d6 <_printf_float+0xae>
 800919c:	232d      	movs	r3, #45	; 0x2d
 800919e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091a2:	e798      	b.n	80090d6 <_printf_float+0xae>
 80091a4:	9a06      	ldr	r2, [sp, #24]
 80091a6:	2a47      	cmp	r2, #71	; 0x47
 80091a8:	d1be      	bne.n	8009128 <_printf_float+0x100>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1bc      	bne.n	8009128 <_printf_float+0x100>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e7b9      	b.n	8009126 <_printf_float+0xfe>
 80091b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091b6:	d118      	bne.n	80091ea <_printf_float+0x1c2>
 80091b8:	2900      	cmp	r1, #0
 80091ba:	6863      	ldr	r3, [r4, #4]
 80091bc:	dd0b      	ble.n	80091d6 <_printf_float+0x1ae>
 80091be:	6121      	str	r1, [r4, #16]
 80091c0:	b913      	cbnz	r3, 80091c8 <_printf_float+0x1a0>
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	07d0      	lsls	r0, r2, #31
 80091c6:	d502      	bpl.n	80091ce <_printf_float+0x1a6>
 80091c8:	3301      	adds	r3, #1
 80091ca:	440b      	add	r3, r1
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80091d0:	f04f 0900 	mov.w	r9, #0
 80091d4:	e7de      	b.n	8009194 <_printf_float+0x16c>
 80091d6:	b913      	cbnz	r3, 80091de <_printf_float+0x1b6>
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	07d2      	lsls	r2, r2, #31
 80091dc:	d501      	bpl.n	80091e2 <_printf_float+0x1ba>
 80091de:	3302      	adds	r3, #2
 80091e0:	e7f4      	b.n	80091cc <_printf_float+0x1a4>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e7f2      	b.n	80091cc <_printf_float+0x1a4>
 80091e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ec:	4299      	cmp	r1, r3
 80091ee:	db05      	blt.n	80091fc <_printf_float+0x1d4>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	6121      	str	r1, [r4, #16]
 80091f4:	07d8      	lsls	r0, r3, #31
 80091f6:	d5ea      	bpl.n	80091ce <_printf_float+0x1a6>
 80091f8:	1c4b      	adds	r3, r1, #1
 80091fa:	e7e7      	b.n	80091cc <_printf_float+0x1a4>
 80091fc:	2900      	cmp	r1, #0
 80091fe:	bfd4      	ite	le
 8009200:	f1c1 0202 	rsble	r2, r1, #2
 8009204:	2201      	movgt	r2, #1
 8009206:	4413      	add	r3, r2
 8009208:	e7e0      	b.n	80091cc <_printf_float+0x1a4>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	055a      	lsls	r2, r3, #21
 800920e:	d407      	bmi.n	8009220 <_printf_float+0x1f8>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	4642      	mov	r2, r8
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	d12c      	bne.n	8009278 <_printf_float+0x250>
 800921e:	e764      	b.n	80090ea <_printf_float+0xc2>
 8009220:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009224:	f240 80e0 	bls.w	80093e8 <_printf_float+0x3c0>
 8009228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	f7f7 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8009234:	2800      	cmp	r0, #0
 8009236:	d034      	beq.n	80092a2 <_printf_float+0x27a>
 8009238:	4a37      	ldr	r2, [pc, #220]	; (8009318 <_printf_float+0x2f0>)
 800923a:	2301      	movs	r3, #1
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f af51 	beq.w	80090ea <_printf_float+0xc2>
 8009248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924c:	429a      	cmp	r2, r3
 800924e:	db02      	blt.n	8009256 <_printf_float+0x22e>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	07d8      	lsls	r0, r3, #31
 8009254:	d510      	bpl.n	8009278 <_printf_float+0x250>
 8009256:	ee18 3a10 	vmov	r3, s16
 800925a:	4652      	mov	r2, sl
 800925c:	4631      	mov	r1, r6
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	f43f af41 	beq.w	80090ea <_printf_float+0xc2>
 8009268:	f04f 0800 	mov.w	r8, #0
 800926c:	f104 091a 	add.w	r9, r4, #26
 8009270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009272:	3b01      	subs	r3, #1
 8009274:	4543      	cmp	r3, r8
 8009276:	dc09      	bgt.n	800928c <_printf_float+0x264>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	079b      	lsls	r3, r3, #30
 800927c:	f100 8105 	bmi.w	800948a <_printf_float+0x462>
 8009280:	68e0      	ldr	r0, [r4, #12]
 8009282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009284:	4298      	cmp	r0, r3
 8009286:	bfb8      	it	lt
 8009288:	4618      	movlt	r0, r3
 800928a:	e730      	b.n	80090ee <_printf_float+0xc6>
 800928c:	2301      	movs	r3, #1
 800928e:	464a      	mov	r2, r9
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	47b8      	blx	r7
 8009296:	3001      	adds	r0, #1
 8009298:	f43f af27 	beq.w	80090ea <_printf_float+0xc2>
 800929c:	f108 0801 	add.w	r8, r8, #1
 80092a0:	e7e6      	b.n	8009270 <_printf_float+0x248>
 80092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc39      	bgt.n	800931c <_printf_float+0x2f4>
 80092a8:	4a1b      	ldr	r2, [pc, #108]	; (8009318 <_printf_float+0x2f0>)
 80092aa:	2301      	movs	r3, #1
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	f43f af19 	beq.w	80090ea <_printf_float+0xc2>
 80092b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092bc:	4313      	orrs	r3, r2
 80092be:	d102      	bne.n	80092c6 <_printf_float+0x29e>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	07d9      	lsls	r1, r3, #31
 80092c4:	d5d8      	bpl.n	8009278 <_printf_float+0x250>
 80092c6:	ee18 3a10 	vmov	r3, s16
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af09 	beq.w	80090ea <_printf_float+0xc2>
 80092d8:	f04f 0900 	mov.w	r9, #0
 80092dc:	f104 0a1a 	add.w	sl, r4, #26
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	425b      	negs	r3, r3
 80092e4:	454b      	cmp	r3, r9
 80092e6:	dc01      	bgt.n	80092ec <_printf_float+0x2c4>
 80092e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ea:	e792      	b.n	8009212 <_printf_float+0x1ea>
 80092ec:	2301      	movs	r3, #1
 80092ee:	4652      	mov	r2, sl
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f aef7 	beq.w	80090ea <_printf_float+0xc2>
 80092fc:	f109 0901 	add.w	r9, r9, #1
 8009300:	e7ee      	b.n	80092e0 <_printf_float+0x2b8>
 8009302:	bf00      	nop
 8009304:	7fefffff 	.word	0x7fefffff
 8009308:	0800ca84 	.word	0x0800ca84
 800930c:	0800ca88 	.word	0x0800ca88
 8009310:	0800ca90 	.word	0x0800ca90
 8009314:	0800ca8c 	.word	0x0800ca8c
 8009318:	0800ca94 	.word	0x0800ca94
 800931c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800931e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009320:	429a      	cmp	r2, r3
 8009322:	bfa8      	it	ge
 8009324:	461a      	movge	r2, r3
 8009326:	2a00      	cmp	r2, #0
 8009328:	4691      	mov	r9, r2
 800932a:	dc37      	bgt.n	800939c <_printf_float+0x374>
 800932c:	f04f 0b00 	mov.w	fp, #0
 8009330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009334:	f104 021a 	add.w	r2, r4, #26
 8009338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	eba3 0309 	sub.w	r3, r3, r9
 8009340:	455b      	cmp	r3, fp
 8009342:	dc33      	bgt.n	80093ac <_printf_float+0x384>
 8009344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009348:	429a      	cmp	r2, r3
 800934a:	db3b      	blt.n	80093c4 <_printf_float+0x39c>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	07da      	lsls	r2, r3, #31
 8009350:	d438      	bmi.n	80093c4 <_printf_float+0x39c>
 8009352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009354:	9b05      	ldr	r3, [sp, #20]
 8009356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	eba2 0901 	sub.w	r9, r2, r1
 800935e:	4599      	cmp	r9, r3
 8009360:	bfa8      	it	ge
 8009362:	4699      	movge	r9, r3
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	dc35      	bgt.n	80093d6 <_printf_float+0x3ae>
 800936a:	f04f 0800 	mov.w	r8, #0
 800936e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009372:	f104 0a1a 	add.w	sl, r4, #26
 8009376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	eba3 0309 	sub.w	r3, r3, r9
 8009380:	4543      	cmp	r3, r8
 8009382:	f77f af79 	ble.w	8009278 <_printf_float+0x250>
 8009386:	2301      	movs	r3, #1
 8009388:	4652      	mov	r2, sl
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f aeaa 	beq.w	80090ea <_printf_float+0xc2>
 8009396:	f108 0801 	add.w	r8, r8, #1
 800939a:	e7ec      	b.n	8009376 <_printf_float+0x34e>
 800939c:	4613      	mov	r3, r2
 800939e:	4631      	mov	r1, r6
 80093a0:	4642      	mov	r2, r8
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	d1c0      	bne.n	800932c <_printf_float+0x304>
 80093aa:	e69e      	b.n	80090ea <_printf_float+0xc2>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	9205      	str	r2, [sp, #20]
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f ae97 	beq.w	80090ea <_printf_float+0xc2>
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	f10b 0b01 	add.w	fp, fp, #1
 80093c2:	e7b9      	b.n	8009338 <_printf_float+0x310>
 80093c4:	ee18 3a10 	vmov	r3, s16
 80093c8:	4652      	mov	r2, sl
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	d1be      	bne.n	8009352 <_printf_float+0x32a>
 80093d4:	e689      	b.n	80090ea <_printf_float+0xc2>
 80093d6:	9a05      	ldr	r2, [sp, #20]
 80093d8:	464b      	mov	r3, r9
 80093da:	4442      	add	r2, r8
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	d1c1      	bne.n	800936a <_printf_float+0x342>
 80093e6:	e680      	b.n	80090ea <_printf_float+0xc2>
 80093e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ea:	2a01      	cmp	r2, #1
 80093ec:	dc01      	bgt.n	80093f2 <_printf_float+0x3ca>
 80093ee:	07db      	lsls	r3, r3, #31
 80093f0:	d538      	bpl.n	8009464 <_printf_float+0x43c>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4642      	mov	r2, r8
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f ae74 	beq.w	80090ea <_printf_float+0xc2>
 8009402:	ee18 3a10 	vmov	r3, s16
 8009406:	4652      	mov	r2, sl
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	f43f ae6b 	beq.w	80090ea <_printf_float+0xc2>
 8009414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	f7f7 fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009420:	b9d8      	cbnz	r0, 800945a <_printf_float+0x432>
 8009422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009424:	f108 0201 	add.w	r2, r8, #1
 8009428:	3b01      	subs	r3, #1
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	d10e      	bne.n	8009452 <_printf_float+0x42a>
 8009434:	e659      	b.n	80090ea <_printf_float+0xc2>
 8009436:	2301      	movs	r3, #1
 8009438:	4652      	mov	r2, sl
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f ae52 	beq.w	80090ea <_printf_float+0xc2>
 8009446:	f108 0801 	add.w	r8, r8, #1
 800944a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800944c:	3b01      	subs	r3, #1
 800944e:	4543      	cmp	r3, r8
 8009450:	dcf1      	bgt.n	8009436 <_printf_float+0x40e>
 8009452:	464b      	mov	r3, r9
 8009454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009458:	e6dc      	b.n	8009214 <_printf_float+0x1ec>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	f104 0a1a 	add.w	sl, r4, #26
 8009462:	e7f2      	b.n	800944a <_printf_float+0x422>
 8009464:	2301      	movs	r3, #1
 8009466:	4642      	mov	r2, r8
 8009468:	e7df      	b.n	800942a <_printf_float+0x402>
 800946a:	2301      	movs	r3, #1
 800946c:	464a      	mov	r2, r9
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	f43f ae38 	beq.w	80090ea <_printf_float+0xc2>
 800947a:	f108 0801 	add.w	r8, r8, #1
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	4543      	cmp	r3, r8
 8009486:	dcf0      	bgt.n	800946a <_printf_float+0x442>
 8009488:	e6fa      	b.n	8009280 <_printf_float+0x258>
 800948a:	f04f 0800 	mov.w	r8, #0
 800948e:	f104 0919 	add.w	r9, r4, #25
 8009492:	e7f4      	b.n	800947e <_printf_float+0x456>

08009494 <_printf_common>:
 8009494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009498:	4616      	mov	r6, r2
 800949a:	4699      	mov	r9, r3
 800949c:	688a      	ldr	r2, [r1, #8]
 800949e:	690b      	ldr	r3, [r1, #16]
 80094a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	bfb8      	it	lt
 80094a8:	4613      	movlt	r3, r2
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094b0:	4607      	mov	r7, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	b10a      	cbz	r2, 80094ba <_printf_common+0x26>
 80094b6:	3301      	adds	r3, #1
 80094b8:	6033      	str	r3, [r6, #0]
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	0699      	lsls	r1, r3, #26
 80094be:	bf42      	ittt	mi
 80094c0:	6833      	ldrmi	r3, [r6, #0]
 80094c2:	3302      	addmi	r3, #2
 80094c4:	6033      	strmi	r3, [r6, #0]
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	f015 0506 	ands.w	r5, r5, #6
 80094cc:	d106      	bne.n	80094dc <_printf_common+0x48>
 80094ce:	f104 0a19 	add.w	sl, r4, #25
 80094d2:	68e3      	ldr	r3, [r4, #12]
 80094d4:	6832      	ldr	r2, [r6, #0]
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	42ab      	cmp	r3, r5
 80094da:	dc26      	bgt.n	800952a <_printf_common+0x96>
 80094dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094e0:	1e13      	subs	r3, r2, #0
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	bf18      	it	ne
 80094e6:	2301      	movne	r3, #1
 80094e8:	0692      	lsls	r2, r2, #26
 80094ea:	d42b      	bmi.n	8009544 <_printf_common+0xb0>
 80094ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f0:	4649      	mov	r1, r9
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c0      	blx	r8
 80094f6:	3001      	adds	r0, #1
 80094f8:	d01e      	beq.n	8009538 <_printf_common+0xa4>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	68e5      	ldr	r5, [r4, #12]
 80094fe:	6832      	ldr	r2, [r6, #0]
 8009500:	f003 0306 	and.w	r3, r3, #6
 8009504:	2b04      	cmp	r3, #4
 8009506:	bf08      	it	eq
 8009508:	1aad      	subeq	r5, r5, r2
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	6922      	ldr	r2, [r4, #16]
 800950e:	bf0c      	ite	eq
 8009510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009514:	2500      	movne	r5, #0
 8009516:	4293      	cmp	r3, r2
 8009518:	bfc4      	itt	gt
 800951a:	1a9b      	subgt	r3, r3, r2
 800951c:	18ed      	addgt	r5, r5, r3
 800951e:	2600      	movs	r6, #0
 8009520:	341a      	adds	r4, #26
 8009522:	42b5      	cmp	r5, r6
 8009524:	d11a      	bne.n	800955c <_printf_common+0xc8>
 8009526:	2000      	movs	r0, #0
 8009528:	e008      	b.n	800953c <_printf_common+0xa8>
 800952a:	2301      	movs	r3, #1
 800952c:	4652      	mov	r2, sl
 800952e:	4649      	mov	r1, r9
 8009530:	4638      	mov	r0, r7
 8009532:	47c0      	blx	r8
 8009534:	3001      	adds	r0, #1
 8009536:	d103      	bne.n	8009540 <_printf_common+0xac>
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009540:	3501      	adds	r5, #1
 8009542:	e7c6      	b.n	80094d2 <_printf_common+0x3e>
 8009544:	18e1      	adds	r1, r4, r3
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	2030      	movs	r0, #48	; 0x30
 800954a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800954e:	4422      	add	r2, r4
 8009550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009558:	3302      	adds	r3, #2
 800955a:	e7c7      	b.n	80094ec <_printf_common+0x58>
 800955c:	2301      	movs	r3, #1
 800955e:	4622      	mov	r2, r4
 8009560:	4649      	mov	r1, r9
 8009562:	4638      	mov	r0, r7
 8009564:	47c0      	blx	r8
 8009566:	3001      	adds	r0, #1
 8009568:	d0e6      	beq.n	8009538 <_printf_common+0xa4>
 800956a:	3601      	adds	r6, #1
 800956c:	e7d9      	b.n	8009522 <_printf_common+0x8e>
	...

08009570 <_printf_i>:
 8009570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	4691      	mov	r9, r2
 8009578:	7e27      	ldrb	r7, [r4, #24]
 800957a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800957c:	2f78      	cmp	r7, #120	; 0x78
 800957e:	4680      	mov	r8, r0
 8009580:	469a      	mov	sl, r3
 8009582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009586:	d807      	bhi.n	8009598 <_printf_i+0x28>
 8009588:	2f62      	cmp	r7, #98	; 0x62
 800958a:	d80a      	bhi.n	80095a2 <_printf_i+0x32>
 800958c:	2f00      	cmp	r7, #0
 800958e:	f000 80d8 	beq.w	8009742 <_printf_i+0x1d2>
 8009592:	2f58      	cmp	r7, #88	; 0x58
 8009594:	f000 80a3 	beq.w	80096de <_printf_i+0x16e>
 8009598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800959c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095a0:	e03a      	b.n	8009618 <_printf_i+0xa8>
 80095a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095a6:	2b15      	cmp	r3, #21
 80095a8:	d8f6      	bhi.n	8009598 <_printf_i+0x28>
 80095aa:	a001      	add	r0, pc, #4	; (adr r0, 80095b0 <_printf_i+0x40>)
 80095ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095b0:	08009609 	.word	0x08009609
 80095b4:	0800961d 	.word	0x0800961d
 80095b8:	08009599 	.word	0x08009599
 80095bc:	08009599 	.word	0x08009599
 80095c0:	08009599 	.word	0x08009599
 80095c4:	08009599 	.word	0x08009599
 80095c8:	0800961d 	.word	0x0800961d
 80095cc:	08009599 	.word	0x08009599
 80095d0:	08009599 	.word	0x08009599
 80095d4:	08009599 	.word	0x08009599
 80095d8:	08009599 	.word	0x08009599
 80095dc:	08009729 	.word	0x08009729
 80095e0:	0800964d 	.word	0x0800964d
 80095e4:	0800970b 	.word	0x0800970b
 80095e8:	08009599 	.word	0x08009599
 80095ec:	08009599 	.word	0x08009599
 80095f0:	0800974b 	.word	0x0800974b
 80095f4:	08009599 	.word	0x08009599
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	08009599 	.word	0x08009599
 8009600:	08009599 	.word	0x08009599
 8009604:	08009713 	.word	0x08009713
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	1d1a      	adds	r2, r3, #4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	600a      	str	r2, [r1, #0]
 8009610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009618:	2301      	movs	r3, #1
 800961a:	e0a3      	b.n	8009764 <_printf_i+0x1f4>
 800961c:	6825      	ldr	r5, [r4, #0]
 800961e:	6808      	ldr	r0, [r1, #0]
 8009620:	062e      	lsls	r6, r5, #24
 8009622:	f100 0304 	add.w	r3, r0, #4
 8009626:	d50a      	bpl.n	800963e <_printf_i+0xce>
 8009628:	6805      	ldr	r5, [r0, #0]
 800962a:	600b      	str	r3, [r1, #0]
 800962c:	2d00      	cmp	r5, #0
 800962e:	da03      	bge.n	8009638 <_printf_i+0xc8>
 8009630:	232d      	movs	r3, #45	; 0x2d
 8009632:	426d      	negs	r5, r5
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009638:	485e      	ldr	r0, [pc, #376]	; (80097b4 <_printf_i+0x244>)
 800963a:	230a      	movs	r3, #10
 800963c:	e019      	b.n	8009672 <_printf_i+0x102>
 800963e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009642:	6805      	ldr	r5, [r0, #0]
 8009644:	600b      	str	r3, [r1, #0]
 8009646:	bf18      	it	ne
 8009648:	b22d      	sxthne	r5, r5
 800964a:	e7ef      	b.n	800962c <_printf_i+0xbc>
 800964c:	680b      	ldr	r3, [r1, #0]
 800964e:	6825      	ldr	r5, [r4, #0]
 8009650:	1d18      	adds	r0, r3, #4
 8009652:	6008      	str	r0, [r1, #0]
 8009654:	0628      	lsls	r0, r5, #24
 8009656:	d501      	bpl.n	800965c <_printf_i+0xec>
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	e002      	b.n	8009662 <_printf_i+0xf2>
 800965c:	0669      	lsls	r1, r5, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0xe8>
 8009660:	881d      	ldrh	r5, [r3, #0]
 8009662:	4854      	ldr	r0, [pc, #336]	; (80097b4 <_printf_i+0x244>)
 8009664:	2f6f      	cmp	r7, #111	; 0x6f
 8009666:	bf0c      	ite	eq
 8009668:	2308      	moveq	r3, #8
 800966a:	230a      	movne	r3, #10
 800966c:	2100      	movs	r1, #0
 800966e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009672:	6866      	ldr	r6, [r4, #4]
 8009674:	60a6      	str	r6, [r4, #8]
 8009676:	2e00      	cmp	r6, #0
 8009678:	bfa2      	ittt	ge
 800967a:	6821      	ldrge	r1, [r4, #0]
 800967c:	f021 0104 	bicge.w	r1, r1, #4
 8009680:	6021      	strge	r1, [r4, #0]
 8009682:	b90d      	cbnz	r5, 8009688 <_printf_i+0x118>
 8009684:	2e00      	cmp	r6, #0
 8009686:	d04d      	beq.n	8009724 <_printf_i+0x1b4>
 8009688:	4616      	mov	r6, r2
 800968a:	fbb5 f1f3 	udiv	r1, r5, r3
 800968e:	fb03 5711 	mls	r7, r3, r1, r5
 8009692:	5dc7      	ldrb	r7, [r0, r7]
 8009694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009698:	462f      	mov	r7, r5
 800969a:	42bb      	cmp	r3, r7
 800969c:	460d      	mov	r5, r1
 800969e:	d9f4      	bls.n	800968a <_printf_i+0x11a>
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d10b      	bne.n	80096bc <_printf_i+0x14c>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	07df      	lsls	r7, r3, #31
 80096a8:	d508      	bpl.n	80096bc <_printf_i+0x14c>
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	6861      	ldr	r1, [r4, #4]
 80096ae:	4299      	cmp	r1, r3
 80096b0:	bfde      	ittt	le
 80096b2:	2330      	movle	r3, #48	; 0x30
 80096b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096bc:	1b92      	subs	r2, r2, r6
 80096be:	6122      	str	r2, [r4, #16]
 80096c0:	f8cd a000 	str.w	sl, [sp]
 80096c4:	464b      	mov	r3, r9
 80096c6:	aa03      	add	r2, sp, #12
 80096c8:	4621      	mov	r1, r4
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7ff fee2 	bl	8009494 <_printf_common>
 80096d0:	3001      	adds	r0, #1
 80096d2:	d14c      	bne.n	800976e <_printf_i+0x1fe>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	b004      	add	sp, #16
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	4835      	ldr	r0, [pc, #212]	; (80097b4 <_printf_i+0x244>)
 80096e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	680e      	ldr	r6, [r1, #0]
 80096e8:	061f      	lsls	r7, r3, #24
 80096ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80096ee:	600e      	str	r6, [r1, #0]
 80096f0:	d514      	bpl.n	800971c <_printf_i+0x1ac>
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	bf44      	itt	mi
 80096f6:	f043 0320 	orrmi.w	r3, r3, #32
 80096fa:	6023      	strmi	r3, [r4, #0]
 80096fc:	b91d      	cbnz	r5, 8009706 <_printf_i+0x196>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	f023 0320 	bic.w	r3, r3, #32
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	2310      	movs	r3, #16
 8009708:	e7b0      	b.n	800966c <_printf_i+0xfc>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	f043 0320 	orr.w	r3, r3, #32
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	2378      	movs	r3, #120	; 0x78
 8009714:	4828      	ldr	r0, [pc, #160]	; (80097b8 <_printf_i+0x248>)
 8009716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800971a:	e7e3      	b.n	80096e4 <_printf_i+0x174>
 800971c:	065e      	lsls	r6, r3, #25
 800971e:	bf48      	it	mi
 8009720:	b2ad      	uxthmi	r5, r5
 8009722:	e7e6      	b.n	80096f2 <_printf_i+0x182>
 8009724:	4616      	mov	r6, r2
 8009726:	e7bb      	b.n	80096a0 <_printf_i+0x130>
 8009728:	680b      	ldr	r3, [r1, #0]
 800972a:	6826      	ldr	r6, [r4, #0]
 800972c:	6960      	ldr	r0, [r4, #20]
 800972e:	1d1d      	adds	r5, r3, #4
 8009730:	600d      	str	r5, [r1, #0]
 8009732:	0635      	lsls	r5, r6, #24
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	d501      	bpl.n	800973c <_printf_i+0x1cc>
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	e002      	b.n	8009742 <_printf_i+0x1d2>
 800973c:	0671      	lsls	r1, r6, #25
 800973e:	d5fb      	bpl.n	8009738 <_printf_i+0x1c8>
 8009740:	8018      	strh	r0, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	4616      	mov	r6, r2
 8009748:	e7ba      	b.n	80096c0 <_printf_i+0x150>
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	600a      	str	r2, [r1, #0]
 8009750:	681e      	ldr	r6, [r3, #0]
 8009752:	6862      	ldr	r2, [r4, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	4630      	mov	r0, r6
 8009758:	f7f6 fd4a 	bl	80001f0 <memchr>
 800975c:	b108      	cbz	r0, 8009762 <_printf_i+0x1f2>
 800975e:	1b80      	subs	r0, r0, r6
 8009760:	6060      	str	r0, [r4, #4]
 8009762:	6863      	ldr	r3, [r4, #4]
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	2300      	movs	r3, #0
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976c:	e7a8      	b.n	80096c0 <_printf_i+0x150>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	4632      	mov	r2, r6
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d0ab      	beq.n	80096d4 <_printf_i+0x164>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	079b      	lsls	r3, r3, #30
 8009780:	d413      	bmi.n	80097aa <_printf_i+0x23a>
 8009782:	68e0      	ldr	r0, [r4, #12]
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	4298      	cmp	r0, r3
 8009788:	bfb8      	it	lt
 800978a:	4618      	movlt	r0, r3
 800978c:	e7a4      	b.n	80096d8 <_printf_i+0x168>
 800978e:	2301      	movs	r3, #1
 8009790:	4632      	mov	r2, r6
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d09b      	beq.n	80096d4 <_printf_i+0x164>
 800979c:	3501      	adds	r5, #1
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	9903      	ldr	r1, [sp, #12]
 80097a2:	1a5b      	subs	r3, r3, r1
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dcf2      	bgt.n	800978e <_printf_i+0x21e>
 80097a8:	e7eb      	b.n	8009782 <_printf_i+0x212>
 80097aa:	2500      	movs	r5, #0
 80097ac:	f104 0619 	add.w	r6, r4, #25
 80097b0:	e7f5      	b.n	800979e <_printf_i+0x22e>
 80097b2:	bf00      	nop
 80097b4:	0800ca96 	.word	0x0800ca96
 80097b8:	0800caa7 	.word	0x0800caa7

080097bc <siprintf>:
 80097bc:	b40e      	push	{r1, r2, r3}
 80097be:	b500      	push	{lr}
 80097c0:	b09c      	sub	sp, #112	; 0x70
 80097c2:	ab1d      	add	r3, sp, #116	; 0x74
 80097c4:	9002      	str	r0, [sp, #8]
 80097c6:	9006      	str	r0, [sp, #24]
 80097c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097cc:	4809      	ldr	r0, [pc, #36]	; (80097f4 <siprintf+0x38>)
 80097ce:	9107      	str	r1, [sp, #28]
 80097d0:	9104      	str	r1, [sp, #16]
 80097d2:	4909      	ldr	r1, [pc, #36]	; (80097f8 <siprintf+0x3c>)
 80097d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d8:	9105      	str	r1, [sp, #20]
 80097da:	6800      	ldr	r0, [r0, #0]
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	a902      	add	r1, sp, #8
 80097e0:	f001 fb26 	bl	800ae30 <_svfiprintf_r>
 80097e4:	9b02      	ldr	r3, [sp, #8]
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]
 80097ea:	b01c      	add	sp, #112	; 0x70
 80097ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f0:	b003      	add	sp, #12
 80097f2:	4770      	bx	lr
 80097f4:	200004c8 	.word	0x200004c8
 80097f8:	ffff0208 	.word	0xffff0208

080097fc <quorem>:
 80097fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	6903      	ldr	r3, [r0, #16]
 8009802:	690c      	ldr	r4, [r1, #16]
 8009804:	42a3      	cmp	r3, r4
 8009806:	4607      	mov	r7, r0
 8009808:	f2c0 8081 	blt.w	800990e <quorem+0x112>
 800980c:	3c01      	subs	r4, #1
 800980e:	f101 0814 	add.w	r8, r1, #20
 8009812:	f100 0514 	add.w	r5, r0, #20
 8009816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009824:	3301      	adds	r3, #1
 8009826:	429a      	cmp	r2, r3
 8009828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800982c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009830:	fbb2 f6f3 	udiv	r6, r2, r3
 8009834:	d331      	bcc.n	800989a <quorem+0x9e>
 8009836:	f04f 0e00 	mov.w	lr, #0
 800983a:	4640      	mov	r0, r8
 800983c:	46ac      	mov	ip, r5
 800983e:	46f2      	mov	sl, lr
 8009840:	f850 2b04 	ldr.w	r2, [r0], #4
 8009844:	b293      	uxth	r3, r2
 8009846:	fb06 e303 	mla	r3, r6, r3, lr
 800984a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800984e:	b29b      	uxth	r3, r3
 8009850:	ebaa 0303 	sub.w	r3, sl, r3
 8009854:	0c12      	lsrs	r2, r2, #16
 8009856:	f8dc a000 	ldr.w	sl, [ip]
 800985a:	fb06 e202 	mla	r2, r6, r2, lr
 800985e:	fa13 f38a 	uxtah	r3, r3, sl
 8009862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009866:	fa1f fa82 	uxth.w	sl, r2
 800986a:	f8dc 2000 	ldr.w	r2, [ip]
 800986e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009876:	b29b      	uxth	r3, r3
 8009878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987c:	4581      	cmp	r9, r0
 800987e:	f84c 3b04 	str.w	r3, [ip], #4
 8009882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009886:	d2db      	bcs.n	8009840 <quorem+0x44>
 8009888:	f855 300b 	ldr.w	r3, [r5, fp]
 800988c:	b92b      	cbnz	r3, 800989a <quorem+0x9e>
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	3b04      	subs	r3, #4
 8009892:	429d      	cmp	r5, r3
 8009894:	461a      	mov	r2, r3
 8009896:	d32e      	bcc.n	80098f6 <quorem+0xfa>
 8009898:	613c      	str	r4, [r7, #16]
 800989a:	4638      	mov	r0, r7
 800989c:	f001 f8b2 	bl	800aa04 <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	db24      	blt.n	80098ee <quorem+0xf2>
 80098a4:	3601      	adds	r6, #1
 80098a6:	4628      	mov	r0, r5
 80098a8:	f04f 0c00 	mov.w	ip, #0
 80098ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80098b0:	f8d0 e000 	ldr.w	lr, [r0]
 80098b4:	b293      	uxth	r3, r2
 80098b6:	ebac 0303 	sub.w	r3, ip, r3
 80098ba:	0c12      	lsrs	r2, r2, #16
 80098bc:	fa13 f38e 	uxtah	r3, r3, lr
 80098c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ce:	45c1      	cmp	r9, r8
 80098d0:	f840 3b04 	str.w	r3, [r0], #4
 80098d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098d8:	d2e8      	bcs.n	80098ac <quorem+0xb0>
 80098da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e2:	b922      	cbnz	r2, 80098ee <quorem+0xf2>
 80098e4:	3b04      	subs	r3, #4
 80098e6:	429d      	cmp	r5, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	d30a      	bcc.n	8009902 <quorem+0x106>
 80098ec:	613c      	str	r4, [r7, #16]
 80098ee:	4630      	mov	r0, r6
 80098f0:	b003      	add	sp, #12
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d1cc      	bne.n	8009898 <quorem+0x9c>
 80098fe:	3c01      	subs	r4, #1
 8009900:	e7c7      	b.n	8009892 <quorem+0x96>
 8009902:	6812      	ldr	r2, [r2, #0]
 8009904:	3b04      	subs	r3, #4
 8009906:	2a00      	cmp	r2, #0
 8009908:	d1f0      	bne.n	80098ec <quorem+0xf0>
 800990a:	3c01      	subs	r4, #1
 800990c:	e7eb      	b.n	80098e6 <quorem+0xea>
 800990e:	2000      	movs	r0, #0
 8009910:	e7ee      	b.n	80098f0 <quorem+0xf4>
 8009912:	0000      	movs	r0, r0
 8009914:	0000      	movs	r0, r0
	...

08009918 <_dtoa_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	ed2d 8b02 	vpush	{d8}
 8009920:	ec57 6b10 	vmov	r6, r7, d0
 8009924:	b095      	sub	sp, #84	; 0x54
 8009926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800992c:	9105      	str	r1, [sp, #20]
 800992e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009932:	4604      	mov	r4, r0
 8009934:	9209      	str	r2, [sp, #36]	; 0x24
 8009936:	930f      	str	r3, [sp, #60]	; 0x3c
 8009938:	b975      	cbnz	r5, 8009958 <_dtoa_r+0x40>
 800993a:	2010      	movs	r0, #16
 800993c:	f000 fddc 	bl	800a4f8 <malloc>
 8009940:	4602      	mov	r2, r0
 8009942:	6260      	str	r0, [r4, #36]	; 0x24
 8009944:	b920      	cbnz	r0, 8009950 <_dtoa_r+0x38>
 8009946:	4bb2      	ldr	r3, [pc, #712]	; (8009c10 <_dtoa_r+0x2f8>)
 8009948:	21ea      	movs	r1, #234	; 0xea
 800994a:	48b2      	ldr	r0, [pc, #712]	; (8009c14 <_dtoa_r+0x2fc>)
 800994c:	f001 fb80 	bl	800b050 <__assert_func>
 8009950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009954:	6005      	str	r5, [r0, #0]
 8009956:	60c5      	str	r5, [r0, #12]
 8009958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	b151      	cbz	r1, 8009974 <_dtoa_r+0x5c>
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	604a      	str	r2, [r1, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	4093      	lsls	r3, r2
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fe0d 	bl	800a588 <_Bfree>
 800996e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	1e3b      	subs	r3, r7, #0
 8009976:	bfb9      	ittee	lt
 8009978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800997c:	9303      	strlt	r3, [sp, #12]
 800997e:	2300      	movge	r3, #0
 8009980:	f8c8 3000 	strge.w	r3, [r8]
 8009984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <_dtoa_r+0x300>)
 800998a:	bfbc      	itt	lt
 800998c:	2201      	movlt	r2, #1
 800998e:	f8c8 2000 	strlt.w	r2, [r8]
 8009992:	ea33 0309 	bics.w	r3, r3, r9
 8009996:	d11b      	bne.n	80099d0 <_dtoa_r+0xb8>
 8009998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800999a:	f242 730f 	movw	r3, #9999	; 0x270f
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099a4:	4333      	orrs	r3, r6
 80099a6:	f000 857a 	beq.w	800a49e <_dtoa_r+0xb86>
 80099aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ac:	b963      	cbnz	r3, 80099c8 <_dtoa_r+0xb0>
 80099ae:	4b9b      	ldr	r3, [pc, #620]	; (8009c1c <_dtoa_r+0x304>)
 80099b0:	e024      	b.n	80099fc <_dtoa_r+0xe4>
 80099b2:	4b9b      	ldr	r3, [pc, #620]	; (8009c20 <_dtoa_r+0x308>)
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	3308      	adds	r3, #8
 80099b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	9800      	ldr	r0, [sp, #0]
 80099be:	b015      	add	sp, #84	; 0x54
 80099c0:	ecbd 8b02 	vpop	{d8}
 80099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c8:	4b94      	ldr	r3, [pc, #592]	; (8009c1c <_dtoa_r+0x304>)
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	3303      	adds	r3, #3
 80099ce:	e7f3      	b.n	80099b8 <_dtoa_r+0xa0>
 80099d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	ec51 0b17 	vmov	r0, r1, d7
 80099da:	2300      	movs	r3, #0
 80099dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099e0:	f7f7 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e4:	4680      	mov	r8, r0
 80099e6:	b158      	cbz	r0, 8009a00 <_dtoa_r+0xe8>
 80099e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ea:	2301      	movs	r3, #1
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 8551 	beq.w	800a498 <_dtoa_r+0xb80>
 80099f6:	488b      	ldr	r0, [pc, #556]	; (8009c24 <_dtoa_r+0x30c>)
 80099f8:	6018      	str	r0, [r3, #0]
 80099fa:	1e43      	subs	r3, r0, #1
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	e7dd      	b.n	80099bc <_dtoa_r+0xa4>
 8009a00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a04:	aa12      	add	r2, sp, #72	; 0x48
 8009a06:	a913      	add	r1, sp, #76	; 0x4c
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f001 f89f 	bl	800ab4c <__d2b>
 8009a0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a12:	4683      	mov	fp, r0
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d07c      	beq.n	8009b12 <_dtoa_r+0x1fa>
 8009a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a32:	4b7d      	ldr	r3, [pc, #500]	; (8009c28 <_dtoa_r+0x310>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fc2d 	bl	8000298 <__aeabi_dsub>
 8009a3e:	a36e      	add	r3, pc, #440	; (adr r3, 8009bf8 <_dtoa_r+0x2e0>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fde0 	bl	8000608 <__aeabi_dmul>
 8009a48:	a36d      	add	r3, pc, #436	; (adr r3, 8009c00 <_dtoa_r+0x2e8>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fc25 	bl	800029c <__adddf3>
 8009a52:	4606      	mov	r6, r0
 8009a54:	4628      	mov	r0, r5
 8009a56:	460f      	mov	r7, r1
 8009a58:	f7f6 fd6c 	bl	8000534 <__aeabi_i2d>
 8009a5c:	a36a      	add	r3, pc, #424	; (adr r3, 8009c08 <_dtoa_r+0x2f0>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f6 fc15 	bl	800029c <__adddf3>
 8009a72:	4606      	mov	r6, r0
 8009a74:	460f      	mov	r7, r1
 8009a76:	f7f7 f877 	bl	8000b68 <__aeabi_d2iz>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f7 f832 	bl	8000aec <__aeabi_dcmplt>
 8009a88:	b148      	cbz	r0, 8009a9e <_dtoa_r+0x186>
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	f7f6 fd52 	bl	8000534 <__aeabi_i2d>
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	f7f7 f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a98:	b908      	cbnz	r0, 8009a9e <_dtoa_r+0x186>
 8009a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a9e:	f1ba 0f16 	cmp.w	sl, #22
 8009aa2:	d854      	bhi.n	8009b4e <_dtoa_r+0x236>
 8009aa4:	4b61      	ldr	r3, [pc, #388]	; (8009c2c <_dtoa_r+0x314>)
 8009aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ab2:	f7f7 f81b 	bl	8000aec <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d04b      	beq.n	8009b52 <_dtoa_r+0x23a>
 8009aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009abe:	2300      	movs	r3, #0
 8009ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ac4:	1b5d      	subs	r5, r3, r5
 8009ac6:	1e6b      	subs	r3, r5, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	bf43      	ittte	mi
 8009acc:	2300      	movmi	r3, #0
 8009ace:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ad2:	9304      	strmi	r3, [sp, #16]
 8009ad4:	f04f 0800 	movpl.w	r8, #0
 8009ad8:	f1ba 0f00 	cmp.w	sl, #0
 8009adc:	db3b      	blt.n	8009b56 <_dtoa_r+0x23e>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009ae4:	4453      	add	r3, sl
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9306      	str	r3, [sp, #24]
 8009aec:	9b05      	ldr	r3, [sp, #20]
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d869      	bhi.n	8009bc6 <_dtoa_r+0x2ae>
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	bfc4      	itt	gt
 8009af6:	3b04      	subgt	r3, #4
 8009af8:	9305      	strgt	r3, [sp, #20]
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	f1a3 0302 	sub.w	r3, r3, #2
 8009b00:	bfcc      	ite	gt
 8009b02:	2500      	movgt	r5, #0
 8009b04:	2501      	movle	r5, #1
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d869      	bhi.n	8009bde <_dtoa_r+0x2c6>
 8009b0a:	e8df f003 	tbb	[pc, r3]
 8009b0e:	4e2c      	.short	0x4e2c
 8009b10:	5a4c      	.short	0x5a4c
 8009b12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b16:	441d      	add	r5, r3
 8009b18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	bfc1      	itttt	gt
 8009b20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b28:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b30:	bfda      	itte	le
 8009b32:	f1c3 0320 	rsble	r3, r3, #32
 8009b36:	fa06 f003 	lslle.w	r0, r6, r3
 8009b3a:	4318      	orrgt	r0, r3
 8009b3c:	f7f6 fcea 	bl	8000514 <__aeabi_ui2d>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4606      	mov	r6, r0
 8009b44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b48:	3d01      	subs	r5, #1
 8009b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b4c:	e771      	b.n	8009a32 <_dtoa_r+0x11a>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e7b6      	b.n	8009ac0 <_dtoa_r+0x1a8>
 8009b52:	900e      	str	r0, [sp, #56]	; 0x38
 8009b54:	e7b5      	b.n	8009ac2 <_dtoa_r+0x1aa>
 8009b56:	f1ca 0300 	rsb	r3, sl, #0
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	eba8 080a 	sub.w	r8, r8, sl
 8009b62:	930d      	str	r3, [sp, #52]	; 0x34
 8009b64:	e7c2      	b.n	8009aec <_dtoa_r+0x1d4>
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dc39      	bgt.n	8009be4 <_dtoa_r+0x2cc>
 8009b70:	f04f 0901 	mov.w	r9, #1
 8009b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b78:	464b      	mov	r3, r9
 8009b7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b80:	2200      	movs	r2, #0
 8009b82:	6042      	str	r2, [r0, #4]
 8009b84:	2204      	movs	r2, #4
 8009b86:	f102 0614 	add.w	r6, r2, #20
 8009b8a:	429e      	cmp	r6, r3
 8009b8c:	6841      	ldr	r1, [r0, #4]
 8009b8e:	d92f      	bls.n	8009bf0 <_dtoa_r+0x2d8>
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fcb9 	bl	800a508 <_Balloc>
 8009b96:	9000      	str	r0, [sp, #0]
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d14b      	bne.n	8009c34 <_dtoa_r+0x31c>
 8009b9c:	4b24      	ldr	r3, [pc, #144]	; (8009c30 <_dtoa_r+0x318>)
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ba4:	e6d1      	b.n	800994a <_dtoa_r+0x32>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7de      	b.n	8009b68 <_dtoa_r+0x250>
 8009baa:	2300      	movs	r3, #0
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	eb0a 0903 	add.w	r9, sl, r3
 8009bb4:	f109 0301 	add.w	r3, r9, #1
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	bfb8      	it	lt
 8009bbe:	2301      	movlt	r3, #1
 8009bc0:	e7dd      	b.n	8009b7e <_dtoa_r+0x266>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e7f2      	b.n	8009bac <_dtoa_r+0x294>
 8009bc6:	2501      	movs	r5, #1
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	9508      	str	r5, [sp, #32]
 8009bce:	f04f 39ff 	mov.w	r9, #4294967295
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bd8:	2312      	movs	r3, #18
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	e7cf      	b.n	8009b7e <_dtoa_r+0x266>
 8009bde:	2301      	movs	r3, #1
 8009be0:	9308      	str	r3, [sp, #32]
 8009be2:	e7f4      	b.n	8009bce <_dtoa_r+0x2b6>
 8009be4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bec:	464b      	mov	r3, r9
 8009bee:	e7c6      	b.n	8009b7e <_dtoa_r+0x266>
 8009bf0:	3101      	adds	r1, #1
 8009bf2:	6041      	str	r1, [r0, #4]
 8009bf4:	0052      	lsls	r2, r2, #1
 8009bf6:	e7c6      	b.n	8009b86 <_dtoa_r+0x26e>
 8009bf8:	636f4361 	.word	0x636f4361
 8009bfc:	3fd287a7 	.word	0x3fd287a7
 8009c00:	8b60c8b3 	.word	0x8b60c8b3
 8009c04:	3fc68a28 	.word	0x3fc68a28
 8009c08:	509f79fb 	.word	0x509f79fb
 8009c0c:	3fd34413 	.word	0x3fd34413
 8009c10:	0800cac5 	.word	0x0800cac5
 8009c14:	0800cadc 	.word	0x0800cadc
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	0800cac1 	.word	0x0800cac1
 8009c20:	0800cab8 	.word	0x0800cab8
 8009c24:	0800ca95 	.word	0x0800ca95
 8009c28:	3ff80000 	.word	0x3ff80000
 8009c2c:	0800cbd8 	.word	0x0800cbd8
 8009c30:	0800cb3b 	.word	0x0800cb3b
 8009c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c36:	9a00      	ldr	r2, [sp, #0]
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	2b0e      	cmp	r3, #14
 8009c3e:	f200 80ad 	bhi.w	8009d9c <_dtoa_r+0x484>
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	f000 80aa 	beq.w	8009d9c <_dtoa_r+0x484>
 8009c48:	f1ba 0f00 	cmp.w	sl, #0
 8009c4c:	dd36      	ble.n	8009cbc <_dtoa_r+0x3a4>
 8009c4e:	4ac3      	ldr	r2, [pc, #780]	; (8009f5c <_dtoa_r+0x644>)
 8009c50:	f00a 030f 	and.w	r3, sl, #15
 8009c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c58:	ed93 7b00 	vldr	d7, [r3]
 8009c5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c64:	eeb0 8a47 	vmov.f32	s16, s14
 8009c68:	eef0 8a67 	vmov.f32	s17, s15
 8009c6c:	d016      	beq.n	8009c9c <_dtoa_r+0x384>
 8009c6e:	4bbc      	ldr	r3, [pc, #752]	; (8009f60 <_dtoa_r+0x648>)
 8009c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c78:	f7f6 fdf0 	bl	800085c <__aeabi_ddiv>
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	f007 070f 	and.w	r7, r7, #15
 8009c84:	2503      	movs	r5, #3
 8009c86:	4eb6      	ldr	r6, [pc, #728]	; (8009f60 <_dtoa_r+0x648>)
 8009c88:	b957      	cbnz	r7, 8009ca0 <_dtoa_r+0x388>
 8009c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c8e:	ec53 2b18 	vmov	r2, r3, d8
 8009c92:	f7f6 fde3 	bl	800085c <__aeabi_ddiv>
 8009c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c9a:	e029      	b.n	8009cf0 <_dtoa_r+0x3d8>
 8009c9c:	2502      	movs	r5, #2
 8009c9e:	e7f2      	b.n	8009c86 <_dtoa_r+0x36e>
 8009ca0:	07f9      	lsls	r1, r7, #31
 8009ca2:	d508      	bpl.n	8009cb6 <_dtoa_r+0x39e>
 8009ca4:	ec51 0b18 	vmov	r0, r1, d8
 8009ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cac:	f7f6 fcac 	bl	8000608 <__aeabi_dmul>
 8009cb0:	ec41 0b18 	vmov	d8, r0, r1
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	107f      	asrs	r7, r7, #1
 8009cb8:	3608      	adds	r6, #8
 8009cba:	e7e5      	b.n	8009c88 <_dtoa_r+0x370>
 8009cbc:	f000 80a6 	beq.w	8009e0c <_dtoa_r+0x4f4>
 8009cc0:	f1ca 0600 	rsb	r6, sl, #0
 8009cc4:	4ba5      	ldr	r3, [pc, #660]	; (8009f5c <_dtoa_r+0x644>)
 8009cc6:	4fa6      	ldr	r7, [pc, #664]	; (8009f60 <_dtoa_r+0x648>)
 8009cc8:	f006 020f 	and.w	r2, r6, #15
 8009ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce0:	1136      	asrs	r6, r6, #4
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2502      	movs	r5, #2
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	f040 8085 	bne.w	8009df6 <_dtoa_r+0x4de>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1d2      	bne.n	8009c96 <_dtoa_r+0x37e>
 8009cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 808c 	beq.w	8009e10 <_dtoa_r+0x4f8>
 8009cf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cfc:	4b99      	ldr	r3, [pc, #612]	; (8009f64 <_dtoa_r+0x64c>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fef2 	bl	8000aec <__aeabi_dcmplt>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f000 8081 	beq.w	8009e10 <_dtoa_r+0x4f8>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d07d      	beq.n	8009e10 <_dtoa_r+0x4f8>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	dd3c      	ble.n	8009d94 <_dtoa_r+0x47c>
 8009d1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b91      	ldr	r3, [pc, #580]	; (8009f68 <_dtoa_r+0x650>)
 8009d24:	4630      	mov	r0, r6
 8009d26:	4639      	mov	r1, r7
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d30:	3501      	adds	r5, #1
 8009d32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	4632      	mov	r2, r6
 8009d42:	463b      	mov	r3, r7
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	4b88      	ldr	r3, [pc, #544]	; (8009f6c <_dtoa_r+0x654>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7f6 faa6 	bl	800029c <__adddf3>
 8009d50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	9303      	str	r3, [sp, #12]
 8009d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d15c      	bne.n	8009e1a <_dtoa_r+0x502>
 8009d60:	4b83      	ldr	r3, [pc, #524]	; (8009f70 <_dtoa_r+0x658>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	4630      	mov	r0, r6
 8009d66:	4639      	mov	r1, r7
 8009d68:	f7f6 fa96 	bl	8000298 <__aeabi_dsub>
 8009d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	f7f6 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f040 8296 	bne.w	800a2aa <_dtoa_r+0x992>
 8009d7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d82:	4630      	mov	r0, r6
 8009d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 feaf 	bl	8000aec <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 8288 	bne.w	800a2a4 <_dtoa_r+0x98c>
 8009d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f2c0 8158 	blt.w	800a054 <_dtoa_r+0x73c>
 8009da4:	f1ba 0f0e 	cmp.w	sl, #14
 8009da8:	f300 8154 	bgt.w	800a054 <_dtoa_r+0x73c>
 8009dac:	4b6b      	ldr	r3, [pc, #428]	; (8009f5c <_dtoa_r+0x644>)
 8009dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009db2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f280 80e3 	bge.w	8009f84 <_dtoa_r+0x66c>
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f300 80df 	bgt.w	8009f84 <_dtoa_r+0x66c>
 8009dc6:	f040 826d 	bne.w	800a2a4 <_dtoa_r+0x98c>
 8009dca:	4b69      	ldr	r3, [pc, #420]	; (8009f70 <_dtoa_r+0x658>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4640      	mov	r0, r8
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	f7f6 fc19 	bl	8000608 <__aeabi_dmul>
 8009dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dda:	f7f6 fe9b 	bl	8000b14 <__aeabi_dcmpge>
 8009dde:	9e01      	ldr	r6, [sp, #4]
 8009de0:	4637      	mov	r7, r6
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f040 8243 	bne.w	800a26e <_dtoa_r+0x956>
 8009de8:	9d00      	ldr	r5, [sp, #0]
 8009dea:	2331      	movs	r3, #49	; 0x31
 8009dec:	f805 3b01 	strb.w	r3, [r5], #1
 8009df0:	f10a 0a01 	add.w	sl, sl, #1
 8009df4:	e23f      	b.n	800a276 <_dtoa_r+0x95e>
 8009df6:	07f2      	lsls	r2, r6, #31
 8009df8:	d505      	bpl.n	8009e06 <_dtoa_r+0x4ee>
 8009dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	3501      	adds	r5, #1
 8009e04:	2301      	movs	r3, #1
 8009e06:	1076      	asrs	r6, r6, #1
 8009e08:	3708      	adds	r7, #8
 8009e0a:	e76c      	b.n	8009ce6 <_dtoa_r+0x3ce>
 8009e0c:	2502      	movs	r5, #2
 8009e0e:	e76f      	b.n	8009cf0 <_dtoa_r+0x3d8>
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e16:	930c      	str	r3, [sp, #48]	; 0x30
 8009e18:	e78d      	b.n	8009d36 <_dtoa_r+0x41e>
 8009e1a:	9900      	ldr	r1, [sp, #0]
 8009e1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e20:	4b4e      	ldr	r3, [pc, #312]	; (8009f5c <_dtoa_r+0x644>)
 8009e22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e26:	4401      	add	r1, r0
 8009e28:	9102      	str	r1, [sp, #8]
 8009e2a:	9908      	ldr	r1, [sp, #32]
 8009e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009e30:	eef0 8a67 	vmov.f32	s17, s15
 8009e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d045      	beq.n	8009ecc <_dtoa_r+0x5b4>
 8009e40:	494c      	ldr	r1, [pc, #304]	; (8009f74 <_dtoa_r+0x65c>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7f6 fd0a 	bl	800085c <__aeabi_ddiv>
 8009e48:	ec53 2b18 	vmov	r2, r3, d8
 8009e4c:	f7f6 fa24 	bl	8000298 <__aeabi_dsub>
 8009e50:	9d00      	ldr	r5, [sp, #0]
 8009e52:	ec41 0b18 	vmov	d8, r0, r1
 8009e56:	4639      	mov	r1, r7
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7f6 fe85 	bl	8000b68 <__aeabi_d2iz>
 8009e5e:	900c      	str	r0, [sp, #48]	; 0x30
 8009e60:	f7f6 fb68 	bl	8000534 <__aeabi_i2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fa14 	bl	8000298 <__aeabi_dsub>
 8009e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e72:	3330      	adds	r3, #48	; 0x30
 8009e74:	f805 3b01 	strb.w	r3, [r5], #1
 8009e78:	ec53 2b18 	vmov	r2, r3, d8
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	f7f6 fe34 	bl	8000aec <__aeabi_dcmplt>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d165      	bne.n	8009f54 <_dtoa_r+0x63c>
 8009e88:	4632      	mov	r2, r6
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4935      	ldr	r1, [pc, #212]	; (8009f64 <_dtoa_r+0x64c>)
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f7f6 fa02 	bl	8000298 <__aeabi_dsub>
 8009e94:	ec53 2b18 	vmov	r2, r3, d8
 8009e98:	f7f6 fe28 	bl	8000aec <__aeabi_dcmplt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f040 80b9 	bne.w	800a014 <_dtoa_r+0x6fc>
 8009ea2:	9b02      	ldr	r3, [sp, #8]
 8009ea4:	429d      	cmp	r5, r3
 8009ea6:	f43f af75 	beq.w	8009d94 <_dtoa_r+0x47c>
 8009eaa:	4b2f      	ldr	r3, [pc, #188]	; (8009f68 <_dtoa_r+0x650>)
 8009eac:	ec51 0b18 	vmov	r0, r1, d8
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f7f6 fba9 	bl	8000608 <__aeabi_dmul>
 8009eb6:	4b2c      	ldr	r3, [pc, #176]	; (8009f68 <_dtoa_r+0x650>)
 8009eb8:	ec41 0b18 	vmov	d8, r0, r1
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 fba1 	bl	8000608 <__aeabi_dmul>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	e7c4      	b.n	8009e56 <_dtoa_r+0x53e>
 8009ecc:	ec51 0b17 	vmov	r0, r1, d7
 8009ed0:	f7f6 fb9a 	bl	8000608 <__aeabi_dmul>
 8009ed4:	9b02      	ldr	r3, [sp, #8]
 8009ed6:	9d00      	ldr	r5, [sp, #0]
 8009ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8009eda:	ec41 0b18 	vmov	d8, r0, r1
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7f6 fe41 	bl	8000b68 <__aeabi_d2iz>
 8009ee6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ee8:	f7f6 fb24 	bl	8000534 <__aeabi_i2d>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 f9d0 	bl	8000298 <__aeabi_dsub>
 8009ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009efa:	3330      	adds	r3, #48	; 0x30
 8009efc:	f805 3b01 	strb.w	r3, [r5], #1
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	429d      	cmp	r5, r3
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	f04f 0200 	mov.w	r2, #0
 8009f0c:	d134      	bne.n	8009f78 <_dtoa_r+0x660>
 8009f0e:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <_dtoa_r+0x65c>)
 8009f10:	ec51 0b18 	vmov	r0, r1, d8
 8009f14:	f7f6 f9c2 	bl	800029c <__adddf3>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d175      	bne.n	800a014 <_dtoa_r+0x6fc>
 8009f28:	ec53 2b18 	vmov	r2, r3, d8
 8009f2c:	4911      	ldr	r1, [pc, #68]	; (8009f74 <_dtoa_r+0x65c>)
 8009f2e:	2000      	movs	r0, #0
 8009f30:	f7f6 f9b2 	bl	8000298 <__aeabi_dsub>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fdd6 	bl	8000aec <__aeabi_dcmplt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f43f af27 	beq.w	8009d94 <_dtoa_r+0x47c>
 8009f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f48:	1e6b      	subs	r3, r5, #1
 8009f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f50:	2b30      	cmp	r3, #48	; 0x30
 8009f52:	d0f8      	beq.n	8009f46 <_dtoa_r+0x62e>
 8009f54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f58:	e04a      	b.n	8009ff0 <_dtoa_r+0x6d8>
 8009f5a:	bf00      	nop
 8009f5c:	0800cbd8 	.word	0x0800cbd8
 8009f60:	0800cbb0 	.word	0x0800cbb0
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	401c0000 	.word	0x401c0000
 8009f70:	40140000 	.word	0x40140000
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	4baf      	ldr	r3, [pc, #700]	; (800a238 <_dtoa_r+0x920>)
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	e7ac      	b.n	8009ede <_dtoa_r+0x5c6>
 8009f84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f88:	9d00      	ldr	r5, [sp, #0]
 8009f8a:	4642      	mov	r2, r8
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 fc63 	bl	800085c <__aeabi_ddiv>
 8009f96:	f7f6 fde7 	bl	8000b68 <__aeabi_d2iz>
 8009f9a:	9002      	str	r0, [sp, #8]
 8009f9c:	f7f6 faca 	bl	8000534 <__aeabi_i2d>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	f7f6 fb30 	bl	8000608 <__aeabi_dmul>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 f972 	bl	8000298 <__aeabi_dsub>
 8009fb4:	9e02      	ldr	r6, [sp, #8]
 8009fb6:	9f01      	ldr	r7, [sp, #4]
 8009fb8:	3630      	adds	r6, #48	; 0x30
 8009fba:	f805 6b01 	strb.w	r6, [r5], #1
 8009fbe:	9e00      	ldr	r6, [sp, #0]
 8009fc0:	1bae      	subs	r6, r5, r6
 8009fc2:	42b7      	cmp	r7, r6
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	d137      	bne.n	800a03a <_dtoa_r+0x722>
 8009fca:	f7f6 f967 	bl	800029c <__adddf3>
 8009fce:	4642      	mov	r2, r8
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	f7f6 fda7 	bl	8000b28 <__aeabi_dcmpgt>
 8009fda:	b9c8      	cbnz	r0, 800a010 <_dtoa_r+0x6f8>
 8009fdc:	4642      	mov	r2, r8
 8009fde:	464b      	mov	r3, r9
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fe8:	b110      	cbz	r0, 8009ff0 <_dtoa_r+0x6d8>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	07d9      	lsls	r1, r3, #31
 8009fee:	d40f      	bmi.n	800a010 <_dtoa_r+0x6f8>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f000 fac8 	bl	800a588 <_Bfree>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	702b      	strb	r3, [r5, #0]
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ffe:	f10a 0001 	add.w	r0, sl, #1
 800a002:	6018      	str	r0, [r3, #0]
 800a004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a006:	2b00      	cmp	r3, #0
 800a008:	f43f acd8 	beq.w	80099bc <_dtoa_r+0xa4>
 800a00c:	601d      	str	r5, [r3, #0]
 800a00e:	e4d5      	b.n	80099bc <_dtoa_r+0xa4>
 800a010:	f8cd a01c 	str.w	sl, [sp, #28]
 800a014:	462b      	mov	r3, r5
 800a016:	461d      	mov	r5, r3
 800a018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a01c:	2a39      	cmp	r2, #57	; 0x39
 800a01e:	d108      	bne.n	800a032 <_dtoa_r+0x71a>
 800a020:	9a00      	ldr	r2, [sp, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d1f7      	bne.n	800a016 <_dtoa_r+0x6fe>
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	9900      	ldr	r1, [sp, #0]
 800a02a:	3201      	adds	r2, #1
 800a02c:	9207      	str	r2, [sp, #28]
 800a02e:	2230      	movs	r2, #48	; 0x30
 800a030:	700a      	strb	r2, [r1, #0]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	3201      	adds	r2, #1
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e78c      	b.n	8009f54 <_dtoa_r+0x63c>
 800a03a:	4b7f      	ldr	r3, [pc, #508]	; (800a238 <_dtoa_r+0x920>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7f6 fae3 	bl	8000608 <__aeabi_dmul>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	f7f6 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d09b      	beq.n	8009f8a <_dtoa_r+0x672>
 800a052:	e7cd      	b.n	8009ff0 <_dtoa_r+0x6d8>
 800a054:	9a08      	ldr	r2, [sp, #32]
 800a056:	2a00      	cmp	r2, #0
 800a058:	f000 80c4 	beq.w	800a1e4 <_dtoa_r+0x8cc>
 800a05c:	9a05      	ldr	r2, [sp, #20]
 800a05e:	2a01      	cmp	r2, #1
 800a060:	f300 80a8 	bgt.w	800a1b4 <_dtoa_r+0x89c>
 800a064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a066:	2a00      	cmp	r2, #0
 800a068:	f000 80a0 	beq.w	800a1ac <_dtoa_r+0x894>
 800a06c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a070:	9e06      	ldr	r6, [sp, #24]
 800a072:	4645      	mov	r5, r8
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	2101      	movs	r1, #1
 800a078:	441a      	add	r2, r3
 800a07a:	4620      	mov	r0, r4
 800a07c:	4498      	add	r8, r3
 800a07e:	9204      	str	r2, [sp, #16]
 800a080:	f000 fb3e 	bl	800a700 <__i2b>
 800a084:	4607      	mov	r7, r0
 800a086:	2d00      	cmp	r5, #0
 800a088:	dd0b      	ble.n	800a0a2 <_dtoa_r+0x78a>
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd08      	ble.n	800a0a2 <_dtoa_r+0x78a>
 800a090:	42ab      	cmp	r3, r5
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	bfa8      	it	ge
 800a096:	462b      	movge	r3, r5
 800a098:	eba8 0803 	sub.w	r8, r8, r3
 800a09c:	1aed      	subs	r5, r5, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	b1fb      	cbz	r3, 800a0e6 <_dtoa_r+0x7ce>
 800a0a6:	9b08      	ldr	r3, [sp, #32]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 809f 	beq.w	800a1ec <_dtoa_r+0x8d4>
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	dd11      	ble.n	800a0d6 <_dtoa_r+0x7be>
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 fbde 	bl	800a878 <__pow5mult>
 800a0bc:	465a      	mov	r2, fp
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fb32 	bl	800a72c <__multiply>
 800a0c8:	4659      	mov	r1, fp
 800a0ca:	9007      	str	r0, [sp, #28]
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fa5b 	bl	800a588 <_Bfree>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	469b      	mov	fp, r3
 800a0d6:	9b06      	ldr	r3, [sp, #24]
 800a0d8:	1b9a      	subs	r2, r3, r6
 800a0da:	d004      	beq.n	800a0e6 <_dtoa_r+0x7ce>
 800a0dc:	4659      	mov	r1, fp
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 fbca 	bl	800a878 <__pow5mult>
 800a0e4:	4683      	mov	fp, r0
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fb09 	bl	800a700 <__i2b>
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	dd7c      	ble.n	800a1f0 <_dtoa_r+0x8d8>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 fbbc 	bl	800a878 <__pow5mult>
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	4606      	mov	r6, r0
 800a106:	dd76      	ble.n	800a1f6 <_dtoa_r+0x8de>
 800a108:	2300      	movs	r3, #0
 800a10a:	9306      	str	r3, [sp, #24]
 800a10c:	6933      	ldr	r3, [r6, #16]
 800a10e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a112:	6918      	ldr	r0, [r3, #16]
 800a114:	f000 faa4 	bl	800a660 <__hi0bits>
 800a118:	f1c0 0020 	rsb	r0, r0, #32
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	4418      	add	r0, r3
 800a120:	f010 001f 	ands.w	r0, r0, #31
 800a124:	f000 8086 	beq.w	800a234 <_dtoa_r+0x91c>
 800a128:	f1c0 0320 	rsb	r3, r0, #32
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	dd7f      	ble.n	800a230 <_dtoa_r+0x918>
 800a130:	f1c0 001c 	rsb	r0, r0, #28
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	4403      	add	r3, r0
 800a138:	4480      	add	r8, r0
 800a13a:	4405      	add	r5, r0
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	dd05      	ble.n	800a150 <_dtoa_r+0x838>
 800a144:	4659      	mov	r1, fp
 800a146:	4642      	mov	r2, r8
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fbef 	bl	800a92c <__lshift>
 800a14e:	4683      	mov	fp, r0
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd05      	ble.n	800a162 <_dtoa_r+0x84a>
 800a156:	4631      	mov	r1, r6
 800a158:	461a      	mov	r2, r3
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fbe6 	bl	800a92c <__lshift>
 800a160:	4606      	mov	r6, r0
 800a162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	d069      	beq.n	800a23c <_dtoa_r+0x924>
 800a168:	4631      	mov	r1, r6
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fc4a 	bl	800aa04 <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	da63      	bge.n	800a23c <_dtoa_r+0x924>
 800a174:	2300      	movs	r3, #0
 800a176:	4659      	mov	r1, fp
 800a178:	220a      	movs	r2, #10
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 fa26 	bl	800a5cc <__multadd>
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a186:	4683      	mov	fp, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 818f 	beq.w	800a4ac <_dtoa_r+0xb94>
 800a18e:	4639      	mov	r1, r7
 800a190:	2300      	movs	r3, #0
 800a192:	220a      	movs	r2, #10
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fa19 	bl	800a5cc <__multadd>
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	4607      	mov	r7, r0
 800a1a0:	f300 808e 	bgt.w	800a2c0 <_dtoa_r+0x9a8>
 800a1a4:	9b05      	ldr	r3, [sp, #20]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	dc50      	bgt.n	800a24c <_dtoa_r+0x934>
 800a1aa:	e089      	b.n	800a2c0 <_dtoa_r+0x9a8>
 800a1ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1b2:	e75d      	b.n	800a070 <_dtoa_r+0x758>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	1e5e      	subs	r6, r3, #1
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	42b3      	cmp	r3, r6
 800a1bc:	bfbf      	itttt	lt
 800a1be:	9b06      	ldrlt	r3, [sp, #24]
 800a1c0:	9606      	strlt	r6, [sp, #24]
 800a1c2:	1af2      	sublt	r2, r6, r3
 800a1c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1c6:	bfb6      	itet	lt
 800a1c8:	189b      	addlt	r3, r3, r2
 800a1ca:	1b9e      	subge	r6, r3, r6
 800a1cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	bfb8      	it	lt
 800a1d2:	2600      	movlt	r6, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bfb5      	itete	lt
 800a1d8:	eba8 0503 	sublt.w	r5, r8, r3
 800a1dc:	9b01      	ldrge	r3, [sp, #4]
 800a1de:	2300      	movlt	r3, #0
 800a1e0:	4645      	movge	r5, r8
 800a1e2:	e747      	b.n	800a074 <_dtoa_r+0x75c>
 800a1e4:	9e06      	ldr	r6, [sp, #24]
 800a1e6:	9f08      	ldr	r7, [sp, #32]
 800a1e8:	4645      	mov	r5, r8
 800a1ea:	e74c      	b.n	800a086 <_dtoa_r+0x76e>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	e775      	b.n	800a0dc <_dtoa_r+0x7c4>
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	dc18      	bgt.n	800a228 <_dtoa_r+0x910>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	b9b3      	cbnz	r3, 800a228 <_dtoa_r+0x910>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a200:	b9a3      	cbnz	r3, 800a22c <_dtoa_r+0x914>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a208:	0d1b      	lsrs	r3, r3, #20
 800a20a:	051b      	lsls	r3, r3, #20
 800a20c:	b12b      	cbz	r3, 800a21a <_dtoa_r+0x902>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	f108 0801 	add.w	r8, r8, #1
 800a218:	2301      	movs	r3, #1
 800a21a:	9306      	str	r3, [sp, #24]
 800a21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f47f af74 	bne.w	800a10c <_dtoa_r+0x7f4>
 800a224:	2001      	movs	r0, #1
 800a226:	e779      	b.n	800a11c <_dtoa_r+0x804>
 800a228:	2300      	movs	r3, #0
 800a22a:	e7f6      	b.n	800a21a <_dtoa_r+0x902>
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	e7f4      	b.n	800a21a <_dtoa_r+0x902>
 800a230:	d085      	beq.n	800a13e <_dtoa_r+0x826>
 800a232:	4618      	mov	r0, r3
 800a234:	301c      	adds	r0, #28
 800a236:	e77d      	b.n	800a134 <_dtoa_r+0x81c>
 800a238:	40240000 	.word	0x40240000
 800a23c:	9b01      	ldr	r3, [sp, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dc38      	bgt.n	800a2b4 <_dtoa_r+0x99c>
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	2b02      	cmp	r3, #2
 800a246:	dd35      	ble.n	800a2b4 <_dtoa_r+0x99c>
 800a248:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	d10d      	bne.n	800a26e <_dtoa_r+0x956>
 800a252:	4631      	mov	r1, r6
 800a254:	464b      	mov	r3, r9
 800a256:	2205      	movs	r2, #5
 800a258:	4620      	mov	r0, r4
 800a25a:	f000 f9b7 	bl	800a5cc <__multadd>
 800a25e:	4601      	mov	r1, r0
 800a260:	4606      	mov	r6, r0
 800a262:	4658      	mov	r0, fp
 800a264:	f000 fbce 	bl	800aa04 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	f73f adbd 	bgt.w	8009de8 <_dtoa_r+0x4d0>
 800a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a270:	9d00      	ldr	r5, [sp, #0]
 800a272:	ea6f 0a03 	mvn.w	sl, r3
 800a276:	f04f 0800 	mov.w	r8, #0
 800a27a:	4631      	mov	r1, r6
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 f983 	bl	800a588 <_Bfree>
 800a282:	2f00      	cmp	r7, #0
 800a284:	f43f aeb4 	beq.w	8009ff0 <_dtoa_r+0x6d8>
 800a288:	f1b8 0f00 	cmp.w	r8, #0
 800a28c:	d005      	beq.n	800a29a <_dtoa_r+0x982>
 800a28e:	45b8      	cmp	r8, r7
 800a290:	d003      	beq.n	800a29a <_dtoa_r+0x982>
 800a292:	4641      	mov	r1, r8
 800a294:	4620      	mov	r0, r4
 800a296:	f000 f977 	bl	800a588 <_Bfree>
 800a29a:	4639      	mov	r1, r7
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 f973 	bl	800a588 <_Bfree>
 800a2a2:	e6a5      	b.n	8009ff0 <_dtoa_r+0x6d8>
 800a2a4:	2600      	movs	r6, #0
 800a2a6:	4637      	mov	r7, r6
 800a2a8:	e7e1      	b.n	800a26e <_dtoa_r+0x956>
 800a2aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2b0:	4637      	mov	r7, r6
 800a2b2:	e599      	b.n	8009de8 <_dtoa_r+0x4d0>
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 80fd 	beq.w	800a4ba <_dtoa_r+0xba2>
 800a2c0:	2d00      	cmp	r5, #0
 800a2c2:	dd05      	ble.n	800a2d0 <_dtoa_r+0x9b8>
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fb2f 	bl	800a92c <__lshift>
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05c      	beq.n	800a390 <_dtoa_r+0xa78>
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 f915 	bl	800a508 <_Balloc>
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <_dtoa_r+0x9d6>
 800a2e2:	4b80      	ldr	r3, [pc, #512]	; (800a4e4 <_dtoa_r+0xbcc>)
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2ea:	f7ff bb2e 	b.w	800994a <_dtoa_r+0x32>
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	0092      	lsls	r2, r2, #2
 800a2f4:	f107 010c 	add.w	r1, r7, #12
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f7fe fddf 	bl	8008ebc <memcpy>
 800a2fe:	2201      	movs	r2, #1
 800a300:	4629      	mov	r1, r5
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fb12 	bl	800a92c <__lshift>
 800a308:	9b00      	ldr	r3, [sp, #0]
 800a30a:	3301      	adds	r3, #1
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	444b      	add	r3, r9
 800a312:	9307      	str	r3, [sp, #28]
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	46b8      	mov	r8, r7
 800a31c:	9306      	str	r3, [sp, #24]
 800a31e:	4607      	mov	r7, r0
 800a320:	9b01      	ldr	r3, [sp, #4]
 800a322:	4631      	mov	r1, r6
 800a324:	3b01      	subs	r3, #1
 800a326:	4658      	mov	r0, fp
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	f7ff fa67 	bl	80097fc <quorem>
 800a32e:	4603      	mov	r3, r0
 800a330:	3330      	adds	r3, #48	; 0x30
 800a332:	9004      	str	r0, [sp, #16]
 800a334:	4641      	mov	r1, r8
 800a336:	4658      	mov	r0, fp
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	f000 fb63 	bl	800aa04 <__mcmp>
 800a33e:	463a      	mov	r2, r7
 800a340:	4681      	mov	r9, r0
 800a342:	4631      	mov	r1, r6
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fb79 	bl	800aa3c <__mdiff>
 800a34a:	68c2      	ldr	r2, [r0, #12]
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	4605      	mov	r5, r0
 800a350:	bb02      	cbnz	r2, 800a394 <_dtoa_r+0xa7c>
 800a352:	4601      	mov	r1, r0
 800a354:	4658      	mov	r0, fp
 800a356:	f000 fb55 	bl	800aa04 <__mcmp>
 800a35a:	9b08      	ldr	r3, [sp, #32]
 800a35c:	4602      	mov	r2, r0
 800a35e:	4629      	mov	r1, r5
 800a360:	4620      	mov	r0, r4
 800a362:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a366:	f000 f90f 	bl	800a588 <_Bfree>
 800a36a:	9b05      	ldr	r3, [sp, #20]
 800a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36e:	9d01      	ldr	r5, [sp, #4]
 800a370:	ea43 0102 	orr.w	r1, r3, r2
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	430b      	orrs	r3, r1
 800a378:	9b08      	ldr	r3, [sp, #32]
 800a37a:	d10d      	bne.n	800a398 <_dtoa_r+0xa80>
 800a37c:	2b39      	cmp	r3, #57	; 0x39
 800a37e:	d029      	beq.n	800a3d4 <_dtoa_r+0xabc>
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dd01      	ble.n	800a38a <_dtoa_r+0xa72>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3331      	adds	r3, #49	; 0x31
 800a38a:	9a02      	ldr	r2, [sp, #8]
 800a38c:	7013      	strb	r3, [r2, #0]
 800a38e:	e774      	b.n	800a27a <_dtoa_r+0x962>
 800a390:	4638      	mov	r0, r7
 800a392:	e7b9      	b.n	800a308 <_dtoa_r+0x9f0>
 800a394:	2201      	movs	r2, #1
 800a396:	e7e2      	b.n	800a35e <_dtoa_r+0xa46>
 800a398:	f1b9 0f00 	cmp.w	r9, #0
 800a39c:	db06      	blt.n	800a3ac <_dtoa_r+0xa94>
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	ea41 0909 	orr.w	r9, r1, r9
 800a3a4:	9906      	ldr	r1, [sp, #24]
 800a3a6:	ea59 0101 	orrs.w	r1, r9, r1
 800a3aa:	d120      	bne.n	800a3ee <_dtoa_r+0xad6>
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	ddec      	ble.n	800a38a <_dtoa_r+0xa72>
 800a3b0:	4659      	mov	r1, fp
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	f000 fab8 	bl	800a92c <__lshift>
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4683      	mov	fp, r0
 800a3c0:	f000 fb20 	bl	800aa04 <__mcmp>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	dc02      	bgt.n	800a3d0 <_dtoa_r+0xab8>
 800a3ca:	d1de      	bne.n	800a38a <_dtoa_r+0xa72>
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	d5dc      	bpl.n	800a38a <_dtoa_r+0xa72>
 800a3d0:	2b39      	cmp	r3, #57	; 0x39
 800a3d2:	d1d8      	bne.n	800a386 <_dtoa_r+0xa6e>
 800a3d4:	9a02      	ldr	r2, [sp, #8]
 800a3d6:	2339      	movs	r3, #57	; 0x39
 800a3d8:	7013      	strb	r3, [r2, #0]
 800a3da:	462b      	mov	r3, r5
 800a3dc:	461d      	mov	r5, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3e4:	2a39      	cmp	r2, #57	; 0x39
 800a3e6:	d050      	beq.n	800a48a <_dtoa_r+0xb72>
 800a3e8:	3201      	adds	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e745      	b.n	800a27a <_dtoa_r+0x962>
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	dd03      	ble.n	800a3fa <_dtoa_r+0xae2>
 800a3f2:	2b39      	cmp	r3, #57	; 0x39
 800a3f4:	d0ee      	beq.n	800a3d4 <_dtoa_r+0xabc>
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	e7c7      	b.n	800a38a <_dtoa_r+0xa72>
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	9907      	ldr	r1, [sp, #28]
 800a3fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a402:	428a      	cmp	r2, r1
 800a404:	d02a      	beq.n	800a45c <_dtoa_r+0xb44>
 800a406:	4659      	mov	r1, fp
 800a408:	2300      	movs	r3, #0
 800a40a:	220a      	movs	r2, #10
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 f8dd 	bl	800a5cc <__multadd>
 800a412:	45b8      	cmp	r8, r7
 800a414:	4683      	mov	fp, r0
 800a416:	f04f 0300 	mov.w	r3, #0
 800a41a:	f04f 020a 	mov.w	r2, #10
 800a41e:	4641      	mov	r1, r8
 800a420:	4620      	mov	r0, r4
 800a422:	d107      	bne.n	800a434 <_dtoa_r+0xb1c>
 800a424:	f000 f8d2 	bl	800a5cc <__multadd>
 800a428:	4680      	mov	r8, r0
 800a42a:	4607      	mov	r7, r0
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	3301      	adds	r3, #1
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	e775      	b.n	800a320 <_dtoa_r+0xa08>
 800a434:	f000 f8ca 	bl	800a5cc <__multadd>
 800a438:	4639      	mov	r1, r7
 800a43a:	4680      	mov	r8, r0
 800a43c:	2300      	movs	r3, #0
 800a43e:	220a      	movs	r2, #10
 800a440:	4620      	mov	r0, r4
 800a442:	f000 f8c3 	bl	800a5cc <__multadd>
 800a446:	4607      	mov	r7, r0
 800a448:	e7f0      	b.n	800a42c <_dtoa_r+0xb14>
 800a44a:	f1b9 0f00 	cmp.w	r9, #0
 800a44e:	9a00      	ldr	r2, [sp, #0]
 800a450:	bfcc      	ite	gt
 800a452:	464d      	movgt	r5, r9
 800a454:	2501      	movle	r5, #1
 800a456:	4415      	add	r5, r2
 800a458:	f04f 0800 	mov.w	r8, #0
 800a45c:	4659      	mov	r1, fp
 800a45e:	2201      	movs	r2, #1
 800a460:	4620      	mov	r0, r4
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	f000 fa62 	bl	800a92c <__lshift>
 800a468:	4631      	mov	r1, r6
 800a46a:	4683      	mov	fp, r0
 800a46c:	f000 faca 	bl	800aa04 <__mcmp>
 800a470:	2800      	cmp	r0, #0
 800a472:	dcb2      	bgt.n	800a3da <_dtoa_r+0xac2>
 800a474:	d102      	bne.n	800a47c <_dtoa_r+0xb64>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d4ae      	bmi.n	800a3da <_dtoa_r+0xac2>
 800a47c:	462b      	mov	r3, r5
 800a47e:	461d      	mov	r5, r3
 800a480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a484:	2a30      	cmp	r2, #48	; 0x30
 800a486:	d0fa      	beq.n	800a47e <_dtoa_r+0xb66>
 800a488:	e6f7      	b.n	800a27a <_dtoa_r+0x962>
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d1a5      	bne.n	800a3dc <_dtoa_r+0xac4>
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	2331      	movs	r3, #49	; 0x31
 800a496:	e779      	b.n	800a38c <_dtoa_r+0xa74>
 800a498:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <_dtoa_r+0xbd0>)
 800a49a:	f7ff baaf 	b.w	80099fc <_dtoa_r+0xe4>
 800a49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f47f aa86 	bne.w	80099b2 <_dtoa_r+0x9a>
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <_dtoa_r+0xbd4>)
 800a4a8:	f7ff baa8 	b.w	80099fc <_dtoa_r+0xe4>
 800a4ac:	f1b9 0f00 	cmp.w	r9, #0
 800a4b0:	dc03      	bgt.n	800a4ba <_dtoa_r+0xba2>
 800a4b2:	9b05      	ldr	r3, [sp, #20]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	f73f aec9 	bgt.w	800a24c <_dtoa_r+0x934>
 800a4ba:	9d00      	ldr	r5, [sp, #0]
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4658      	mov	r0, fp
 800a4c0:	f7ff f99c 	bl	80097fc <quorem>
 800a4c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a4cc:	9a00      	ldr	r2, [sp, #0]
 800a4ce:	1aaa      	subs	r2, r5, r2
 800a4d0:	4591      	cmp	r9, r2
 800a4d2:	ddba      	ble.n	800a44a <_dtoa_r+0xb32>
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f876 	bl	800a5cc <__multadd>
 800a4e0:	4683      	mov	fp, r0
 800a4e2:	e7eb      	b.n	800a4bc <_dtoa_r+0xba4>
 800a4e4:	0800cb3b 	.word	0x0800cb3b
 800a4e8:	0800ca94 	.word	0x0800ca94
 800a4ec:	0800cab8 	.word	0x0800cab8

0800a4f0 <_localeconv_r>:
 800a4f0:	4800      	ldr	r0, [pc, #0]	; (800a4f4 <_localeconv_r+0x4>)
 800a4f2:	4770      	bx	lr
 800a4f4:	2000061c 	.word	0x2000061c

0800a4f8 <malloc>:
 800a4f8:	4b02      	ldr	r3, [pc, #8]	; (800a504 <malloc+0xc>)
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	f000 bbe1 	b.w	800acc4 <_malloc_r>
 800a502:	bf00      	nop
 800a504:	200004c8 	.word	0x200004c8

0800a508 <_Balloc>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a50c:	4604      	mov	r4, r0
 800a50e:	460d      	mov	r5, r1
 800a510:	b976      	cbnz	r6, 800a530 <_Balloc+0x28>
 800a512:	2010      	movs	r0, #16
 800a514:	f7ff fff0 	bl	800a4f8 <malloc>
 800a518:	4602      	mov	r2, r0
 800a51a:	6260      	str	r0, [r4, #36]	; 0x24
 800a51c:	b920      	cbnz	r0, 800a528 <_Balloc+0x20>
 800a51e:	4b18      	ldr	r3, [pc, #96]	; (800a580 <_Balloc+0x78>)
 800a520:	4818      	ldr	r0, [pc, #96]	; (800a584 <_Balloc+0x7c>)
 800a522:	2166      	movs	r1, #102	; 0x66
 800a524:	f000 fd94 	bl	800b050 <__assert_func>
 800a528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a52c:	6006      	str	r6, [r0, #0]
 800a52e:	60c6      	str	r6, [r0, #12]
 800a530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a532:	68f3      	ldr	r3, [r6, #12]
 800a534:	b183      	cbz	r3, 800a558 <_Balloc+0x50>
 800a536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a53e:	b9b8      	cbnz	r0, 800a570 <_Balloc+0x68>
 800a540:	2101      	movs	r1, #1
 800a542:	fa01 f605 	lsl.w	r6, r1, r5
 800a546:	1d72      	adds	r2, r6, #5
 800a548:	0092      	lsls	r2, r2, #2
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 fb5a 	bl	800ac04 <_calloc_r>
 800a550:	b160      	cbz	r0, 800a56c <_Balloc+0x64>
 800a552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a556:	e00e      	b.n	800a576 <_Balloc+0x6e>
 800a558:	2221      	movs	r2, #33	; 0x21
 800a55a:	2104      	movs	r1, #4
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 fb51 	bl	800ac04 <_calloc_r>
 800a562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a564:	60f0      	str	r0, [r6, #12]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e4      	bne.n	800a536 <_Balloc+0x2e>
 800a56c:	2000      	movs	r0, #0
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	6802      	ldr	r2, [r0, #0]
 800a572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a576:	2300      	movs	r3, #0
 800a578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a57c:	e7f7      	b.n	800a56e <_Balloc+0x66>
 800a57e:	bf00      	nop
 800a580:	0800cac5 	.word	0x0800cac5
 800a584:	0800cb4c 	.word	0x0800cb4c

0800a588 <_Bfree>:
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a58c:	4605      	mov	r5, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	b976      	cbnz	r6, 800a5b0 <_Bfree+0x28>
 800a592:	2010      	movs	r0, #16
 800a594:	f7ff ffb0 	bl	800a4f8 <malloc>
 800a598:	4602      	mov	r2, r0
 800a59a:	6268      	str	r0, [r5, #36]	; 0x24
 800a59c:	b920      	cbnz	r0, 800a5a8 <_Bfree+0x20>
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <_Bfree+0x3c>)
 800a5a0:	4809      	ldr	r0, [pc, #36]	; (800a5c8 <_Bfree+0x40>)
 800a5a2:	218a      	movs	r1, #138	; 0x8a
 800a5a4:	f000 fd54 	bl	800b050 <__assert_func>
 800a5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5ac:	6006      	str	r6, [r0, #0]
 800a5ae:	60c6      	str	r6, [r0, #12]
 800a5b0:	b13c      	cbz	r4, 800a5c2 <_Bfree+0x3a>
 800a5b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5b4:	6862      	ldr	r2, [r4, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5bc:	6021      	str	r1, [r4, #0]
 800a5be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	0800cac5 	.word	0x0800cac5
 800a5c8:	0800cb4c 	.word	0x0800cb4c

0800a5cc <__multadd>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	690e      	ldr	r6, [r1, #16]
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	4698      	mov	r8, r3
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f101 0014 	add.w	r0, r1, #20
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6805      	ldr	r5, [r0, #0]
 800a5e0:	b2a9      	uxth	r1, r5
 800a5e2:	fb02 8101 	mla	r1, r2, r1, r8
 800a5e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a5ea:	0c2d      	lsrs	r5, r5, #16
 800a5ec:	fb02 c505 	mla	r5, r2, r5, ip
 800a5f0:	b289      	uxth	r1, r1
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a5f8:	429e      	cmp	r6, r3
 800a5fa:	f840 1b04 	str.w	r1, [r0], #4
 800a5fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a602:	dcec      	bgt.n	800a5de <__multadd+0x12>
 800a604:	f1b8 0f00 	cmp.w	r8, #0
 800a608:	d022      	beq.n	800a650 <__multadd+0x84>
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	42b3      	cmp	r3, r6
 800a60e:	dc19      	bgt.n	800a644 <__multadd+0x78>
 800a610:	6861      	ldr	r1, [r4, #4]
 800a612:	4638      	mov	r0, r7
 800a614:	3101      	adds	r1, #1
 800a616:	f7ff ff77 	bl	800a508 <_Balloc>
 800a61a:	4605      	mov	r5, r0
 800a61c:	b928      	cbnz	r0, 800a62a <__multadd+0x5e>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <__multadd+0x8c>)
 800a622:	480e      	ldr	r0, [pc, #56]	; (800a65c <__multadd+0x90>)
 800a624:	21b5      	movs	r1, #181	; 0xb5
 800a626:	f000 fd13 	bl	800b050 <__assert_func>
 800a62a:	6922      	ldr	r2, [r4, #16]
 800a62c:	3202      	adds	r2, #2
 800a62e:	f104 010c 	add.w	r1, r4, #12
 800a632:	0092      	lsls	r2, r2, #2
 800a634:	300c      	adds	r0, #12
 800a636:	f7fe fc41 	bl	8008ebc <memcpy>
 800a63a:	4621      	mov	r1, r4
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff ffa3 	bl	800a588 <_Bfree>
 800a642:	462c      	mov	r4, r5
 800a644:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a648:	3601      	adds	r6, #1
 800a64a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a64e:	6126      	str	r6, [r4, #16]
 800a650:	4620      	mov	r0, r4
 800a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a656:	bf00      	nop
 800a658:	0800cb3b 	.word	0x0800cb3b
 800a65c:	0800cb4c 	.word	0x0800cb4c

0800a660 <__hi0bits>:
 800a660:	0c03      	lsrs	r3, r0, #16
 800a662:	041b      	lsls	r3, r3, #16
 800a664:	b9d3      	cbnz	r3, 800a69c <__hi0bits+0x3c>
 800a666:	0400      	lsls	r0, r0, #16
 800a668:	2310      	movs	r3, #16
 800a66a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a66e:	bf04      	itt	eq
 800a670:	0200      	lsleq	r0, r0, #8
 800a672:	3308      	addeq	r3, #8
 800a674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a678:	bf04      	itt	eq
 800a67a:	0100      	lsleq	r0, r0, #4
 800a67c:	3304      	addeq	r3, #4
 800a67e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a682:	bf04      	itt	eq
 800a684:	0080      	lsleq	r0, r0, #2
 800a686:	3302      	addeq	r3, #2
 800a688:	2800      	cmp	r0, #0
 800a68a:	db05      	blt.n	800a698 <__hi0bits+0x38>
 800a68c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a690:	f103 0301 	add.w	r3, r3, #1
 800a694:	bf08      	it	eq
 800a696:	2320      	moveq	r3, #32
 800a698:	4618      	mov	r0, r3
 800a69a:	4770      	bx	lr
 800a69c:	2300      	movs	r3, #0
 800a69e:	e7e4      	b.n	800a66a <__hi0bits+0xa>

0800a6a0 <__lo0bits>:
 800a6a0:	6803      	ldr	r3, [r0, #0]
 800a6a2:	f013 0207 	ands.w	r2, r3, #7
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	d00b      	beq.n	800a6c2 <__lo0bits+0x22>
 800a6aa:	07da      	lsls	r2, r3, #31
 800a6ac:	d424      	bmi.n	800a6f8 <__lo0bits+0x58>
 800a6ae:	0798      	lsls	r0, r3, #30
 800a6b0:	bf49      	itett	mi
 800a6b2:	085b      	lsrmi	r3, r3, #1
 800a6b4:	089b      	lsrpl	r3, r3, #2
 800a6b6:	2001      	movmi	r0, #1
 800a6b8:	600b      	strmi	r3, [r1, #0]
 800a6ba:	bf5c      	itt	pl
 800a6bc:	600b      	strpl	r3, [r1, #0]
 800a6be:	2002      	movpl	r0, #2
 800a6c0:	4770      	bx	lr
 800a6c2:	b298      	uxth	r0, r3
 800a6c4:	b9b0      	cbnz	r0, 800a6f4 <__lo0bits+0x54>
 800a6c6:	0c1b      	lsrs	r3, r3, #16
 800a6c8:	2010      	movs	r0, #16
 800a6ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a6ce:	bf04      	itt	eq
 800a6d0:	0a1b      	lsreq	r3, r3, #8
 800a6d2:	3008      	addeq	r0, #8
 800a6d4:	071a      	lsls	r2, r3, #28
 800a6d6:	bf04      	itt	eq
 800a6d8:	091b      	lsreq	r3, r3, #4
 800a6da:	3004      	addeq	r0, #4
 800a6dc:	079a      	lsls	r2, r3, #30
 800a6de:	bf04      	itt	eq
 800a6e0:	089b      	lsreq	r3, r3, #2
 800a6e2:	3002      	addeq	r0, #2
 800a6e4:	07da      	lsls	r2, r3, #31
 800a6e6:	d403      	bmi.n	800a6f0 <__lo0bits+0x50>
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	f100 0001 	add.w	r0, r0, #1
 800a6ee:	d005      	beq.n	800a6fc <__lo0bits+0x5c>
 800a6f0:	600b      	str	r3, [r1, #0]
 800a6f2:	4770      	bx	lr
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	e7e8      	b.n	800a6ca <__lo0bits+0x2a>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	4770      	bx	lr
 800a6fc:	2020      	movs	r0, #32
 800a6fe:	4770      	bx	lr

0800a700 <__i2b>:
 800a700:	b510      	push	{r4, lr}
 800a702:	460c      	mov	r4, r1
 800a704:	2101      	movs	r1, #1
 800a706:	f7ff feff 	bl	800a508 <_Balloc>
 800a70a:	4602      	mov	r2, r0
 800a70c:	b928      	cbnz	r0, 800a71a <__i2b+0x1a>
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <__i2b+0x24>)
 800a710:	4805      	ldr	r0, [pc, #20]	; (800a728 <__i2b+0x28>)
 800a712:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a716:	f000 fc9b 	bl	800b050 <__assert_func>
 800a71a:	2301      	movs	r3, #1
 800a71c:	6144      	str	r4, [r0, #20]
 800a71e:	6103      	str	r3, [r0, #16]
 800a720:	bd10      	pop	{r4, pc}
 800a722:	bf00      	nop
 800a724:	0800cb3b 	.word	0x0800cb3b
 800a728:	0800cb4c 	.word	0x0800cb4c

0800a72c <__multiply>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	4614      	mov	r4, r2
 800a732:	690a      	ldr	r2, [r1, #16]
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	429a      	cmp	r2, r3
 800a738:	bfb8      	it	lt
 800a73a:	460b      	movlt	r3, r1
 800a73c:	460d      	mov	r5, r1
 800a73e:	bfbc      	itt	lt
 800a740:	4625      	movlt	r5, r4
 800a742:	461c      	movlt	r4, r3
 800a744:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a748:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a74c:	68ab      	ldr	r3, [r5, #8]
 800a74e:	6869      	ldr	r1, [r5, #4]
 800a750:	eb0a 0709 	add.w	r7, sl, r9
 800a754:	42bb      	cmp	r3, r7
 800a756:	b085      	sub	sp, #20
 800a758:	bfb8      	it	lt
 800a75a:	3101      	addlt	r1, #1
 800a75c:	f7ff fed4 	bl	800a508 <_Balloc>
 800a760:	b930      	cbnz	r0, 800a770 <__multiply+0x44>
 800a762:	4602      	mov	r2, r0
 800a764:	4b42      	ldr	r3, [pc, #264]	; (800a870 <__multiply+0x144>)
 800a766:	4843      	ldr	r0, [pc, #268]	; (800a874 <__multiply+0x148>)
 800a768:	f240 115d 	movw	r1, #349	; 0x15d
 800a76c:	f000 fc70 	bl	800b050 <__assert_func>
 800a770:	f100 0614 	add.w	r6, r0, #20
 800a774:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a778:	4633      	mov	r3, r6
 800a77a:	2200      	movs	r2, #0
 800a77c:	4543      	cmp	r3, r8
 800a77e:	d31e      	bcc.n	800a7be <__multiply+0x92>
 800a780:	f105 0c14 	add.w	ip, r5, #20
 800a784:	f104 0314 	add.w	r3, r4, #20
 800a788:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a78c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a790:	9202      	str	r2, [sp, #8]
 800a792:	ebac 0205 	sub.w	r2, ip, r5
 800a796:	3a15      	subs	r2, #21
 800a798:	f022 0203 	bic.w	r2, r2, #3
 800a79c:	3204      	adds	r2, #4
 800a79e:	f105 0115 	add.w	r1, r5, #21
 800a7a2:	458c      	cmp	ip, r1
 800a7a4:	bf38      	it	cc
 800a7a6:	2204      	movcc	r2, #4
 800a7a8:	9201      	str	r2, [sp, #4]
 800a7aa:	9a02      	ldr	r2, [sp, #8]
 800a7ac:	9303      	str	r3, [sp, #12]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d808      	bhi.n	800a7c4 <__multiply+0x98>
 800a7b2:	2f00      	cmp	r7, #0
 800a7b4:	dc55      	bgt.n	800a862 <__multiply+0x136>
 800a7b6:	6107      	str	r7, [r0, #16]
 800a7b8:	b005      	add	sp, #20
 800a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7be:	f843 2b04 	str.w	r2, [r3], #4
 800a7c2:	e7db      	b.n	800a77c <__multiply+0x50>
 800a7c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7c8:	f1ba 0f00 	cmp.w	sl, #0
 800a7cc:	d020      	beq.n	800a810 <__multiply+0xe4>
 800a7ce:	f105 0e14 	add.w	lr, r5, #20
 800a7d2:	46b1      	mov	r9, r6
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a7da:	f8d9 b000 	ldr.w	fp, [r9]
 800a7de:	b2a1      	uxth	r1, r4
 800a7e0:	fa1f fb8b 	uxth.w	fp, fp
 800a7e4:	fb0a b101 	mla	r1, sl, r1, fp
 800a7e8:	4411      	add	r1, r2
 800a7ea:	f8d9 2000 	ldr.w	r2, [r9]
 800a7ee:	0c24      	lsrs	r4, r4, #16
 800a7f0:	0c12      	lsrs	r2, r2, #16
 800a7f2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a7f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a7fa:	b289      	uxth	r1, r1
 800a7fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a800:	45f4      	cmp	ip, lr
 800a802:	f849 1b04 	str.w	r1, [r9], #4
 800a806:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a80a:	d8e4      	bhi.n	800a7d6 <__multiply+0xaa>
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	5072      	str	r2, [r6, r1]
 800a810:	9a03      	ldr	r2, [sp, #12]
 800a812:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a816:	3304      	adds	r3, #4
 800a818:	f1b9 0f00 	cmp.w	r9, #0
 800a81c:	d01f      	beq.n	800a85e <__multiply+0x132>
 800a81e:	6834      	ldr	r4, [r6, #0]
 800a820:	f105 0114 	add.w	r1, r5, #20
 800a824:	46b6      	mov	lr, r6
 800a826:	f04f 0a00 	mov.w	sl, #0
 800a82a:	880a      	ldrh	r2, [r1, #0]
 800a82c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a830:	fb09 b202 	mla	r2, r9, r2, fp
 800a834:	4492      	add	sl, r2
 800a836:	b2a4      	uxth	r4, r4
 800a838:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a83c:	f84e 4b04 	str.w	r4, [lr], #4
 800a840:	f851 4b04 	ldr.w	r4, [r1], #4
 800a844:	f8be 2000 	ldrh.w	r2, [lr]
 800a848:	0c24      	lsrs	r4, r4, #16
 800a84a:	fb09 2404 	mla	r4, r9, r4, r2
 800a84e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a852:	458c      	cmp	ip, r1
 800a854:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a858:	d8e7      	bhi.n	800a82a <__multiply+0xfe>
 800a85a:	9a01      	ldr	r2, [sp, #4]
 800a85c:	50b4      	str	r4, [r6, r2]
 800a85e:	3604      	adds	r6, #4
 800a860:	e7a3      	b.n	800a7aa <__multiply+0x7e>
 800a862:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1a5      	bne.n	800a7b6 <__multiply+0x8a>
 800a86a:	3f01      	subs	r7, #1
 800a86c:	e7a1      	b.n	800a7b2 <__multiply+0x86>
 800a86e:	bf00      	nop
 800a870:	0800cb3b 	.word	0x0800cb3b
 800a874:	0800cb4c 	.word	0x0800cb4c

0800a878 <__pow5mult>:
 800a878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a87c:	4615      	mov	r5, r2
 800a87e:	f012 0203 	ands.w	r2, r2, #3
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	d007      	beq.n	800a898 <__pow5mult+0x20>
 800a888:	4c25      	ldr	r4, [pc, #148]	; (800a920 <__pow5mult+0xa8>)
 800a88a:	3a01      	subs	r2, #1
 800a88c:	2300      	movs	r3, #0
 800a88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a892:	f7ff fe9b 	bl	800a5cc <__multadd>
 800a896:	4607      	mov	r7, r0
 800a898:	10ad      	asrs	r5, r5, #2
 800a89a:	d03d      	beq.n	800a918 <__pow5mult+0xa0>
 800a89c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a89e:	b97c      	cbnz	r4, 800a8c0 <__pow5mult+0x48>
 800a8a0:	2010      	movs	r0, #16
 800a8a2:	f7ff fe29 	bl	800a4f8 <malloc>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a8aa:	b928      	cbnz	r0, 800a8b8 <__pow5mult+0x40>
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	; (800a924 <__pow5mult+0xac>)
 800a8ae:	481e      	ldr	r0, [pc, #120]	; (800a928 <__pow5mult+0xb0>)
 800a8b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8b4:	f000 fbcc 	bl	800b050 <__assert_func>
 800a8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8bc:	6004      	str	r4, [r0, #0]
 800a8be:	60c4      	str	r4, [r0, #12]
 800a8c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8c8:	b94c      	cbnz	r4, 800a8de <__pow5mult+0x66>
 800a8ca:	f240 2171 	movw	r1, #625	; 0x271
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7ff ff16 	bl	800a700 <__i2b>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8da:	4604      	mov	r4, r0
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	f04f 0900 	mov.w	r9, #0
 800a8e2:	07eb      	lsls	r3, r5, #31
 800a8e4:	d50a      	bpl.n	800a8fc <__pow5mult+0x84>
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ff1e 	bl	800a72c <__multiply>
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff fe47 	bl	800a588 <_Bfree>
 800a8fa:	4647      	mov	r7, r8
 800a8fc:	106d      	asrs	r5, r5, #1
 800a8fe:	d00b      	beq.n	800a918 <__pow5mult+0xa0>
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	b938      	cbnz	r0, 800a914 <__pow5mult+0x9c>
 800a904:	4622      	mov	r2, r4
 800a906:	4621      	mov	r1, r4
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff ff0f 	bl	800a72c <__multiply>
 800a90e:	6020      	str	r0, [r4, #0]
 800a910:	f8c0 9000 	str.w	r9, [r0]
 800a914:	4604      	mov	r4, r0
 800a916:	e7e4      	b.n	800a8e2 <__pow5mult+0x6a>
 800a918:	4638      	mov	r0, r7
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91e:	bf00      	nop
 800a920:	0800cca0 	.word	0x0800cca0
 800a924:	0800cac5 	.word	0x0800cac5
 800a928:	0800cb4c 	.word	0x0800cb4c

0800a92c <__lshift>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	6849      	ldr	r1, [r1, #4]
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a93a:	68a3      	ldr	r3, [r4, #8]
 800a93c:	4607      	mov	r7, r0
 800a93e:	4691      	mov	r9, r2
 800a940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a944:	f108 0601 	add.w	r6, r8, #1
 800a948:	42b3      	cmp	r3, r6
 800a94a:	db0b      	blt.n	800a964 <__lshift+0x38>
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff fddb 	bl	800a508 <_Balloc>
 800a952:	4605      	mov	r5, r0
 800a954:	b948      	cbnz	r0, 800a96a <__lshift+0x3e>
 800a956:	4602      	mov	r2, r0
 800a958:	4b28      	ldr	r3, [pc, #160]	; (800a9fc <__lshift+0xd0>)
 800a95a:	4829      	ldr	r0, [pc, #164]	; (800aa00 <__lshift+0xd4>)
 800a95c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a960:	f000 fb76 	bl	800b050 <__assert_func>
 800a964:	3101      	adds	r1, #1
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	e7ee      	b.n	800a948 <__lshift+0x1c>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f100 0114 	add.w	r1, r0, #20
 800a970:	f100 0210 	add.w	r2, r0, #16
 800a974:	4618      	mov	r0, r3
 800a976:	4553      	cmp	r3, sl
 800a978:	db33      	blt.n	800a9e2 <__lshift+0xb6>
 800a97a:	6920      	ldr	r0, [r4, #16]
 800a97c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a980:	f104 0314 	add.w	r3, r4, #20
 800a984:	f019 091f 	ands.w	r9, r9, #31
 800a988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a98c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a990:	d02b      	beq.n	800a9ea <__lshift+0xbe>
 800a992:	f1c9 0e20 	rsb	lr, r9, #32
 800a996:	468a      	mov	sl, r1
 800a998:	2200      	movs	r2, #0
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	fa00 f009 	lsl.w	r0, r0, r9
 800a9a0:	4302      	orrs	r2, r0
 800a9a2:	f84a 2b04 	str.w	r2, [sl], #4
 800a9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9aa:	459c      	cmp	ip, r3
 800a9ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9b0:	d8f3      	bhi.n	800a99a <__lshift+0x6e>
 800a9b2:	ebac 0304 	sub.w	r3, ip, r4
 800a9b6:	3b15      	subs	r3, #21
 800a9b8:	f023 0303 	bic.w	r3, r3, #3
 800a9bc:	3304      	adds	r3, #4
 800a9be:	f104 0015 	add.w	r0, r4, #21
 800a9c2:	4584      	cmp	ip, r0
 800a9c4:	bf38      	it	cc
 800a9c6:	2304      	movcc	r3, #4
 800a9c8:	50ca      	str	r2, [r1, r3]
 800a9ca:	b10a      	cbz	r2, 800a9d0 <__lshift+0xa4>
 800a9cc:	f108 0602 	add.w	r6, r8, #2
 800a9d0:	3e01      	subs	r6, #1
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	612e      	str	r6, [r5, #16]
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	f7ff fdd6 	bl	800a588 <_Bfree>
 800a9dc:	4628      	mov	r0, r5
 800a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	e7c5      	b.n	800a976 <__lshift+0x4a>
 800a9ea:	3904      	subs	r1, #4
 800a9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9f4:	459c      	cmp	ip, r3
 800a9f6:	d8f9      	bhi.n	800a9ec <__lshift+0xc0>
 800a9f8:	e7ea      	b.n	800a9d0 <__lshift+0xa4>
 800a9fa:	bf00      	nop
 800a9fc:	0800cb3b 	.word	0x0800cb3b
 800aa00:	0800cb4c 	.word	0x0800cb4c

0800aa04 <__mcmp>:
 800aa04:	b530      	push	{r4, r5, lr}
 800aa06:	6902      	ldr	r2, [r0, #16]
 800aa08:	690c      	ldr	r4, [r1, #16]
 800aa0a:	1b12      	subs	r2, r2, r4
 800aa0c:	d10e      	bne.n	800aa2c <__mcmp+0x28>
 800aa0e:	f100 0314 	add.w	r3, r0, #20
 800aa12:	3114      	adds	r1, #20
 800aa14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa24:	42a5      	cmp	r5, r4
 800aa26:	d003      	beq.n	800aa30 <__mcmp+0x2c>
 800aa28:	d305      	bcc.n	800aa36 <__mcmp+0x32>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	bd30      	pop	{r4, r5, pc}
 800aa30:	4283      	cmp	r3, r0
 800aa32:	d3f3      	bcc.n	800aa1c <__mcmp+0x18>
 800aa34:	e7fa      	b.n	800aa2c <__mcmp+0x28>
 800aa36:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3a:	e7f7      	b.n	800aa2c <__mcmp+0x28>

0800aa3c <__mdiff>:
 800aa3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa40:	460c      	mov	r4, r1
 800aa42:	4606      	mov	r6, r0
 800aa44:	4611      	mov	r1, r2
 800aa46:	4620      	mov	r0, r4
 800aa48:	4617      	mov	r7, r2
 800aa4a:	f7ff ffdb 	bl	800aa04 <__mcmp>
 800aa4e:	1e05      	subs	r5, r0, #0
 800aa50:	d110      	bne.n	800aa74 <__mdiff+0x38>
 800aa52:	4629      	mov	r1, r5
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7ff fd57 	bl	800a508 <_Balloc>
 800aa5a:	b930      	cbnz	r0, 800aa6a <__mdiff+0x2e>
 800aa5c:	4b39      	ldr	r3, [pc, #228]	; (800ab44 <__mdiff+0x108>)
 800aa5e:	4602      	mov	r2, r0
 800aa60:	f240 2132 	movw	r1, #562	; 0x232
 800aa64:	4838      	ldr	r0, [pc, #224]	; (800ab48 <__mdiff+0x10c>)
 800aa66:	f000 faf3 	bl	800b050 <__assert_func>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	bfa4      	itt	ge
 800aa76:	463b      	movge	r3, r7
 800aa78:	4627      	movge	r7, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	bfa6      	itte	ge
 800aa80:	461c      	movge	r4, r3
 800aa82:	2500      	movge	r5, #0
 800aa84:	2501      	movlt	r5, #1
 800aa86:	f7ff fd3f 	bl	800a508 <_Balloc>
 800aa8a:	b920      	cbnz	r0, 800aa96 <__mdiff+0x5a>
 800aa8c:	4b2d      	ldr	r3, [pc, #180]	; (800ab44 <__mdiff+0x108>)
 800aa8e:	4602      	mov	r2, r0
 800aa90:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa94:	e7e6      	b.n	800aa64 <__mdiff+0x28>
 800aa96:	693e      	ldr	r6, [r7, #16]
 800aa98:	60c5      	str	r5, [r0, #12]
 800aa9a:	6925      	ldr	r5, [r4, #16]
 800aa9c:	f107 0114 	add.w	r1, r7, #20
 800aaa0:	f104 0914 	add.w	r9, r4, #20
 800aaa4:	f100 0e14 	add.w	lr, r0, #20
 800aaa8:	f107 0210 	add.w	r2, r7, #16
 800aaac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aab0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aab4:	46f2      	mov	sl, lr
 800aab6:	2700      	movs	r7, #0
 800aab8:	f859 3b04 	ldr.w	r3, [r9], #4
 800aabc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aac0:	fa1f f883 	uxth.w	r8, r3
 800aac4:	fa17 f78b 	uxtah	r7, r7, fp
 800aac8:	0c1b      	lsrs	r3, r3, #16
 800aaca:	eba7 0808 	sub.w	r8, r7, r8
 800aace:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aad2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aad6:	fa1f f888 	uxth.w	r8, r8
 800aada:	141f      	asrs	r7, r3, #16
 800aadc:	454d      	cmp	r5, r9
 800aade:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aae2:	f84a 3b04 	str.w	r3, [sl], #4
 800aae6:	d8e7      	bhi.n	800aab8 <__mdiff+0x7c>
 800aae8:	1b2b      	subs	r3, r5, r4
 800aaea:	3b15      	subs	r3, #21
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	3415      	adds	r4, #21
 800aaf4:	42a5      	cmp	r5, r4
 800aaf6:	bf38      	it	cc
 800aaf8:	2304      	movcc	r3, #4
 800aafa:	4419      	add	r1, r3
 800aafc:	4473      	add	r3, lr
 800aafe:	469e      	mov	lr, r3
 800ab00:	460d      	mov	r5, r1
 800ab02:	4565      	cmp	r5, ip
 800ab04:	d30e      	bcc.n	800ab24 <__mdiff+0xe8>
 800ab06:	f10c 0203 	add.w	r2, ip, #3
 800ab0a:	1a52      	subs	r2, r2, r1
 800ab0c:	f022 0203 	bic.w	r2, r2, #3
 800ab10:	3903      	subs	r1, #3
 800ab12:	458c      	cmp	ip, r1
 800ab14:	bf38      	it	cc
 800ab16:	2200      	movcc	r2, #0
 800ab18:	441a      	add	r2, r3
 800ab1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ab1e:	b17b      	cbz	r3, 800ab40 <__mdiff+0x104>
 800ab20:	6106      	str	r6, [r0, #16]
 800ab22:	e7a5      	b.n	800aa70 <__mdiff+0x34>
 800ab24:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab28:	fa17 f488 	uxtah	r4, r7, r8
 800ab2c:	1422      	asrs	r2, r4, #16
 800ab2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ab32:	b2a4      	uxth	r4, r4
 800ab34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ab38:	f84e 4b04 	str.w	r4, [lr], #4
 800ab3c:	1417      	asrs	r7, r2, #16
 800ab3e:	e7e0      	b.n	800ab02 <__mdiff+0xc6>
 800ab40:	3e01      	subs	r6, #1
 800ab42:	e7ea      	b.n	800ab1a <__mdiff+0xde>
 800ab44:	0800cb3b 	.word	0x0800cb3b
 800ab48:	0800cb4c 	.word	0x0800cb4c

0800ab4c <__d2b>:
 800ab4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	4689      	mov	r9, r1
 800ab52:	2101      	movs	r1, #1
 800ab54:	ec57 6b10 	vmov	r6, r7, d0
 800ab58:	4690      	mov	r8, r2
 800ab5a:	f7ff fcd5 	bl	800a508 <_Balloc>
 800ab5e:	4604      	mov	r4, r0
 800ab60:	b930      	cbnz	r0, 800ab70 <__d2b+0x24>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4b25      	ldr	r3, [pc, #148]	; (800abfc <__d2b+0xb0>)
 800ab66:	4826      	ldr	r0, [pc, #152]	; (800ac00 <__d2b+0xb4>)
 800ab68:	f240 310a 	movw	r1, #778	; 0x30a
 800ab6c:	f000 fa70 	bl	800b050 <__assert_func>
 800ab70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab78:	bb35      	cbnz	r5, 800abc8 <__d2b+0x7c>
 800ab7a:	2e00      	cmp	r6, #0
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	d028      	beq.n	800abd2 <__d2b+0x86>
 800ab80:	4668      	mov	r0, sp
 800ab82:	9600      	str	r6, [sp, #0]
 800ab84:	f7ff fd8c 	bl	800a6a0 <__lo0bits>
 800ab88:	9900      	ldr	r1, [sp, #0]
 800ab8a:	b300      	cbz	r0, 800abce <__d2b+0x82>
 800ab8c:	9a01      	ldr	r2, [sp, #4]
 800ab8e:	f1c0 0320 	rsb	r3, r0, #32
 800ab92:	fa02 f303 	lsl.w	r3, r2, r3
 800ab96:	430b      	orrs	r3, r1
 800ab98:	40c2      	lsrs	r2, r0
 800ab9a:	6163      	str	r3, [r4, #20]
 800ab9c:	9201      	str	r2, [sp, #4]
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	61a3      	str	r3, [r4, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	bf14      	ite	ne
 800aba6:	2202      	movne	r2, #2
 800aba8:	2201      	moveq	r2, #1
 800abaa:	6122      	str	r2, [r4, #16]
 800abac:	b1d5      	cbz	r5, 800abe4 <__d2b+0x98>
 800abae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abb2:	4405      	add	r5, r0
 800abb4:	f8c9 5000 	str.w	r5, [r9]
 800abb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abbc:	f8c8 0000 	str.w	r0, [r8]
 800abc0:	4620      	mov	r0, r4
 800abc2:	b003      	add	sp, #12
 800abc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abcc:	e7d5      	b.n	800ab7a <__d2b+0x2e>
 800abce:	6161      	str	r1, [r4, #20]
 800abd0:	e7e5      	b.n	800ab9e <__d2b+0x52>
 800abd2:	a801      	add	r0, sp, #4
 800abd4:	f7ff fd64 	bl	800a6a0 <__lo0bits>
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	6163      	str	r3, [r4, #20]
 800abdc:	2201      	movs	r2, #1
 800abde:	6122      	str	r2, [r4, #16]
 800abe0:	3020      	adds	r0, #32
 800abe2:	e7e3      	b.n	800abac <__d2b+0x60>
 800abe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abec:	f8c9 0000 	str.w	r0, [r9]
 800abf0:	6918      	ldr	r0, [r3, #16]
 800abf2:	f7ff fd35 	bl	800a660 <__hi0bits>
 800abf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abfa:	e7df      	b.n	800abbc <__d2b+0x70>
 800abfc:	0800cb3b 	.word	0x0800cb3b
 800ac00:	0800cb4c 	.word	0x0800cb4c

0800ac04 <_calloc_r>:
 800ac04:	b513      	push	{r0, r1, r4, lr}
 800ac06:	434a      	muls	r2, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	9201      	str	r2, [sp, #4]
 800ac0c:	f000 f85a 	bl	800acc4 <_malloc_r>
 800ac10:	4604      	mov	r4, r0
 800ac12:	b118      	cbz	r0, 800ac1c <_calloc_r+0x18>
 800ac14:	9a01      	ldr	r2, [sp, #4]
 800ac16:	2100      	movs	r1, #0
 800ac18:	f7fe f95e 	bl	8008ed8 <memset>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd10      	pop	{r4, pc}
	...

0800ac24 <_free_r>:
 800ac24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d048      	beq.n	800acbc <_free_r+0x98>
 800ac2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac2e:	9001      	str	r0, [sp, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f1a1 0404 	sub.w	r4, r1, #4
 800ac36:	bfb8      	it	lt
 800ac38:	18e4      	addlt	r4, r4, r3
 800ac3a:	f000 fa65 	bl	800b108 <__malloc_lock>
 800ac3e:	4a20      	ldr	r2, [pc, #128]	; (800acc0 <_free_r+0x9c>)
 800ac40:	9801      	ldr	r0, [sp, #4]
 800ac42:	6813      	ldr	r3, [r2, #0]
 800ac44:	4615      	mov	r5, r2
 800ac46:	b933      	cbnz	r3, 800ac56 <_free_r+0x32>
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	6014      	str	r4, [r2, #0]
 800ac4c:	b003      	add	sp, #12
 800ac4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac52:	f000 ba5f 	b.w	800b114 <__malloc_unlock>
 800ac56:	42a3      	cmp	r3, r4
 800ac58:	d90b      	bls.n	800ac72 <_free_r+0x4e>
 800ac5a:	6821      	ldr	r1, [r4, #0]
 800ac5c:	1862      	adds	r2, r4, r1
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	bf04      	itt	eq
 800ac62:	681a      	ldreq	r2, [r3, #0]
 800ac64:	685b      	ldreq	r3, [r3, #4]
 800ac66:	6063      	str	r3, [r4, #4]
 800ac68:	bf04      	itt	eq
 800ac6a:	1852      	addeq	r2, r2, r1
 800ac6c:	6022      	streq	r2, [r4, #0]
 800ac6e:	602c      	str	r4, [r5, #0]
 800ac70:	e7ec      	b.n	800ac4c <_free_r+0x28>
 800ac72:	461a      	mov	r2, r3
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b10b      	cbz	r3, 800ac7c <_free_r+0x58>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d9fa      	bls.n	800ac72 <_free_r+0x4e>
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	1855      	adds	r5, r2, r1
 800ac80:	42a5      	cmp	r5, r4
 800ac82:	d10b      	bne.n	800ac9c <_free_r+0x78>
 800ac84:	6824      	ldr	r4, [r4, #0]
 800ac86:	4421      	add	r1, r4
 800ac88:	1854      	adds	r4, r2, r1
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	d1dd      	bne.n	800ac4c <_free_r+0x28>
 800ac90:	681c      	ldr	r4, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	4421      	add	r1, r4
 800ac98:	6011      	str	r1, [r2, #0]
 800ac9a:	e7d7      	b.n	800ac4c <_free_r+0x28>
 800ac9c:	d902      	bls.n	800aca4 <_free_r+0x80>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	e7d3      	b.n	800ac4c <_free_r+0x28>
 800aca4:	6825      	ldr	r5, [r4, #0]
 800aca6:	1961      	adds	r1, r4, r5
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf04      	itt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	6063      	str	r3, [r4, #4]
 800acb2:	bf04      	itt	eq
 800acb4:	1949      	addeq	r1, r1, r5
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6054      	str	r4, [r2, #4]
 800acba:	e7c7      	b.n	800ac4c <_free_r+0x28>
 800acbc:	b003      	add	sp, #12
 800acbe:	bd30      	pop	{r4, r5, pc}
 800acc0:	200006dc 	.word	0x200006dc

0800acc4 <_malloc_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	1ccd      	adds	r5, r1, #3
 800acc8:	f025 0503 	bic.w	r5, r5, #3
 800accc:	3508      	adds	r5, #8
 800acce:	2d0c      	cmp	r5, #12
 800acd0:	bf38      	it	cc
 800acd2:	250c      	movcc	r5, #12
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	4606      	mov	r6, r0
 800acd8:	db01      	blt.n	800acde <_malloc_r+0x1a>
 800acda:	42a9      	cmp	r1, r5
 800acdc:	d903      	bls.n	800ace6 <_malloc_r+0x22>
 800acde:	230c      	movs	r3, #12
 800ace0:	6033      	str	r3, [r6, #0]
 800ace2:	2000      	movs	r0, #0
 800ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace6:	f000 fa0f 	bl	800b108 <__malloc_lock>
 800acea:	4921      	ldr	r1, [pc, #132]	; (800ad70 <_malloc_r+0xac>)
 800acec:	680a      	ldr	r2, [r1, #0]
 800acee:	4614      	mov	r4, r2
 800acf0:	b99c      	cbnz	r4, 800ad1a <_malloc_r+0x56>
 800acf2:	4f20      	ldr	r7, [pc, #128]	; (800ad74 <_malloc_r+0xb0>)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	b923      	cbnz	r3, 800ad02 <_malloc_r+0x3e>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 f998 	bl	800b030 <_sbrk_r>
 800ad00:	6038      	str	r0, [r7, #0]
 800ad02:	4629      	mov	r1, r5
 800ad04:	4630      	mov	r0, r6
 800ad06:	f000 f993 	bl	800b030 <_sbrk_r>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d123      	bne.n	800ad56 <_malloc_r+0x92>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	6033      	str	r3, [r6, #0]
 800ad12:	4630      	mov	r0, r6
 800ad14:	f000 f9fe 	bl	800b114 <__malloc_unlock>
 800ad18:	e7e3      	b.n	800ace2 <_malloc_r+0x1e>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	1b5b      	subs	r3, r3, r5
 800ad1e:	d417      	bmi.n	800ad50 <_malloc_r+0x8c>
 800ad20:	2b0b      	cmp	r3, #11
 800ad22:	d903      	bls.n	800ad2c <_malloc_r+0x68>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	441c      	add	r4, r3
 800ad28:	6025      	str	r5, [r4, #0]
 800ad2a:	e004      	b.n	800ad36 <_malloc_r+0x72>
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	42a2      	cmp	r2, r4
 800ad30:	bf0c      	ite	eq
 800ad32:	600b      	streq	r3, [r1, #0]
 800ad34:	6053      	strne	r3, [r2, #4]
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 f9ec 	bl	800b114 <__malloc_unlock>
 800ad3c:	f104 000b 	add.w	r0, r4, #11
 800ad40:	1d23      	adds	r3, r4, #4
 800ad42:	f020 0007 	bic.w	r0, r0, #7
 800ad46:	1ac2      	subs	r2, r0, r3
 800ad48:	d0cc      	beq.n	800ace4 <_malloc_r+0x20>
 800ad4a:	1a1b      	subs	r3, r3, r0
 800ad4c:	50a3      	str	r3, [r4, r2]
 800ad4e:	e7c9      	b.n	800ace4 <_malloc_r+0x20>
 800ad50:	4622      	mov	r2, r4
 800ad52:	6864      	ldr	r4, [r4, #4]
 800ad54:	e7cc      	b.n	800acf0 <_malloc_r+0x2c>
 800ad56:	1cc4      	adds	r4, r0, #3
 800ad58:	f024 0403 	bic.w	r4, r4, #3
 800ad5c:	42a0      	cmp	r0, r4
 800ad5e:	d0e3      	beq.n	800ad28 <_malloc_r+0x64>
 800ad60:	1a21      	subs	r1, r4, r0
 800ad62:	4630      	mov	r0, r6
 800ad64:	f000 f964 	bl	800b030 <_sbrk_r>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d1dd      	bne.n	800ad28 <_malloc_r+0x64>
 800ad6c:	e7cf      	b.n	800ad0e <_malloc_r+0x4a>
 800ad6e:	bf00      	nop
 800ad70:	200006dc 	.word	0x200006dc
 800ad74:	200006e0 	.word	0x200006e0

0800ad78 <__ssputs_r>:
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	688e      	ldr	r6, [r1, #8]
 800ad7e:	429e      	cmp	r6, r3
 800ad80:	4682      	mov	sl, r0
 800ad82:	460c      	mov	r4, r1
 800ad84:	4690      	mov	r8, r2
 800ad86:	461f      	mov	r7, r3
 800ad88:	d838      	bhi.n	800adfc <__ssputs_r+0x84>
 800ad8a:	898a      	ldrh	r2, [r1, #12]
 800ad8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad90:	d032      	beq.n	800adf8 <__ssputs_r+0x80>
 800ad92:	6825      	ldr	r5, [r4, #0]
 800ad94:	6909      	ldr	r1, [r1, #16]
 800ad96:	eba5 0901 	sub.w	r9, r5, r1
 800ad9a:	6965      	ldr	r5, [r4, #20]
 800ad9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ada0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ada4:	3301      	adds	r3, #1
 800ada6:	444b      	add	r3, r9
 800ada8:	106d      	asrs	r5, r5, #1
 800adaa:	429d      	cmp	r5, r3
 800adac:	bf38      	it	cc
 800adae:	461d      	movcc	r5, r3
 800adb0:	0553      	lsls	r3, r2, #21
 800adb2:	d531      	bpl.n	800ae18 <__ssputs_r+0xa0>
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7ff ff85 	bl	800acc4 <_malloc_r>
 800adba:	4606      	mov	r6, r0
 800adbc:	b950      	cbnz	r0, 800add4 <__ssputs_r+0x5c>
 800adbe:	230c      	movs	r3, #12
 800adc0:	f8ca 3000 	str.w	r3, [sl]
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	6921      	ldr	r1, [r4, #16]
 800add6:	464a      	mov	r2, r9
 800add8:	f7fe f870 	bl	8008ebc <memcpy>
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ade2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	6126      	str	r6, [r4, #16]
 800adea:	6165      	str	r5, [r4, #20]
 800adec:	444e      	add	r6, r9
 800adee:	eba5 0509 	sub.w	r5, r5, r9
 800adf2:	6026      	str	r6, [r4, #0]
 800adf4:	60a5      	str	r5, [r4, #8]
 800adf6:	463e      	mov	r6, r7
 800adf8:	42be      	cmp	r6, r7
 800adfa:	d900      	bls.n	800adfe <__ssputs_r+0x86>
 800adfc:	463e      	mov	r6, r7
 800adfe:	4632      	mov	r2, r6
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	4641      	mov	r1, r8
 800ae04:	f000 f966 	bl	800b0d4 <memmove>
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	6822      	ldr	r2, [r4, #0]
 800ae0c:	1b9b      	subs	r3, r3, r6
 800ae0e:	4432      	add	r2, r6
 800ae10:	60a3      	str	r3, [r4, #8]
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	2000      	movs	r0, #0
 800ae16:	e7db      	b.n	800add0 <__ssputs_r+0x58>
 800ae18:	462a      	mov	r2, r5
 800ae1a:	f000 f981 	bl	800b120 <_realloc_r>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d1e1      	bne.n	800ade8 <__ssputs_r+0x70>
 800ae24:	6921      	ldr	r1, [r4, #16]
 800ae26:	4650      	mov	r0, sl
 800ae28:	f7ff fefc 	bl	800ac24 <_free_r>
 800ae2c:	e7c7      	b.n	800adbe <__ssputs_r+0x46>
	...

0800ae30 <_svfiprintf_r>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	4698      	mov	r8, r3
 800ae36:	898b      	ldrh	r3, [r1, #12]
 800ae38:	061b      	lsls	r3, r3, #24
 800ae3a:	b09d      	sub	sp, #116	; 0x74
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	460d      	mov	r5, r1
 800ae40:	4614      	mov	r4, r2
 800ae42:	d50e      	bpl.n	800ae62 <_svfiprintf_r+0x32>
 800ae44:	690b      	ldr	r3, [r1, #16]
 800ae46:	b963      	cbnz	r3, 800ae62 <_svfiprintf_r+0x32>
 800ae48:	2140      	movs	r1, #64	; 0x40
 800ae4a:	f7ff ff3b 	bl	800acc4 <_malloc_r>
 800ae4e:	6028      	str	r0, [r5, #0]
 800ae50:	6128      	str	r0, [r5, #16]
 800ae52:	b920      	cbnz	r0, 800ae5e <_svfiprintf_r+0x2e>
 800ae54:	230c      	movs	r3, #12
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5c:	e0d1      	b.n	800b002 <_svfiprintf_r+0x1d2>
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	616b      	str	r3, [r5, #20]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9309      	str	r3, [sp, #36]	; 0x24
 800ae66:	2320      	movs	r3, #32
 800ae68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae70:	2330      	movs	r3, #48	; 0x30
 800ae72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b01c <_svfiprintf_r+0x1ec>
 800ae76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae7a:	f04f 0901 	mov.w	r9, #1
 800ae7e:	4623      	mov	r3, r4
 800ae80:	469a      	mov	sl, r3
 800ae82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae86:	b10a      	cbz	r2, 800ae8c <_svfiprintf_r+0x5c>
 800ae88:	2a25      	cmp	r2, #37	; 0x25
 800ae8a:	d1f9      	bne.n	800ae80 <_svfiprintf_r+0x50>
 800ae8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae90:	d00b      	beq.n	800aeaa <_svfiprintf_r+0x7a>
 800ae92:	465b      	mov	r3, fp
 800ae94:	4622      	mov	r2, r4
 800ae96:	4629      	mov	r1, r5
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f7ff ff6d 	bl	800ad78 <__ssputs_r>
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f000 80aa 	beq.w	800aff8 <_svfiprintf_r+0x1c8>
 800aea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea6:	445a      	add	r2, fp
 800aea8:	9209      	str	r2, [sp, #36]	; 0x24
 800aeaa:	f89a 3000 	ldrb.w	r3, [sl]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80a2 	beq.w	800aff8 <_svfiprintf_r+0x1c8>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aebe:	f10a 0a01 	add.w	sl, sl, #1
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	9307      	str	r3, [sp, #28]
 800aec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeca:	931a      	str	r3, [sp, #104]	; 0x68
 800aecc:	4654      	mov	r4, sl
 800aece:	2205      	movs	r2, #5
 800aed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed4:	4851      	ldr	r0, [pc, #324]	; (800b01c <_svfiprintf_r+0x1ec>)
 800aed6:	f7f5 f98b 	bl	80001f0 <memchr>
 800aeda:	9a04      	ldr	r2, [sp, #16]
 800aedc:	b9d8      	cbnz	r0, 800af16 <_svfiprintf_r+0xe6>
 800aede:	06d0      	lsls	r0, r2, #27
 800aee0:	bf44      	itt	mi
 800aee2:	2320      	movmi	r3, #32
 800aee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee8:	0711      	lsls	r1, r2, #28
 800aeea:	bf44      	itt	mi
 800aeec:	232b      	movmi	r3, #43	; 0x2b
 800aeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aef2:	f89a 3000 	ldrb.w	r3, [sl]
 800aef6:	2b2a      	cmp	r3, #42	; 0x2a
 800aef8:	d015      	beq.n	800af26 <_svfiprintf_r+0xf6>
 800aefa:	9a07      	ldr	r2, [sp, #28]
 800aefc:	4654      	mov	r4, sl
 800aefe:	2000      	movs	r0, #0
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4621      	mov	r1, r4
 800af06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af0a:	3b30      	subs	r3, #48	; 0x30
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	d94e      	bls.n	800afae <_svfiprintf_r+0x17e>
 800af10:	b1b0      	cbz	r0, 800af40 <_svfiprintf_r+0x110>
 800af12:	9207      	str	r2, [sp, #28]
 800af14:	e014      	b.n	800af40 <_svfiprintf_r+0x110>
 800af16:	eba0 0308 	sub.w	r3, r0, r8
 800af1a:	fa09 f303 	lsl.w	r3, r9, r3
 800af1e:	4313      	orrs	r3, r2
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	46a2      	mov	sl, r4
 800af24:	e7d2      	b.n	800aecc <_svfiprintf_r+0x9c>
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	1d19      	adds	r1, r3, #4
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	9103      	str	r1, [sp, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bfbb      	ittet	lt
 800af32:	425b      	neglt	r3, r3
 800af34:	f042 0202 	orrlt.w	r2, r2, #2
 800af38:	9307      	strge	r3, [sp, #28]
 800af3a:	9307      	strlt	r3, [sp, #28]
 800af3c:	bfb8      	it	lt
 800af3e:	9204      	strlt	r2, [sp, #16]
 800af40:	7823      	ldrb	r3, [r4, #0]
 800af42:	2b2e      	cmp	r3, #46	; 0x2e
 800af44:	d10c      	bne.n	800af60 <_svfiprintf_r+0x130>
 800af46:	7863      	ldrb	r3, [r4, #1]
 800af48:	2b2a      	cmp	r3, #42	; 0x2a
 800af4a:	d135      	bne.n	800afb8 <_svfiprintf_r+0x188>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	1d1a      	adds	r2, r3, #4
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	9203      	str	r2, [sp, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfb8      	it	lt
 800af58:	f04f 33ff 	movlt.w	r3, #4294967295
 800af5c:	3402      	adds	r4, #2
 800af5e:	9305      	str	r3, [sp, #20]
 800af60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b02c <_svfiprintf_r+0x1fc>
 800af64:	7821      	ldrb	r1, [r4, #0]
 800af66:	2203      	movs	r2, #3
 800af68:	4650      	mov	r0, sl
 800af6a:	f7f5 f941 	bl	80001f0 <memchr>
 800af6e:	b140      	cbz	r0, 800af82 <_svfiprintf_r+0x152>
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	eba0 000a 	sub.w	r0, r0, sl
 800af76:	fa03 f000 	lsl.w	r0, r3, r0
 800af7a:	9b04      	ldr	r3, [sp, #16]
 800af7c:	4303      	orrs	r3, r0
 800af7e:	3401      	adds	r4, #1
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af86:	4826      	ldr	r0, [pc, #152]	; (800b020 <_svfiprintf_r+0x1f0>)
 800af88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af8c:	2206      	movs	r2, #6
 800af8e:	f7f5 f92f 	bl	80001f0 <memchr>
 800af92:	2800      	cmp	r0, #0
 800af94:	d038      	beq.n	800b008 <_svfiprintf_r+0x1d8>
 800af96:	4b23      	ldr	r3, [pc, #140]	; (800b024 <_svfiprintf_r+0x1f4>)
 800af98:	bb1b      	cbnz	r3, 800afe2 <_svfiprintf_r+0x1b2>
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	3307      	adds	r3, #7
 800af9e:	f023 0307 	bic.w	r3, r3, #7
 800afa2:	3308      	adds	r3, #8
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa8:	4433      	add	r3, r6
 800afaa:	9309      	str	r3, [sp, #36]	; 0x24
 800afac:	e767      	b.n	800ae7e <_svfiprintf_r+0x4e>
 800afae:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb2:	460c      	mov	r4, r1
 800afb4:	2001      	movs	r0, #1
 800afb6:	e7a5      	b.n	800af04 <_svfiprintf_r+0xd4>
 800afb8:	2300      	movs	r3, #0
 800afba:	3401      	adds	r4, #1
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	4619      	mov	r1, r3
 800afc0:	f04f 0c0a 	mov.w	ip, #10
 800afc4:	4620      	mov	r0, r4
 800afc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afca:	3a30      	subs	r2, #48	; 0x30
 800afcc:	2a09      	cmp	r2, #9
 800afce:	d903      	bls.n	800afd8 <_svfiprintf_r+0x1a8>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0c5      	beq.n	800af60 <_svfiprintf_r+0x130>
 800afd4:	9105      	str	r1, [sp, #20]
 800afd6:	e7c3      	b.n	800af60 <_svfiprintf_r+0x130>
 800afd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afdc:	4604      	mov	r4, r0
 800afde:	2301      	movs	r3, #1
 800afe0:	e7f0      	b.n	800afc4 <_svfiprintf_r+0x194>
 800afe2:	ab03      	add	r3, sp, #12
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	462a      	mov	r2, r5
 800afe8:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <_svfiprintf_r+0x1f8>)
 800afea:	a904      	add	r1, sp, #16
 800afec:	4638      	mov	r0, r7
 800afee:	f7fe f81b 	bl	8009028 <_printf_float>
 800aff2:	1c42      	adds	r2, r0, #1
 800aff4:	4606      	mov	r6, r0
 800aff6:	d1d6      	bne.n	800afa6 <_svfiprintf_r+0x176>
 800aff8:	89ab      	ldrh	r3, [r5, #12]
 800affa:	065b      	lsls	r3, r3, #25
 800affc:	f53f af2c 	bmi.w	800ae58 <_svfiprintf_r+0x28>
 800b000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b002:	b01d      	add	sp, #116	; 0x74
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	462a      	mov	r2, r5
 800b00e:	4b06      	ldr	r3, [pc, #24]	; (800b028 <_svfiprintf_r+0x1f8>)
 800b010:	a904      	add	r1, sp, #16
 800b012:	4638      	mov	r0, r7
 800b014:	f7fe faac 	bl	8009570 <_printf_i>
 800b018:	e7eb      	b.n	800aff2 <_svfiprintf_r+0x1c2>
 800b01a:	bf00      	nop
 800b01c:	0800ccac 	.word	0x0800ccac
 800b020:	0800ccb6 	.word	0x0800ccb6
 800b024:	08009029 	.word	0x08009029
 800b028:	0800ad79 	.word	0x0800ad79
 800b02c:	0800ccb2 	.word	0x0800ccb2

0800b030 <_sbrk_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_sbrk_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7f8 fb6c 	bl	8003718 <_sbrk>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_sbrk_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_sbrk_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	200011c8 	.word	0x200011c8

0800b050 <__assert_func>:
 800b050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b052:	4614      	mov	r4, r2
 800b054:	461a      	mov	r2, r3
 800b056:	4b09      	ldr	r3, [pc, #36]	; (800b07c <__assert_func+0x2c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4605      	mov	r5, r0
 800b05c:	68d8      	ldr	r0, [r3, #12]
 800b05e:	b14c      	cbz	r4, 800b074 <__assert_func+0x24>
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <__assert_func+0x30>)
 800b062:	9100      	str	r1, [sp, #0]
 800b064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b068:	4906      	ldr	r1, [pc, #24]	; (800b084 <__assert_func+0x34>)
 800b06a:	462b      	mov	r3, r5
 800b06c:	f000 f80e 	bl	800b08c <fiprintf>
 800b070:	f000 faa4 	bl	800b5bc <abort>
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <__assert_func+0x38>)
 800b076:	461c      	mov	r4, r3
 800b078:	e7f3      	b.n	800b062 <__assert_func+0x12>
 800b07a:	bf00      	nop
 800b07c:	200004c8 	.word	0x200004c8
 800b080:	0800ccbd 	.word	0x0800ccbd
 800b084:	0800ccca 	.word	0x0800ccca
 800b088:	0800ccf8 	.word	0x0800ccf8

0800b08c <fiprintf>:
 800b08c:	b40e      	push	{r1, r2, r3}
 800b08e:	b503      	push	{r0, r1, lr}
 800b090:	4601      	mov	r1, r0
 800b092:	ab03      	add	r3, sp, #12
 800b094:	4805      	ldr	r0, [pc, #20]	; (800b0ac <fiprintf+0x20>)
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	f000 f88f 	bl	800b1c0 <_vfiprintf_r>
 800b0a2:	b002      	add	sp, #8
 800b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a8:	b003      	add	sp, #12
 800b0aa:	4770      	bx	lr
 800b0ac:	200004c8 	.word	0x200004c8

0800b0b0 <__ascii_mbtowc>:
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	b901      	cbnz	r1, 800b0b6 <__ascii_mbtowc+0x6>
 800b0b4:	a901      	add	r1, sp, #4
 800b0b6:	b142      	cbz	r2, 800b0ca <__ascii_mbtowc+0x1a>
 800b0b8:	b14b      	cbz	r3, 800b0ce <__ascii_mbtowc+0x1e>
 800b0ba:	7813      	ldrb	r3, [r2, #0]
 800b0bc:	600b      	str	r3, [r1, #0]
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	1e10      	subs	r0, r2, #0
 800b0c2:	bf18      	it	ne
 800b0c4:	2001      	movne	r0, #1
 800b0c6:	b002      	add	sp, #8
 800b0c8:	4770      	bx	lr
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	e7fb      	b.n	800b0c6 <__ascii_mbtowc+0x16>
 800b0ce:	f06f 0001 	mvn.w	r0, #1
 800b0d2:	e7f8      	b.n	800b0c6 <__ascii_mbtowc+0x16>

0800b0d4 <memmove>:
 800b0d4:	4288      	cmp	r0, r1
 800b0d6:	b510      	push	{r4, lr}
 800b0d8:	eb01 0402 	add.w	r4, r1, r2
 800b0dc:	d902      	bls.n	800b0e4 <memmove+0x10>
 800b0de:	4284      	cmp	r4, r0
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	d807      	bhi.n	800b0f4 <memmove+0x20>
 800b0e4:	1e43      	subs	r3, r0, #1
 800b0e6:	42a1      	cmp	r1, r4
 800b0e8:	d008      	beq.n	800b0fc <memmove+0x28>
 800b0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0f2:	e7f8      	b.n	800b0e6 <memmove+0x12>
 800b0f4:	4402      	add	r2, r0
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	428a      	cmp	r2, r1
 800b0fa:	d100      	bne.n	800b0fe <memmove+0x2a>
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b106:	e7f7      	b.n	800b0f8 <memmove+0x24>

0800b108 <__malloc_lock>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__malloc_lock+0x8>)
 800b10a:	f000 bc17 	b.w	800b93c <__retarget_lock_acquire_recursive>
 800b10e:	bf00      	nop
 800b110:	200011d0 	.word	0x200011d0

0800b114 <__malloc_unlock>:
 800b114:	4801      	ldr	r0, [pc, #4]	; (800b11c <__malloc_unlock+0x8>)
 800b116:	f000 bc12 	b.w	800b93e <__retarget_lock_release_recursive>
 800b11a:	bf00      	nop
 800b11c:	200011d0 	.word	0x200011d0

0800b120 <_realloc_r>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	4607      	mov	r7, r0
 800b124:	4614      	mov	r4, r2
 800b126:	460e      	mov	r6, r1
 800b128:	b921      	cbnz	r1, 800b134 <_realloc_r+0x14>
 800b12a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b12e:	4611      	mov	r1, r2
 800b130:	f7ff bdc8 	b.w	800acc4 <_malloc_r>
 800b134:	b922      	cbnz	r2, 800b140 <_realloc_r+0x20>
 800b136:	f7ff fd75 	bl	800ac24 <_free_r>
 800b13a:	4625      	mov	r5, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b140:	f000 fc62 	bl	800ba08 <_malloc_usable_size_r>
 800b144:	42a0      	cmp	r0, r4
 800b146:	d20f      	bcs.n	800b168 <_realloc_r+0x48>
 800b148:	4621      	mov	r1, r4
 800b14a:	4638      	mov	r0, r7
 800b14c:	f7ff fdba 	bl	800acc4 <_malloc_r>
 800b150:	4605      	mov	r5, r0
 800b152:	2800      	cmp	r0, #0
 800b154:	d0f2      	beq.n	800b13c <_realloc_r+0x1c>
 800b156:	4631      	mov	r1, r6
 800b158:	4622      	mov	r2, r4
 800b15a:	f7fd feaf 	bl	8008ebc <memcpy>
 800b15e:	4631      	mov	r1, r6
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff fd5f 	bl	800ac24 <_free_r>
 800b166:	e7e9      	b.n	800b13c <_realloc_r+0x1c>
 800b168:	4635      	mov	r5, r6
 800b16a:	e7e7      	b.n	800b13c <_realloc_r+0x1c>

0800b16c <__sfputc_r>:
 800b16c:	6893      	ldr	r3, [r2, #8]
 800b16e:	3b01      	subs	r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	b410      	push	{r4}
 800b174:	6093      	str	r3, [r2, #8]
 800b176:	da08      	bge.n	800b18a <__sfputc_r+0x1e>
 800b178:	6994      	ldr	r4, [r2, #24]
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	db01      	blt.n	800b182 <__sfputc_r+0x16>
 800b17e:	290a      	cmp	r1, #10
 800b180:	d103      	bne.n	800b18a <__sfputc_r+0x1e>
 800b182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b186:	f000 b94b 	b.w	800b420 <__swbuf_r>
 800b18a:	6813      	ldr	r3, [r2, #0]
 800b18c:	1c58      	adds	r0, r3, #1
 800b18e:	6010      	str	r0, [r2, #0]
 800b190:	7019      	strb	r1, [r3, #0]
 800b192:	4608      	mov	r0, r1
 800b194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <__sfputs_r>:
 800b19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	18d5      	adds	r5, r2, r3
 800b1a4:	42ac      	cmp	r4, r5
 800b1a6:	d101      	bne.n	800b1ac <__sfputs_r+0x12>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e007      	b.n	800b1bc <__sfputs_r+0x22>
 800b1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b0:	463a      	mov	r2, r7
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ffda 	bl	800b16c <__sfputc_r>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d1f3      	bne.n	800b1a4 <__sfputs_r+0xa>
 800b1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1c0 <_vfiprintf_r>:
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	460d      	mov	r5, r1
 800b1c6:	b09d      	sub	sp, #116	; 0x74
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	4698      	mov	r8, r3
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	b118      	cbz	r0, 800b1d8 <_vfiprintf_r+0x18>
 800b1d0:	6983      	ldr	r3, [r0, #24]
 800b1d2:	b90b      	cbnz	r3, 800b1d8 <_vfiprintf_r+0x18>
 800b1d4:	f000 fb14 	bl	800b800 <__sinit>
 800b1d8:	4b89      	ldr	r3, [pc, #548]	; (800b400 <_vfiprintf_r+0x240>)
 800b1da:	429d      	cmp	r5, r3
 800b1dc:	d11b      	bne.n	800b216 <_vfiprintf_r+0x56>
 800b1de:	6875      	ldr	r5, [r6, #4]
 800b1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e2:	07d9      	lsls	r1, r3, #31
 800b1e4:	d405      	bmi.n	800b1f2 <_vfiprintf_r+0x32>
 800b1e6:	89ab      	ldrh	r3, [r5, #12]
 800b1e8:	059a      	lsls	r2, r3, #22
 800b1ea:	d402      	bmi.n	800b1f2 <_vfiprintf_r+0x32>
 800b1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ee:	f000 fba5 	bl	800b93c <__retarget_lock_acquire_recursive>
 800b1f2:	89ab      	ldrh	r3, [r5, #12]
 800b1f4:	071b      	lsls	r3, r3, #28
 800b1f6:	d501      	bpl.n	800b1fc <_vfiprintf_r+0x3c>
 800b1f8:	692b      	ldr	r3, [r5, #16]
 800b1fa:	b9eb      	cbnz	r3, 800b238 <_vfiprintf_r+0x78>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4630      	mov	r0, r6
 800b200:	f000 f96e 	bl	800b4e0 <__swsetup_r>
 800b204:	b1c0      	cbz	r0, 800b238 <_vfiprintf_r+0x78>
 800b206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b208:	07dc      	lsls	r4, r3, #31
 800b20a:	d50e      	bpl.n	800b22a <_vfiprintf_r+0x6a>
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	b01d      	add	sp, #116	; 0x74
 800b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b216:	4b7b      	ldr	r3, [pc, #492]	; (800b404 <_vfiprintf_r+0x244>)
 800b218:	429d      	cmp	r5, r3
 800b21a:	d101      	bne.n	800b220 <_vfiprintf_r+0x60>
 800b21c:	68b5      	ldr	r5, [r6, #8]
 800b21e:	e7df      	b.n	800b1e0 <_vfiprintf_r+0x20>
 800b220:	4b79      	ldr	r3, [pc, #484]	; (800b408 <_vfiprintf_r+0x248>)
 800b222:	429d      	cmp	r5, r3
 800b224:	bf08      	it	eq
 800b226:	68f5      	ldreq	r5, [r6, #12]
 800b228:	e7da      	b.n	800b1e0 <_vfiprintf_r+0x20>
 800b22a:	89ab      	ldrh	r3, [r5, #12]
 800b22c:	0598      	lsls	r0, r3, #22
 800b22e:	d4ed      	bmi.n	800b20c <_vfiprintf_r+0x4c>
 800b230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b232:	f000 fb84 	bl	800b93e <__retarget_lock_release_recursive>
 800b236:	e7e9      	b.n	800b20c <_vfiprintf_r+0x4c>
 800b238:	2300      	movs	r3, #0
 800b23a:	9309      	str	r3, [sp, #36]	; 0x24
 800b23c:	2320      	movs	r3, #32
 800b23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b242:	f8cd 800c 	str.w	r8, [sp, #12]
 800b246:	2330      	movs	r3, #48	; 0x30
 800b248:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b40c <_vfiprintf_r+0x24c>
 800b24c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b250:	f04f 0901 	mov.w	r9, #1
 800b254:	4623      	mov	r3, r4
 800b256:	469a      	mov	sl, r3
 800b258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25c:	b10a      	cbz	r2, 800b262 <_vfiprintf_r+0xa2>
 800b25e:	2a25      	cmp	r2, #37	; 0x25
 800b260:	d1f9      	bne.n	800b256 <_vfiprintf_r+0x96>
 800b262:	ebba 0b04 	subs.w	fp, sl, r4
 800b266:	d00b      	beq.n	800b280 <_vfiprintf_r+0xc0>
 800b268:	465b      	mov	r3, fp
 800b26a:	4622      	mov	r2, r4
 800b26c:	4629      	mov	r1, r5
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff ff93 	bl	800b19a <__sfputs_r>
 800b274:	3001      	adds	r0, #1
 800b276:	f000 80aa 	beq.w	800b3ce <_vfiprintf_r+0x20e>
 800b27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27c:	445a      	add	r2, fp
 800b27e:	9209      	str	r2, [sp, #36]	; 0x24
 800b280:	f89a 3000 	ldrb.w	r3, [sl]
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80a2 	beq.w	800b3ce <_vfiprintf_r+0x20e>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f04f 32ff 	mov.w	r2, #4294967295
 800b290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b294:	f10a 0a01 	add.w	sl, sl, #1
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	9307      	str	r3, [sp, #28]
 800b29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b2a2:	4654      	mov	r4, sl
 800b2a4:	2205      	movs	r2, #5
 800b2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2aa:	4858      	ldr	r0, [pc, #352]	; (800b40c <_vfiprintf_r+0x24c>)
 800b2ac:	f7f4 ffa0 	bl	80001f0 <memchr>
 800b2b0:	9a04      	ldr	r2, [sp, #16]
 800b2b2:	b9d8      	cbnz	r0, 800b2ec <_vfiprintf_r+0x12c>
 800b2b4:	06d1      	lsls	r1, r2, #27
 800b2b6:	bf44      	itt	mi
 800b2b8:	2320      	movmi	r3, #32
 800b2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2be:	0713      	lsls	r3, r2, #28
 800b2c0:	bf44      	itt	mi
 800b2c2:	232b      	movmi	r3, #43	; 0x2b
 800b2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ce:	d015      	beq.n	800b2fc <_vfiprintf_r+0x13c>
 800b2d0:	9a07      	ldr	r2, [sp, #28]
 800b2d2:	4654      	mov	r4, sl
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f04f 0c0a 	mov.w	ip, #10
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e0:	3b30      	subs	r3, #48	; 0x30
 800b2e2:	2b09      	cmp	r3, #9
 800b2e4:	d94e      	bls.n	800b384 <_vfiprintf_r+0x1c4>
 800b2e6:	b1b0      	cbz	r0, 800b316 <_vfiprintf_r+0x156>
 800b2e8:	9207      	str	r2, [sp, #28]
 800b2ea:	e014      	b.n	800b316 <_vfiprintf_r+0x156>
 800b2ec:	eba0 0308 	sub.w	r3, r0, r8
 800b2f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	46a2      	mov	sl, r4
 800b2fa:	e7d2      	b.n	800b2a2 <_vfiprintf_r+0xe2>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	1d19      	adds	r1, r3, #4
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	9103      	str	r1, [sp, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	bfbb      	ittet	lt
 800b308:	425b      	neglt	r3, r3
 800b30a:	f042 0202 	orrlt.w	r2, r2, #2
 800b30e:	9307      	strge	r3, [sp, #28]
 800b310:	9307      	strlt	r3, [sp, #28]
 800b312:	bfb8      	it	lt
 800b314:	9204      	strlt	r2, [sp, #16]
 800b316:	7823      	ldrb	r3, [r4, #0]
 800b318:	2b2e      	cmp	r3, #46	; 0x2e
 800b31a:	d10c      	bne.n	800b336 <_vfiprintf_r+0x176>
 800b31c:	7863      	ldrb	r3, [r4, #1]
 800b31e:	2b2a      	cmp	r3, #42	; 0x2a
 800b320:	d135      	bne.n	800b38e <_vfiprintf_r+0x1ce>
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	1d1a      	adds	r2, r3, #4
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	9203      	str	r2, [sp, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfb8      	it	lt
 800b32e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b332:	3402      	adds	r4, #2
 800b334:	9305      	str	r3, [sp, #20]
 800b336:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b41c <_vfiprintf_r+0x25c>
 800b33a:	7821      	ldrb	r1, [r4, #0]
 800b33c:	2203      	movs	r2, #3
 800b33e:	4650      	mov	r0, sl
 800b340:	f7f4 ff56 	bl	80001f0 <memchr>
 800b344:	b140      	cbz	r0, 800b358 <_vfiprintf_r+0x198>
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	eba0 000a 	sub.w	r0, r0, sl
 800b34c:	fa03 f000 	lsl.w	r0, r3, r0
 800b350:	9b04      	ldr	r3, [sp, #16]
 800b352:	4303      	orrs	r3, r0
 800b354:	3401      	adds	r4, #1
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35c:	482c      	ldr	r0, [pc, #176]	; (800b410 <_vfiprintf_r+0x250>)
 800b35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b362:	2206      	movs	r2, #6
 800b364:	f7f4 ff44 	bl	80001f0 <memchr>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d03f      	beq.n	800b3ec <_vfiprintf_r+0x22c>
 800b36c:	4b29      	ldr	r3, [pc, #164]	; (800b414 <_vfiprintf_r+0x254>)
 800b36e:	bb1b      	cbnz	r3, 800b3b8 <_vfiprintf_r+0x1f8>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	3307      	adds	r3, #7
 800b374:	f023 0307 	bic.w	r3, r3, #7
 800b378:	3308      	adds	r3, #8
 800b37a:	9303      	str	r3, [sp, #12]
 800b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37e:	443b      	add	r3, r7
 800b380:	9309      	str	r3, [sp, #36]	; 0x24
 800b382:	e767      	b.n	800b254 <_vfiprintf_r+0x94>
 800b384:	fb0c 3202 	mla	r2, ip, r2, r3
 800b388:	460c      	mov	r4, r1
 800b38a:	2001      	movs	r0, #1
 800b38c:	e7a5      	b.n	800b2da <_vfiprintf_r+0x11a>
 800b38e:	2300      	movs	r3, #0
 800b390:	3401      	adds	r4, #1
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	4619      	mov	r1, r3
 800b396:	f04f 0c0a 	mov.w	ip, #10
 800b39a:	4620      	mov	r0, r4
 800b39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a0:	3a30      	subs	r2, #48	; 0x30
 800b3a2:	2a09      	cmp	r2, #9
 800b3a4:	d903      	bls.n	800b3ae <_vfiprintf_r+0x1ee>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0c5      	beq.n	800b336 <_vfiprintf_r+0x176>
 800b3aa:	9105      	str	r1, [sp, #20]
 800b3ac:	e7c3      	b.n	800b336 <_vfiprintf_r+0x176>
 800b3ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e7f0      	b.n	800b39a <_vfiprintf_r+0x1da>
 800b3b8:	ab03      	add	r3, sp, #12
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	462a      	mov	r2, r5
 800b3be:	4b16      	ldr	r3, [pc, #88]	; (800b418 <_vfiprintf_r+0x258>)
 800b3c0:	a904      	add	r1, sp, #16
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7fd fe30 	bl	8009028 <_printf_float>
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	1c78      	adds	r0, r7, #1
 800b3cc:	d1d6      	bne.n	800b37c <_vfiprintf_r+0x1bc>
 800b3ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3d0:	07d9      	lsls	r1, r3, #31
 800b3d2:	d405      	bmi.n	800b3e0 <_vfiprintf_r+0x220>
 800b3d4:	89ab      	ldrh	r3, [r5, #12]
 800b3d6:	059a      	lsls	r2, r3, #22
 800b3d8:	d402      	bmi.n	800b3e0 <_vfiprintf_r+0x220>
 800b3da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3dc:	f000 faaf 	bl	800b93e <__retarget_lock_release_recursive>
 800b3e0:	89ab      	ldrh	r3, [r5, #12]
 800b3e2:	065b      	lsls	r3, r3, #25
 800b3e4:	f53f af12 	bmi.w	800b20c <_vfiprintf_r+0x4c>
 800b3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ea:	e711      	b.n	800b210 <_vfiprintf_r+0x50>
 800b3ec:	ab03      	add	r3, sp, #12
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <_vfiprintf_r+0x258>)
 800b3f4:	a904      	add	r1, sp, #16
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7fe f8ba 	bl	8009570 <_printf_i>
 800b3fc:	e7e4      	b.n	800b3c8 <_vfiprintf_r+0x208>
 800b3fe:	bf00      	nop
 800b400:	0800ce24 	.word	0x0800ce24
 800b404:	0800ce44 	.word	0x0800ce44
 800b408:	0800ce04 	.word	0x0800ce04
 800b40c:	0800ccac 	.word	0x0800ccac
 800b410:	0800ccb6 	.word	0x0800ccb6
 800b414:	08009029 	.word	0x08009029
 800b418:	0800b19b 	.word	0x0800b19b
 800b41c:	0800ccb2 	.word	0x0800ccb2

0800b420 <__swbuf_r>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	460e      	mov	r6, r1
 800b424:	4614      	mov	r4, r2
 800b426:	4605      	mov	r5, r0
 800b428:	b118      	cbz	r0, 800b432 <__swbuf_r+0x12>
 800b42a:	6983      	ldr	r3, [r0, #24]
 800b42c:	b90b      	cbnz	r3, 800b432 <__swbuf_r+0x12>
 800b42e:	f000 f9e7 	bl	800b800 <__sinit>
 800b432:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <__swbuf_r+0x98>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d12b      	bne.n	800b490 <__swbuf_r+0x70>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	69a3      	ldr	r3, [r4, #24]
 800b43c:	60a3      	str	r3, [r4, #8]
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	071a      	lsls	r2, r3, #28
 800b442:	d52f      	bpl.n	800b4a4 <__swbuf_r+0x84>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	b36b      	cbz	r3, 800b4a4 <__swbuf_r+0x84>
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	6820      	ldr	r0, [r4, #0]
 800b44c:	1ac0      	subs	r0, r0, r3
 800b44e:	6963      	ldr	r3, [r4, #20]
 800b450:	b2f6      	uxtb	r6, r6
 800b452:	4283      	cmp	r3, r0
 800b454:	4637      	mov	r7, r6
 800b456:	dc04      	bgt.n	800b462 <__swbuf_r+0x42>
 800b458:	4621      	mov	r1, r4
 800b45a:	4628      	mov	r0, r5
 800b45c:	f000 f93c 	bl	800b6d8 <_fflush_r>
 800b460:	bb30      	cbnz	r0, 800b4b0 <__swbuf_r+0x90>
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	3b01      	subs	r3, #1
 800b466:	60a3      	str	r3, [r4, #8]
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	6022      	str	r2, [r4, #0]
 800b46e:	701e      	strb	r6, [r3, #0]
 800b470:	6963      	ldr	r3, [r4, #20]
 800b472:	3001      	adds	r0, #1
 800b474:	4283      	cmp	r3, r0
 800b476:	d004      	beq.n	800b482 <__swbuf_r+0x62>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	07db      	lsls	r3, r3, #31
 800b47c:	d506      	bpl.n	800b48c <__swbuf_r+0x6c>
 800b47e:	2e0a      	cmp	r6, #10
 800b480:	d104      	bne.n	800b48c <__swbuf_r+0x6c>
 800b482:	4621      	mov	r1, r4
 800b484:	4628      	mov	r0, r5
 800b486:	f000 f927 	bl	800b6d8 <_fflush_r>
 800b48a:	b988      	cbnz	r0, 800b4b0 <__swbuf_r+0x90>
 800b48c:	4638      	mov	r0, r7
 800b48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <__swbuf_r+0x9c>)
 800b492:	429c      	cmp	r4, r3
 800b494:	d101      	bne.n	800b49a <__swbuf_r+0x7a>
 800b496:	68ac      	ldr	r4, [r5, #8]
 800b498:	e7cf      	b.n	800b43a <__swbuf_r+0x1a>
 800b49a:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <__swbuf_r+0xa0>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	bf08      	it	eq
 800b4a0:	68ec      	ldreq	r4, [r5, #12]
 800b4a2:	e7ca      	b.n	800b43a <__swbuf_r+0x1a>
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 f81a 	bl	800b4e0 <__swsetup_r>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d0cb      	beq.n	800b448 <__swbuf_r+0x28>
 800b4b0:	f04f 37ff 	mov.w	r7, #4294967295
 800b4b4:	e7ea      	b.n	800b48c <__swbuf_r+0x6c>
 800b4b6:	bf00      	nop
 800b4b8:	0800ce24 	.word	0x0800ce24
 800b4bc:	0800ce44 	.word	0x0800ce44
 800b4c0:	0800ce04 	.word	0x0800ce04

0800b4c4 <__ascii_wctomb>:
 800b4c4:	b149      	cbz	r1, 800b4da <__ascii_wctomb+0x16>
 800b4c6:	2aff      	cmp	r2, #255	; 0xff
 800b4c8:	bf85      	ittet	hi
 800b4ca:	238a      	movhi	r3, #138	; 0x8a
 800b4cc:	6003      	strhi	r3, [r0, #0]
 800b4ce:	700a      	strbls	r2, [r1, #0]
 800b4d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4d4:	bf98      	it	ls
 800b4d6:	2001      	movls	r0, #1
 800b4d8:	4770      	bx	lr
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4770      	bx	lr
	...

0800b4e0 <__swsetup_r>:
 800b4e0:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <__swsetup_r+0xcc>)
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	681d      	ldr	r5, [r3, #0]
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	b125      	cbz	r5, 800b4f6 <__swsetup_r+0x16>
 800b4ec:	69ab      	ldr	r3, [r5, #24]
 800b4ee:	b913      	cbnz	r3, 800b4f6 <__swsetup_r+0x16>
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f000 f985 	bl	800b800 <__sinit>
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <__swsetup_r+0xd0>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	d10f      	bne.n	800b51c <__swsetup_r+0x3c>
 800b4fc:	686c      	ldr	r4, [r5, #4]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b504:	0719      	lsls	r1, r3, #28
 800b506:	d42c      	bmi.n	800b562 <__swsetup_r+0x82>
 800b508:	06dd      	lsls	r5, r3, #27
 800b50a:	d411      	bmi.n	800b530 <__swsetup_r+0x50>
 800b50c:	2309      	movs	r3, #9
 800b50e:	6033      	str	r3, [r6, #0]
 800b510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	f04f 30ff 	mov.w	r0, #4294967295
 800b51a:	e03e      	b.n	800b59a <__swsetup_r+0xba>
 800b51c:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <__swsetup_r+0xd4>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	d101      	bne.n	800b526 <__swsetup_r+0x46>
 800b522:	68ac      	ldr	r4, [r5, #8]
 800b524:	e7eb      	b.n	800b4fe <__swsetup_r+0x1e>
 800b526:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <__swsetup_r+0xd8>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	bf08      	it	eq
 800b52c:	68ec      	ldreq	r4, [r5, #12]
 800b52e:	e7e6      	b.n	800b4fe <__swsetup_r+0x1e>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x7a>
 800b534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x6a>
 800b538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x66>
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff fb6f 	bl	800ac24 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	; 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x9a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x9a>
 800b572:	4621      	mov	r1, r4
 800b574:	4630      	mov	r0, r6
 800b576:	f000 fa07 	bl	800b988 <__smakebuf_r>
 800b57a:	89a0      	ldrh	r0, [r4, #12]
 800b57c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b580:	f010 0301 	ands.w	r3, r0, #1
 800b584:	d00a      	beq.n	800b59c <__swsetup_r+0xbc>
 800b586:	2300      	movs	r3, #0
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	6963      	ldr	r3, [r4, #20]
 800b58c:	425b      	negs	r3, r3
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	b943      	cbnz	r3, 800b5a6 <__swsetup_r+0xc6>
 800b594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b598:	d1ba      	bne.n	800b510 <__swsetup_r+0x30>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	0781      	lsls	r1, r0, #30
 800b59e:	bf58      	it	pl
 800b5a0:	6963      	ldrpl	r3, [r4, #20]
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	e7f4      	b.n	800b590 <__swsetup_r+0xb0>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e7f7      	b.n	800b59a <__swsetup_r+0xba>
 800b5aa:	bf00      	nop
 800b5ac:	200004c8 	.word	0x200004c8
 800b5b0:	0800ce24 	.word	0x0800ce24
 800b5b4:	0800ce44 	.word	0x0800ce44
 800b5b8:	0800ce04 	.word	0x0800ce04

0800b5bc <abort>:
 800b5bc:	b508      	push	{r3, lr}
 800b5be:	2006      	movs	r0, #6
 800b5c0:	f000 fa52 	bl	800ba68 <raise>
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f7f8 f82f 	bl	8003628 <_exit>
	...

0800b5cc <__sflush_r>:
 800b5cc:	898a      	ldrh	r2, [r1, #12]
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	0710      	lsls	r0, r2, #28
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	d458      	bmi.n	800b68c <__sflush_r+0xc0>
 800b5da:	684b      	ldr	r3, [r1, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dc05      	bgt.n	800b5ec <__sflush_r+0x20>
 800b5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dc02      	bgt.n	800b5ec <__sflush_r+0x20>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	d0f9      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f8:	682f      	ldr	r7, [r5, #0]
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	d032      	beq.n	800b664 <__sflush_r+0x98>
 800b5fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	075a      	lsls	r2, r3, #29
 800b604:	d505      	bpl.n	800b612 <__sflush_r+0x46>
 800b606:	6863      	ldr	r3, [r4, #4]
 800b608:	1ac0      	subs	r0, r0, r3
 800b60a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b60c:	b10b      	cbz	r3, 800b612 <__sflush_r+0x46>
 800b60e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b610:	1ac0      	subs	r0, r0, r3
 800b612:	2300      	movs	r3, #0
 800b614:	4602      	mov	r2, r0
 800b616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b618:	6a21      	ldr	r1, [r4, #32]
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b0      	blx	r6
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	d106      	bne.n	800b632 <__sflush_r+0x66>
 800b624:	6829      	ldr	r1, [r5, #0]
 800b626:	291d      	cmp	r1, #29
 800b628:	d82c      	bhi.n	800b684 <__sflush_r+0xb8>
 800b62a:	4a2a      	ldr	r2, [pc, #168]	; (800b6d4 <__sflush_r+0x108>)
 800b62c:	40ca      	lsrs	r2, r1
 800b62e:	07d6      	lsls	r6, r2, #31
 800b630:	d528      	bpl.n	800b684 <__sflush_r+0xb8>
 800b632:	2200      	movs	r2, #0
 800b634:	6062      	str	r2, [r4, #4]
 800b636:	04d9      	lsls	r1, r3, #19
 800b638:	6922      	ldr	r2, [r4, #16]
 800b63a:	6022      	str	r2, [r4, #0]
 800b63c:	d504      	bpl.n	800b648 <__sflush_r+0x7c>
 800b63e:	1c42      	adds	r2, r0, #1
 800b640:	d101      	bne.n	800b646 <__sflush_r+0x7a>
 800b642:	682b      	ldr	r3, [r5, #0]
 800b644:	b903      	cbnz	r3, 800b648 <__sflush_r+0x7c>
 800b646:	6560      	str	r0, [r4, #84]	; 0x54
 800b648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b64a:	602f      	str	r7, [r5, #0]
 800b64c:	2900      	cmp	r1, #0
 800b64e:	d0ca      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b654:	4299      	cmp	r1, r3
 800b656:	d002      	beq.n	800b65e <__sflush_r+0x92>
 800b658:	4628      	mov	r0, r5
 800b65a:	f7ff fae3 	bl	800ac24 <_free_r>
 800b65e:	2000      	movs	r0, #0
 800b660:	6360      	str	r0, [r4, #52]	; 0x34
 800b662:	e7c1      	b.n	800b5e8 <__sflush_r+0x1c>
 800b664:	6a21      	ldr	r1, [r4, #32]
 800b666:	2301      	movs	r3, #1
 800b668:	4628      	mov	r0, r5
 800b66a:	47b0      	blx	r6
 800b66c:	1c41      	adds	r1, r0, #1
 800b66e:	d1c7      	bne.n	800b600 <__sflush_r+0x34>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0c4      	beq.n	800b600 <__sflush_r+0x34>
 800b676:	2b1d      	cmp	r3, #29
 800b678:	d001      	beq.n	800b67e <__sflush_r+0xb2>
 800b67a:	2b16      	cmp	r3, #22
 800b67c:	d101      	bne.n	800b682 <__sflush_r+0xb6>
 800b67e:	602f      	str	r7, [r5, #0]
 800b680:	e7b1      	b.n	800b5e6 <__sflush_r+0x1a>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	e7ad      	b.n	800b5e8 <__sflush_r+0x1c>
 800b68c:	690f      	ldr	r7, [r1, #16]
 800b68e:	2f00      	cmp	r7, #0
 800b690:	d0a9      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b692:	0793      	lsls	r3, r2, #30
 800b694:	680e      	ldr	r6, [r1, #0]
 800b696:	bf08      	it	eq
 800b698:	694b      	ldreq	r3, [r1, #20]
 800b69a:	600f      	str	r7, [r1, #0]
 800b69c:	bf18      	it	ne
 800b69e:	2300      	movne	r3, #0
 800b6a0:	eba6 0807 	sub.w	r8, r6, r7
 800b6a4:	608b      	str	r3, [r1, #8]
 800b6a6:	f1b8 0f00 	cmp.w	r8, #0
 800b6aa:	dd9c      	ble.n	800b5e6 <__sflush_r+0x1a>
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6b0:	4643      	mov	r3, r8
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	47b0      	blx	r6
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	dc06      	bgt.n	800b6ca <__sflush_r+0xfe>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e78e      	b.n	800b5e8 <__sflush_r+0x1c>
 800b6ca:	4407      	add	r7, r0
 800b6cc:	eba8 0800 	sub.w	r8, r8, r0
 800b6d0:	e7e9      	b.n	800b6a6 <__sflush_r+0xda>
 800b6d2:	bf00      	nop
 800b6d4:	20400001 	.word	0x20400001

0800b6d8 <_fflush_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	690b      	ldr	r3, [r1, #16]
 800b6dc:	4605      	mov	r5, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	b913      	cbnz	r3, 800b6e8 <_fflush_r+0x10>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	b118      	cbz	r0, 800b6f2 <_fflush_r+0x1a>
 800b6ea:	6983      	ldr	r3, [r0, #24]
 800b6ec:	b90b      	cbnz	r3, 800b6f2 <_fflush_r+0x1a>
 800b6ee:	f000 f887 	bl	800b800 <__sinit>
 800b6f2:	4b14      	ldr	r3, [pc, #80]	; (800b744 <_fflush_r+0x6c>)
 800b6f4:	429c      	cmp	r4, r3
 800b6f6:	d11b      	bne.n	800b730 <_fflush_r+0x58>
 800b6f8:	686c      	ldr	r4, [r5, #4]
 800b6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0ef      	beq.n	800b6e2 <_fflush_r+0xa>
 800b702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b704:	07d0      	lsls	r0, r2, #31
 800b706:	d404      	bmi.n	800b712 <_fflush_r+0x3a>
 800b708:	0599      	lsls	r1, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_fflush_r+0x3a>
 800b70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70e:	f000 f915 	bl	800b93c <__retarget_lock_acquire_recursive>
 800b712:	4628      	mov	r0, r5
 800b714:	4621      	mov	r1, r4
 800b716:	f7ff ff59 	bl	800b5cc <__sflush_r>
 800b71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	4605      	mov	r5, r0
 800b720:	d4e0      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	059b      	lsls	r3, r3, #22
 800b726:	d4dd      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72a:	f000 f908 	bl	800b93e <__retarget_lock_release_recursive>
 800b72e:	e7d9      	b.n	800b6e4 <_fflush_r+0xc>
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <_fflush_r+0x70>)
 800b732:	429c      	cmp	r4, r3
 800b734:	d101      	bne.n	800b73a <_fflush_r+0x62>
 800b736:	68ac      	ldr	r4, [r5, #8]
 800b738:	e7df      	b.n	800b6fa <_fflush_r+0x22>
 800b73a:	4b04      	ldr	r3, [pc, #16]	; (800b74c <_fflush_r+0x74>)
 800b73c:	429c      	cmp	r4, r3
 800b73e:	bf08      	it	eq
 800b740:	68ec      	ldreq	r4, [r5, #12]
 800b742:	e7da      	b.n	800b6fa <_fflush_r+0x22>
 800b744:	0800ce24 	.word	0x0800ce24
 800b748:	0800ce44 	.word	0x0800ce44
 800b74c:	0800ce04 	.word	0x0800ce04

0800b750 <std>:
 800b750:	2300      	movs	r3, #0
 800b752:	b510      	push	{r4, lr}
 800b754:	4604      	mov	r4, r0
 800b756:	e9c0 3300 	strd	r3, r3, [r0]
 800b75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b75e:	6083      	str	r3, [r0, #8]
 800b760:	8181      	strh	r1, [r0, #12]
 800b762:	6643      	str	r3, [r0, #100]	; 0x64
 800b764:	81c2      	strh	r2, [r0, #14]
 800b766:	6183      	str	r3, [r0, #24]
 800b768:	4619      	mov	r1, r3
 800b76a:	2208      	movs	r2, #8
 800b76c:	305c      	adds	r0, #92	; 0x5c
 800b76e:	f7fd fbb3 	bl	8008ed8 <memset>
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <std+0x38>)
 800b774:	6263      	str	r3, [r4, #36]	; 0x24
 800b776:	4b05      	ldr	r3, [pc, #20]	; (800b78c <std+0x3c>)
 800b778:	62a3      	str	r3, [r4, #40]	; 0x28
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <std+0x40>)
 800b77c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <std+0x44>)
 800b780:	6224      	str	r4, [r4, #32]
 800b782:	6323      	str	r3, [r4, #48]	; 0x30
 800b784:	bd10      	pop	{r4, pc}
 800b786:	bf00      	nop
 800b788:	0800baa1 	.word	0x0800baa1
 800b78c:	0800bac3 	.word	0x0800bac3
 800b790:	0800bafb 	.word	0x0800bafb
 800b794:	0800bb1f 	.word	0x0800bb1f

0800b798 <_cleanup_r>:
 800b798:	4901      	ldr	r1, [pc, #4]	; (800b7a0 <_cleanup_r+0x8>)
 800b79a:	f000 b8af 	b.w	800b8fc <_fwalk_reent>
 800b79e:	bf00      	nop
 800b7a0:	0800b6d9 	.word	0x0800b6d9

0800b7a4 <__sfmoreglue>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	1e4a      	subs	r2, r1, #1
 800b7a8:	2568      	movs	r5, #104	; 0x68
 800b7aa:	4355      	muls	r5, r2
 800b7ac:	460e      	mov	r6, r1
 800b7ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7b2:	f7ff fa87 	bl	800acc4 <_malloc_r>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b140      	cbz	r0, 800b7cc <__sfmoreglue+0x28>
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	60a0      	str	r0, [r4, #8]
 800b7c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7c8:	f7fd fb86 	bl	8008ed8 <memset>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__sfp_lock_acquire+0x8>)
 800b7d2:	f000 b8b3 	b.w	800b93c <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	200011d4 	.word	0x200011d4

0800b7dc <__sfp_lock_release>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__sfp_lock_release+0x8>)
 800b7de:	f000 b8ae 	b.w	800b93e <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	200011d4 	.word	0x200011d4

0800b7e8 <__sinit_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sinit_lock_acquire+0x8>)
 800b7ea:	f000 b8a7 	b.w	800b93c <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	200011cf 	.word	0x200011cf

0800b7f4 <__sinit_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sinit_lock_release+0x8>)
 800b7f6:	f000 b8a2 	b.w	800b93e <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	200011cf 	.word	0x200011cf

0800b800 <__sinit>:
 800b800:	b510      	push	{r4, lr}
 800b802:	4604      	mov	r4, r0
 800b804:	f7ff fff0 	bl	800b7e8 <__sinit_lock_acquire>
 800b808:	69a3      	ldr	r3, [r4, #24]
 800b80a:	b11b      	cbz	r3, 800b814 <__sinit+0x14>
 800b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b810:	f7ff bff0 	b.w	800b7f4 <__sinit_lock_release>
 800b814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b818:	6523      	str	r3, [r4, #80]	; 0x50
 800b81a:	4b13      	ldr	r3, [pc, #76]	; (800b868 <__sinit+0x68>)
 800b81c:	4a13      	ldr	r2, [pc, #76]	; (800b86c <__sinit+0x6c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	62a2      	str	r2, [r4, #40]	; 0x28
 800b822:	42a3      	cmp	r3, r4
 800b824:	bf04      	itt	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	61a3      	streq	r3, [r4, #24]
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f820 	bl	800b870 <__sfp>
 800b830:	6060      	str	r0, [r4, #4]
 800b832:	4620      	mov	r0, r4
 800b834:	f000 f81c 	bl	800b870 <__sfp>
 800b838:	60a0      	str	r0, [r4, #8]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 f818 	bl	800b870 <__sfp>
 800b840:	2200      	movs	r2, #0
 800b842:	60e0      	str	r0, [r4, #12]
 800b844:	2104      	movs	r1, #4
 800b846:	6860      	ldr	r0, [r4, #4]
 800b848:	f7ff ff82 	bl	800b750 <std>
 800b84c:	68a0      	ldr	r0, [r4, #8]
 800b84e:	2201      	movs	r2, #1
 800b850:	2109      	movs	r1, #9
 800b852:	f7ff ff7d 	bl	800b750 <std>
 800b856:	68e0      	ldr	r0, [r4, #12]
 800b858:	2202      	movs	r2, #2
 800b85a:	2112      	movs	r1, #18
 800b85c:	f7ff ff78 	bl	800b750 <std>
 800b860:	2301      	movs	r3, #1
 800b862:	61a3      	str	r3, [r4, #24]
 800b864:	e7d2      	b.n	800b80c <__sinit+0xc>
 800b866:	bf00      	nop
 800b868:	0800ca80 	.word	0x0800ca80
 800b86c:	0800b799 	.word	0x0800b799

0800b870 <__sfp>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	4607      	mov	r7, r0
 800b874:	f7ff ffac 	bl	800b7d0 <__sfp_lock_acquire>
 800b878:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <__sfp+0x84>)
 800b87a:	681e      	ldr	r6, [r3, #0]
 800b87c:	69b3      	ldr	r3, [r6, #24]
 800b87e:	b913      	cbnz	r3, 800b886 <__sfp+0x16>
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff ffbd 	bl	800b800 <__sinit>
 800b886:	3648      	adds	r6, #72	; 0x48
 800b888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	d503      	bpl.n	800b898 <__sfp+0x28>
 800b890:	6833      	ldr	r3, [r6, #0]
 800b892:	b30b      	cbz	r3, 800b8d8 <__sfp+0x68>
 800b894:	6836      	ldr	r6, [r6, #0]
 800b896:	e7f7      	b.n	800b888 <__sfp+0x18>
 800b898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b89c:	b9d5      	cbnz	r5, 800b8d4 <__sfp+0x64>
 800b89e:	4b16      	ldr	r3, [pc, #88]	; (800b8f8 <__sfp+0x88>)
 800b8a0:	60e3      	str	r3, [r4, #12]
 800b8a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a8:	f000 f847 	bl	800b93a <__retarget_lock_init_recursive>
 800b8ac:	f7ff ff96 	bl	800b7dc <__sfp_lock_release>
 800b8b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8b8:	6025      	str	r5, [r4, #0]
 800b8ba:	61a5      	str	r5, [r4, #24]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8c4:	f7fd fb08 	bl	8008ed8 <memset>
 800b8c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d4:	3468      	adds	r4, #104	; 0x68
 800b8d6:	e7d9      	b.n	800b88c <__sfp+0x1c>
 800b8d8:	2104      	movs	r1, #4
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7ff ff62 	bl	800b7a4 <__sfmoreglue>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	6030      	str	r0, [r6, #0]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1d5      	bne.n	800b894 <__sfp+0x24>
 800b8e8:	f7ff ff78 	bl	800b7dc <__sfp_lock_release>
 800b8ec:	230c      	movs	r3, #12
 800b8ee:	603b      	str	r3, [r7, #0]
 800b8f0:	e7ee      	b.n	800b8d0 <__sfp+0x60>
 800b8f2:	bf00      	nop
 800b8f4:	0800ca80 	.word	0x0800ca80
 800b8f8:	ffff0001 	.word	0xffff0001

0800b8fc <_fwalk_reent>:
 800b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b900:	4606      	mov	r6, r0
 800b902:	4688      	mov	r8, r1
 800b904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b908:	2700      	movs	r7, #0
 800b90a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b90e:	f1b9 0901 	subs.w	r9, r9, #1
 800b912:	d505      	bpl.n	800b920 <_fwalk_reent+0x24>
 800b914:	6824      	ldr	r4, [r4, #0]
 800b916:	2c00      	cmp	r4, #0
 800b918:	d1f7      	bne.n	800b90a <_fwalk_reent+0xe>
 800b91a:	4638      	mov	r0, r7
 800b91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b920:	89ab      	ldrh	r3, [r5, #12]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d907      	bls.n	800b936 <_fwalk_reent+0x3a>
 800b926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b92a:	3301      	adds	r3, #1
 800b92c:	d003      	beq.n	800b936 <_fwalk_reent+0x3a>
 800b92e:	4629      	mov	r1, r5
 800b930:	4630      	mov	r0, r6
 800b932:	47c0      	blx	r8
 800b934:	4307      	orrs	r7, r0
 800b936:	3568      	adds	r5, #104	; 0x68
 800b938:	e7e9      	b.n	800b90e <_fwalk_reent+0x12>

0800b93a <__retarget_lock_init_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__retarget_lock_acquire_recursive>:
 800b93c:	4770      	bx	lr

0800b93e <__retarget_lock_release_recursive>:
 800b93e:	4770      	bx	lr

0800b940 <__swhatbuf_r>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	460e      	mov	r6, r1
 800b944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b948:	2900      	cmp	r1, #0
 800b94a:	b096      	sub	sp, #88	; 0x58
 800b94c:	4614      	mov	r4, r2
 800b94e:	461d      	mov	r5, r3
 800b950:	da07      	bge.n	800b962 <__swhatbuf_r+0x22>
 800b952:	2300      	movs	r3, #0
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	89b3      	ldrh	r3, [r6, #12]
 800b958:	061a      	lsls	r2, r3, #24
 800b95a:	d410      	bmi.n	800b97e <__swhatbuf_r+0x3e>
 800b95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b960:	e00e      	b.n	800b980 <__swhatbuf_r+0x40>
 800b962:	466a      	mov	r2, sp
 800b964:	f000 f902 	bl	800bb6c <_fstat_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dbf2      	blt.n	800b952 <__swhatbuf_r+0x12>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b976:	425a      	negs	r2, r3
 800b978:	415a      	adcs	r2, r3
 800b97a:	602a      	str	r2, [r5, #0]
 800b97c:	e7ee      	b.n	800b95c <__swhatbuf_r+0x1c>
 800b97e:	2340      	movs	r3, #64	; 0x40
 800b980:	2000      	movs	r0, #0
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	b016      	add	sp, #88	; 0x58
 800b986:	bd70      	pop	{r4, r5, r6, pc}

0800b988 <__smakebuf_r>:
 800b988:	898b      	ldrh	r3, [r1, #12]
 800b98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b98c:	079d      	lsls	r5, r3, #30
 800b98e:	4606      	mov	r6, r0
 800b990:	460c      	mov	r4, r1
 800b992:	d507      	bpl.n	800b9a4 <__smakebuf_r+0x1c>
 800b994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	2301      	movs	r3, #1
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	ab01      	add	r3, sp, #4
 800b9a6:	466a      	mov	r2, sp
 800b9a8:	f7ff ffca 	bl	800b940 <__swhatbuf_r>
 800b9ac:	9900      	ldr	r1, [sp, #0]
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff f987 	bl	800acc4 <_malloc_r>
 800b9b6:	b948      	cbnz	r0, 800b9cc <__smakebuf_r+0x44>
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	059a      	lsls	r2, r3, #22
 800b9be:	d4ef      	bmi.n	800b9a0 <__smakebuf_r+0x18>
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	f043 0302 	orr.w	r3, r3, #2
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	e7e3      	b.n	800b994 <__smakebuf_r+0xc>
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <__smakebuf_r+0x7c>)
 800b9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	b15b      	cbz	r3, 800b9fc <__smakebuf_r+0x74>
 800b9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 f8d1 	bl	800bb90 <_isatty_r>
 800b9ee:	b128      	cbz	r0, 800b9fc <__smakebuf_r+0x74>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	4305      	orrs	r5, r0
 800ba00:	81a5      	strh	r5, [r4, #12]
 800ba02:	e7cd      	b.n	800b9a0 <__smakebuf_r+0x18>
 800ba04:	0800b799 	.word	0x0800b799

0800ba08 <_malloc_usable_size_r>:
 800ba08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba0c:	1f18      	subs	r0, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfbc      	itt	lt
 800ba12:	580b      	ldrlt	r3, [r1, r0]
 800ba14:	18c0      	addlt	r0, r0, r3
 800ba16:	4770      	bx	lr

0800ba18 <_raise_r>:
 800ba18:	291f      	cmp	r1, #31
 800ba1a:	b538      	push	{r3, r4, r5, lr}
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	460d      	mov	r5, r1
 800ba20:	d904      	bls.n	800ba2c <_raise_r+0x14>
 800ba22:	2316      	movs	r3, #22
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba2e:	b112      	cbz	r2, 800ba36 <_raise_r+0x1e>
 800ba30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba34:	b94b      	cbnz	r3, 800ba4a <_raise_r+0x32>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f830 	bl	800ba9c <_getpid_r>
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4601      	mov	r1, r0
 800ba40:	4620      	mov	r0, r4
 800ba42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba46:	f000 b817 	b.w	800ba78 <_kill_r>
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d00a      	beq.n	800ba64 <_raise_r+0x4c>
 800ba4e:	1c59      	adds	r1, r3, #1
 800ba50:	d103      	bne.n	800ba5a <_raise_r+0x42>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7e7      	b.n	800ba2a <_raise_r+0x12>
 800ba5a:	2400      	movs	r4, #0
 800ba5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba60:	4628      	mov	r0, r5
 800ba62:	4798      	blx	r3
 800ba64:	2000      	movs	r0, #0
 800ba66:	e7e0      	b.n	800ba2a <_raise_r+0x12>

0800ba68 <raise>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	; (800ba74 <raise+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7ff bfd3 	b.w	800ba18 <_raise_r>
 800ba72:	bf00      	nop
 800ba74:	200004c8 	.word	0x200004c8

0800ba78 <_kill_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	; (800ba98 <_kill_r+0x20>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f7f7 fdbf 	bl	8003608 <_kill>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d102      	bne.n	800ba94 <_kill_r+0x1c>
 800ba8e:	682b      	ldr	r3, [r5, #0]
 800ba90:	b103      	cbz	r3, 800ba94 <_kill_r+0x1c>
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	bd38      	pop	{r3, r4, r5, pc}
 800ba96:	bf00      	nop
 800ba98:	200011c8 	.word	0x200011c8

0800ba9c <_getpid_r>:
 800ba9c:	f7f7 bdac 	b.w	80035f8 <_getpid>

0800baa0 <__sread>:
 800baa0:	b510      	push	{r4, lr}
 800baa2:	460c      	mov	r4, r1
 800baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa8:	f000 f894 	bl	800bbd4 <_read_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	bfab      	itete	ge
 800bab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bab2:	89a3      	ldrhlt	r3, [r4, #12]
 800bab4:	181b      	addge	r3, r3, r0
 800bab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800baba:	bfac      	ite	ge
 800babc:	6563      	strge	r3, [r4, #84]	; 0x54
 800babe:	81a3      	strhlt	r3, [r4, #12]
 800bac0:	bd10      	pop	{r4, pc}

0800bac2 <__swrite>:
 800bac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac6:	461f      	mov	r7, r3
 800bac8:	898b      	ldrh	r3, [r1, #12]
 800baca:	05db      	lsls	r3, r3, #23
 800bacc:	4605      	mov	r5, r0
 800bace:	460c      	mov	r4, r1
 800bad0:	4616      	mov	r6, r2
 800bad2:	d505      	bpl.n	800bae0 <__swrite+0x1e>
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	2302      	movs	r3, #2
 800bada:	2200      	movs	r2, #0
 800badc:	f000 f868 	bl	800bbb0 <_lseek_r>
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	4632      	mov	r2, r6
 800baee:	463b      	mov	r3, r7
 800baf0:	4628      	mov	r0, r5
 800baf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf6:	f000 b817 	b.w	800bb28 <_write_r>

0800bafa <__sseek>:
 800bafa:	b510      	push	{r4, lr}
 800bafc:	460c      	mov	r4, r1
 800bafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb02:	f000 f855 	bl	800bbb0 <_lseek_r>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	bf15      	itete	ne
 800bb0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb16:	81a3      	strheq	r3, [r4, #12]
 800bb18:	bf18      	it	ne
 800bb1a:	81a3      	strhne	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__sclose>:
 800bb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb22:	f000 b813 	b.w	800bb4c <_close_r>
	...

0800bb28 <_write_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	; (800bb48 <_write_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f7 fd9d 	bl	8003676 <_write>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_write_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_write_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	200011c8 	.word	0x200011c8

0800bb4c <_close_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d06      	ldr	r5, [pc, #24]	; (800bb68 <_close_r+0x1c>)
 800bb50:	2300      	movs	r3, #0
 800bb52:	4604      	mov	r4, r0
 800bb54:	4608      	mov	r0, r1
 800bb56:	602b      	str	r3, [r5, #0]
 800bb58:	f7f7 fda9 	bl	80036ae <_close>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_close_r+0x1a>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_close_r+0x1a>
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	200011c8 	.word	0x200011c8

0800bb6c <_fstat_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4d07      	ldr	r5, [pc, #28]	; (800bb8c <_fstat_r+0x20>)
 800bb70:	2300      	movs	r3, #0
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f7 fda4 	bl	80036c6 <_fstat>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d102      	bne.n	800bb88 <_fstat_r+0x1c>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b103      	cbz	r3, 800bb88 <_fstat_r+0x1c>
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200011c8 	.word	0x200011c8

0800bb90 <_isatty_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_isatty_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f7 fda3 	bl	80036e6 <_isatty>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_isatty_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_isatty_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	200011c8 	.word	0x200011c8

0800bbb0 <_lseek_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	; (800bbd0 <_lseek_r+0x20>)
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7f7 fd9c 	bl	80036fc <_lseek>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_lseek_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_lseek_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	200011c8 	.word	0x200011c8

0800bbd4 <_read_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	; (800bbf4 <_read_r+0x20>)
 800bbd8:	4604      	mov	r4, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f7 fd2a 	bl	800363c <_read>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_read_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_read_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	200011c8 	.word	0x200011c8

0800bbf8 <_init>:
 800bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfa:	bf00      	nop
 800bbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfe:	bc08      	pop	{r3}
 800bc00:	469e      	mov	lr, r3
 800bc02:	4770      	bx	lr

0800bc04 <_fini>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	bf00      	nop
 800bc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0a:	bc08      	pop	{r3}
 800bc0c:	469e      	mov	lr, r3
 800bc0e:	4770      	bx	lr
